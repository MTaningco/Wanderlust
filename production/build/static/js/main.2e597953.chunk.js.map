{"version":3,"sources":["Globe.jsx","LandmarkInfo.jsx","NewLandmarkTab.jsx","NewPathTab.jsx","ZoomSlider.jsx","Dashboard.jsx","SignIn.jsx","LoggedOut.jsx","SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Globe","size","scale","paths","landmarks","landmarkHandler","tempPath","tempLandmark","useState","mouseCoordinates","setMouseCoordinates","oldCoordinates","setOldCoordinates","newCoordinates","setNewCoordinates","svgRef","useRef","circle","d3","projection","fitSize","type","precision","pathGenerator","useIdleTimer","timeout","onIdle","event","drawGlobe","onActive","onAction","events","debounce","getRemainingTime","getLastActiveTime","resume","rotateParams","scaleParams","isCoarse","svg","current","rotate","isDaylight","selectAll","data","join","attr","feature","drawSphere","land","topojson","landCoarse","landFine","objects","features","drawLand","graticule","drawGraticule","isDayTime","isAirPlane","drawArcs","drawTempPath","landmark","id","style","isVisible","center","coordinates","radius","drawTempLandmark","on","mouseEvent","item","raise","drawLandmarks","useEffect","width","height","ref","border","onMouseDown","screenX","screenY","onMouseMove","currentMouseCoordinates","scalingFactor","movedCoordinates","onMouseUp","LandmarkInfo","currentLandmark","value","index","hidden","descriptionArray","description","split","Typography","variant","name","paragraph","map","element","getLandmarkInfo","setLandmarks","setTempLandmark","invalidateAuth","landmarkName","setLandmarkName","landmarkLatitude","setLandmarkLatitude","landmarkLongitude","setLandmarkLongitude","landmarkDescription","setLandmarkDescription","FormControl","fullWidth","InputLabel","htmlFor","Input","placeholder","onChange","parseFloat","target","newTempLandmark","Math","abs","TextField","label","multiline","rows","Button","color","onClick","body","latitude","longitude","fetch","method","headers","localStorage","getItem","JSON","stringify","then","res","json","prevArray","landmark_uid","path_uid","catch","err","NewPathTab","setPaths","setTempPath","nodes","setNodes","isAirplane","setIsAirplane","handleNewPath","newPath","handleDeleteNode","idArray","parentElement","parseInt","newNodes","splice","updateTempPath","newElements","newIsAirplane","newTempPath","undefined","i","length","node","lat","long","push","onElementLatitudeChange","onElementLongitudeChange","FormControlLabel","control","Switch","checked","checkedIcon","icon","latId","longitudeId","deleteBtnId","getFinishButton","ZoomSlider","handleChangeScale","gutterBottom","Slider","orientation","aria-labelledby","step","min","max","marks","Dashboard","React","isAuth","setIsAuth","setScale","setCurrentLandmark","newValue","getMinDimension","window","innerHeight","innerWidth","tabValue","setTabValue","handleTabChange","removeItem","error","className","Grid","container","spacing","xs","padding","align","AppBar","position","Tabs","aria-label","Tab","minWidth","NewLandmarkTab","to","pathname","SignIn","isTokenValid","setIsTokenValid","username","setUsername","password","setPassword","handleUsernameChange","handlePasswordChange","handleSignIn","console","log","setItem","token","alert","component","margin","required","autoComplete","autoFocus","LoggedOut","SignUp","email","setEmail","isUsernameTaken","setIsUsernameTaken","getUsernameStatus","isexist","count","strengths","RegExp","test","hasNumber","hasSpecial","hasMixed","strengthIndicator","theme","createMuiTheme","palette","App","document","title","ThemeProvider","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e597953.chunk.js","sourcesContent":["//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport * as topojson from \"topojson\";\r\nimport { useIdleTimer } from 'react-idle-timer';\r\n\r\n//Imports from self defined structures\r\n//https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-10m.json\r\n//https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-50m.json\r\n//https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-110m.json\r\nimport landFine from \"./jsonData/land-50m.json\";//TODO: use 10 m if land vs water bug is fixed\r\nimport landCoarse from \"./jsonData/land-110m.json\";\r\n//https://s3-us-west-2.amazonaws.com/s.cdpn.io/215059/cities-200000.json\r\n//https://public.opendatasoft.com/api/records/1.0/search/?dataset=geonames-all-cities-with-a-population-1000&q=&rows=10000&sort=population&pretty_print=true&format=json&fields=population,coordinates,name\r\nimport lightsFine from \"./jsonData/geonames-all-cities-with-a-population-1000.json\";\r\nimport lightsCoarse from \"./jsonData/cities-200000.json\";//TODO: use if performance is fixed\r\n\r\nfunction Globe({size, scale, paths, landmarks, landmarkHandler, tempPath, tempLandmark}) {\r\n    //States\r\n    const [mouseCoordinates, setMouseCoordinates] = useState(null);         //state for initially pressing down the mouse button's position\r\n    const [oldCoordinates, setOldCoordinates] = useState([180, -25]);   //state for the position of the globe during inactivity (units in -longitude, -latitude)\r\n    const [newCoordinates, setNewCoordinates] = useState(null);             //state for updating the old coordinates\r\n\r\n    //Constants\r\n    const svgRef = useRef();\r\n    const circle = d3.geoCircle();\r\n    const projection = d3.geoOrthographic()\r\n        .fitSize([size, size], {type: \"Sphere\"})\r\n        .precision(0.1);\r\n    const pathGenerator = d3.geoPath().projection(projection);\r\n\r\n    /**\r\n    * Handles the mouse down event in the Globe.\r\n    * @param {*} event - the mouse event\r\n    */\r\n    const onMouseDownHandler = (event) => {\r\n        setMouseCoordinates([event.screenX, event.screenY]);\r\n    };\r\n\r\n    /**\r\n     * Gets the Radius of the city.\r\n     * @param {int} population - the population of the city\r\n     */\r\n    const getCityRadius = (population) => {\r\n        if (population < 5000)\r\n            return 0.02\r\n        else if (population < 10000)\r\n            return 0.05\r\n        else if (population < 50000)\r\n            return 0.07\r\n        else if (population < 100000)\r\n            return 0.1\r\n        else\r\n            return 0.2\r\n    };\r\n\r\n    /**\r\n     * Handles when the user has become idle.\r\n     * @param {*} event - the event during idle.\r\n     */\r\n    const handleOnIdle = event => {\r\n        drawGlobe(oldCoordinates, scale, false);\r\n    }\r\n    \r\n    /**\r\n     * Handles when the user has become active.\r\n     * @param {*} event - the event during active\r\n     */\r\n    const handleOnActive = event => {}\r\n    \r\n    /**\r\n     * Handles when the user has done an action.\r\n     * @param {*} event - the event during an action\r\n     */\r\n    const handleOnAction = (event) => {}\r\n     \r\n    //Idle timer and parameters\r\n    const { getRemainingTime, getLastActiveTime, resume } = useIdleTimer({\r\n        timeout: 1000 * 1,\r\n        onIdle: handleOnIdle,\r\n        onActive: handleOnActive,\r\n        onAction: handleOnAction,\r\n        events: ['mousedown', 'mouseup'],\r\n        debounce: 500\r\n    })\r\n\r\n    /**\r\n     * Handler for when the mouse has been moved.\r\n     * @param {*} event - the event of when the mouse has been moved\r\n     */\r\n    const onMouseMoveHandler = (event) => {\r\n        if(mouseCoordinates){\r\n            // console.log(\"mouse move\", e);\r\n            var currentMouseCoordinates = [event.screenX, event.screenY];\r\n            var scalingFactor = 3.0 * scale/200.0;\r\n            var movedCoordinates = [oldCoordinates[0] + (currentMouseCoordinates[0] - mouseCoordinates[0])/scalingFactor, oldCoordinates[1] - (currentMouseCoordinates[1] - mouseCoordinates[1])/scalingFactor];\r\n            movedCoordinates[1] = movedCoordinates[1] < -90 ? -90 :\r\n                movedCoordinates[1] > 90 ?  90 : movedCoordinates[1];\r\n            // projection.rotate(movedCoordinates);\r\n            setNewCoordinates(movedCoordinates);\r\n            drawGlobe(movedCoordinates, scale, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handler when the mouse click is now up.\r\n     * @param {*} event - the event of when the mouse click is now up\r\n     */\r\n    const onMouseUpHandler = (event) => {\r\n        if(newCoordinates){\r\n            setMouseCoordinates(null);\r\n            setOldCoordinates(newCoordinates);\r\n            setNewCoordinates(null);\r\n        }\r\n        setMouseCoordinates(null);\r\n    };\r\n\r\n    /**\r\n     * Draws a sphere.\r\n     * @param {*} svg - the svg used to draw the sphere.\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawSphere = (svg, isDaylight) => {\r\n        svg\r\n            .selectAll(\".sphere\")\r\n            .data([{type: \"Sphere\"}])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"sphere\")\r\n            .attr(\"fill\", isDaylight ? \"#dde\" : \"#1c458c\")\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n    };\r\n\r\n    /**\r\n     * Draws the grid in the ocean.\r\n     * @param {*} svg - the svg used to draw the sphere.\r\n     * @param {boolean} isDaylight - the parameter for night time styles.\r\n     */\r\n    const drawGraticule = (svg, isDaylight) => {\r\n        const graticule = d3.geoGraticule10()\r\n        svg\r\n            .selectAll(\".mesh\")\r\n            .data([graticule])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"mesh\")\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", isDaylight ? \"#ccf\" : \"gray\")\r\n            .attr(\"stroke-opacity\", \"0.5\")\r\n            .attr(\"stroke-width\", isDaylight ? 1 : 0.3)\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n    };\r\n\r\n    /**\r\n     * Draws the land.\r\n     * @param {*} svg - the svg used to draw the sphere\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawLand = (svg, isCoarse, isDaylight) => {\r\n        //Using local json data that is of type Topology\r\n        const land = topojson.feature(isCoarse ? landCoarse : landFine, isCoarse ? landCoarse.objects.land : landFine.objects.land).features;\r\n        // console.log(land);\r\n        svg\r\n        .selectAll(\".country\")\r\n        .data(land)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", isDaylight ? \"#edd\" : \"#f5c684\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.5)\r\n        .attr(\"d\", feature => pathGenerator(feature));\r\n\r\n        //Using external json data that is of type Topology\r\n        // d3.json(\"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-10m.json\").then(res => {\r\n        //     const countries1 = topojson.feature(isCoarse ? landCoarse : res, isCoarse ? landCoarse.objects.land : res.objects.land).features;\r\n        //     console.log(countries1);\r\n        //     svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(countries1)\r\n        //     .join(\"path\")\r\n        //     .attr(\"id\", feature => console.log(feature))\r\n        //     .attr(\"class\", \"country\")\r\n        //     .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     // .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     // .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n        // });\r\n\r\n        //Using local json data that is of type FeatureCollection\r\n        // svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(dataCoarse.features)\r\n        //     .join(\"path\")\r\n        //     .attr(\"class\", \"country\")\r\n        //     // .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     // .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n    };\r\n\r\n    /**\r\n     * Draws city lights based on population sizes in cities.\r\n     * @param {*} svg - the svg used to draw city lights\r\n     */\r\n    const drawLights = (svg, isCoarse) => {\r\n        if(isCoarse){\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsCoarse)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center([parseFloat(cityElement[3]), parseFloat(cityElement[2])]).radius(getCityRadius(cityElement[0]))()));\r\n        }else{\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsFine)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center(cityElement.geometry.coordinates).radius(getCityRadius(cityElement.fields.population))()));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draws the landmarks.\r\n     * @param {*} svg - the svg used to draw the landmarks\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawLandmarks = (svg, isDaylight) => {\r\n        // Format of one element of data\r\n        //   {\r\n        //     id: \"landmark_1\",\r\n        //     landmark_uid: 1,\r\n        //     name: \"Manila / Marikina\",\r\n        //     description: \"First Hometown. Revisited 2011, 2013, 2017, 2018, and 2019.\",\r\n        //     coordinates: [120.9842, 14.5995]\r\n        //   }\r\n        // console.log(\"drawing landmarks\");\r\n        svg\r\n            .selectAll(\".landmarks\")\r\n            .data(landmarks)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"landmarks\")\r\n            .attr(\"id\", landmark => `${landmark.id}`)\r\n            .style(\"fill\", isDaylight ? \"black\" : \"black\")\r\n            .attr(\"fill-opacity\",\"0.3\")\r\n            .on(\"mouseover\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`).style(\"fill\", \"red\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.7)()));\r\n                landmarkHandler(item);\r\n            } )\r\n            .on(\"mouseout\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`)\r\n                .style(\"fill\", isDaylight ? \"black\" : \"black\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n                landmarkHandler(null);\r\n            } )\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    const drawTempLandmark = (svg, isDaylight) => {\r\n        //format of one element of data\r\n        // {\r\n        //     name: \"\",\r\n        //     description: \"\",\r\n        //     coordinates: [0, 0],\r\n        //     isVisible: false\r\n        //   }\r\n        svg\r\n            .selectAll(\".tempLandmark\")\r\n            .data(tempLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempLandmark\")\r\n            .attr(\"id\", landmark => `temp_${landmark.id}`)\r\n            .style(\"fill\", \"red\")\r\n            .attr(\"fill-opacity\",\"0.5\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            // .on(\"mouseover\", (mouseEvent, item) => {\r\n            //     d3.select(`#temp_${item.id}`).style(\"fill\", \"red\")\r\n            //     .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.7)()));\r\n            //     landmarkHandler(item);\r\n            // } )\r\n            // .on(\"mouseout\", (mouseEvent, item) => {\r\n            //     d3.select(`#temp_${item.id}`)\r\n            //     .style(\"fill\", \"red\")\r\n            //     .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n            //     landmarkHandler(null);\r\n            // } )\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n    };\r\n\r\n    /**\r\n     * Draws the arcs.\r\n     * @param {*} svg - the svg used to draw the arcs\r\n     * @param {boolean} isDayTime - the parameter used for night time styles\r\n     */\r\n    const drawArcs = (svg, isDayTime) => {\r\n        //The format of one element of data is \r\n        //{ type: \"LineString\", coordinates: [[-122.810850, 49.191663], [-156.0407, 19.7367]], id:\"path_9\", path_uid: 9, isAirPlane: true}\r\n        svg\r\n            .selectAll(\".arc\")\r\n            .data(paths)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"arc\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\", \"0\")\r\n            .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.3 : 1)\r\n            .attr(\"stroke\", feature => isDayTime ? \"black\" : \"black\")\r\n            .attr(\"stroke-width\", feature => feature.isAirPlane ? 2 : 0.5)\r\n            .attr(\"d\", feature =>pathGenerator(feature));\r\n    };\r\n\r\n    const drawTempPath = (svg, isDayTime) => {\r\n        //format of one element of data\r\n        // {\r\n        //     type: \"LineString\", \r\n        //     coordinates: [],\r\n        //     isAirPlane: true\r\n        //   }\r\n        svg\r\n            .selectAll(\".tempPath\")\r\n            .data(tempPath)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempPath\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", feature => feature.isAirPlane ? \"red\" : \"#0dff00\")\r\n            .attr(\"stroke-opacity\", feature => 1)\r\n            .attr(\"stroke-width\", feature => 0.5)\r\n            .attr(\"d\", feature =>pathGenerator(feature));\r\n    };\r\n    \r\n    /**\r\n     * Draws the globe.\r\n     * @param {Array<number>} rotateParams - the rotation parameters to position the globe\r\n     * @param {number} scaleParams - the scale parameter to scale the globe\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     */\r\n    const drawGlobe = (rotateParams, scaleParams, isCoarse) => {\r\n        const svg = d3.select(svgRef.current);\r\n        projection.rotate(rotateParams).scale(scaleParams);\r\n\r\n        var isDaylight = false;\r\n        \r\n        drawSphere(svg, isDaylight);\r\n\r\n        drawLand(svg, isCoarse, isDaylight);\r\n            \r\n        drawGraticule(svg, isDaylight);\r\n\r\n        if(!isDaylight){\r\n            // drawLights(svg, false);\r\n        }\r\n\r\n        drawArcs(svg, isDaylight);\r\n\r\n        drawTempPath(svg, isDaylight);\r\n        \r\n        drawTempLandmark(svg, isDaylight);\r\n\r\n        drawLandmarks(svg, isDaylight);\r\n\r\n    };\r\n\r\n    //Use effect hook.\r\n    useEffect(() => {\r\n        drawGlobe(oldCoordinates, scale, true);\r\n    }, [scale])\r\n\r\n    \r\n    useEffect(() => {\r\n        drawGlobe(oldCoordinates, scale, false);\r\n    }, [landmarks, paths, tempPath, tempLandmark])\r\n    \r\n    return (\r\n        <svg width={size} height={size} ref={svgRef} style={{border:1 }}\r\n            onMouseDown={onMouseDownHandler} \r\n            onMouseMove={onMouseMoveHandler} \r\n            onMouseUp={onMouseUpHandler}>\r\n        </svg>\r\n    );\r\n}\r\n \r\nexport default Globe;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction LandmarkInfo({ currentLandmark, value, index }) {\r\n    /**\r\n     * Gets the landmark information.\r\n     */\r\n    const getLandmarkInfo = () => {\r\n        if (currentLandmark) {\r\n            var description = currentLandmark.description;\r\n            var descriptionArray = description.split(\"\\n\");\r\n            return (\r\n                <div>\r\n                    <Typography variant=\"h4\">\r\n                        {currentLandmark.name}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" paragraph>\r\n                        Latitude: {currentLandmark.coordinates[1]}, Longitude: {currentLandmark.coordinates[0]}\r\n                    </Typography>\r\n                    {\r\n                        descriptionArray.map(element => {\r\n                            return (\r\n                                <Typography variant=\"h6\" paragraph>\r\n                                    {element}\r\n                                </Typography>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Typography variant=\"h4\">\r\n                        No Landmark Selected\r\n                    </Typography>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    //Use effect hook.\r\n    // useEffect(() => {\r\n    //     drawGlobe(oldCoordinates, scale, true);\r\n    // }, [scale, landmarks])\r\n\r\n    return (\r\n        <div hidden={value !== index}>\r\n            <br/>\r\n            {getLandmarkInfo()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandmarkInfo;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nfunction LandmarkInfo({setLandmarks, value, index, setTempLandmark, invalidateAuth}) {\r\n\r\n  //NewLandmarkTab states\r\n  const [landmarkName, setLandmarkName] = useState(\"\");\r\n  const [landmarkLatitude, setLandmarkLatitude] = useState(\"\");\r\n  const [landmarkLongitude, setLandmarkLongitude] = useState(\"\");\r\n  const [landmarkDescription, setLandmarkDescription] = useState(\"\");\r\n\r\n  /**\r\n   * Handles the description change\r\n   * @param {*} event - the text event \r\n   */\r\n  const handleDescriptionChange = (event) => {\r\n    setLandmarkDescription(event.target.value);\r\n\r\n    var newTempLandmark = [{\r\n      name: landmarkName,\r\n      description: event.target.value,\r\n      coordinates: [landmarkLongitude, landmarkLatitude],\r\n      isVisible: true\r\n    }];\r\n\r\n    // if(landmarkLongitude !== \"\" && landmarkLatitude !== \"\"){\r\n    //   setTempLandmark(newTempLandmark);\r\n    // }\r\n  };\r\n\r\n  /**\r\n   * Handles the name change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setLandmarkName(event.target.value);\r\n\r\n    var newTempLandmark = [{\r\n      name: event.target.value,\r\n      description: landmarkDescription,\r\n      coordinates: [landmarkLongitude, landmarkLatitude],\r\n      isVisible: true\r\n    }];\r\n    \r\n    // if(landmarkLongitude !== \"\" && landmarkLatitude !== \"\"){\r\n    //   setTempLandmark(newTempLandmark);\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Handles the latitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLatitudeChange = (event) => {\r\n    var latitudeInput = parseFloat(event.target.value);\r\n    \r\n    //TODO: validation check\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        name: landmarkName,\r\n        description: landmarkDescription,\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 90){\r\n      setLandmarkLatitude(event.target.value);\r\n      var newTempLandmark = [{\r\n        name: landmarkName,\r\n        description: landmarkDescription,\r\n        coordinates: [landmarkLongitude, event.target.value],\r\n        isVisible: true\r\n      }];\r\n      if(landmarkLongitude !== \"\" && event.target.value !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the longitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLongitudeChange = (event) => {\r\n    var longitudeInput = parseFloat(event.target.value);\r\n    //TODO: validation check\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        name: landmarkName,\r\n        description: landmarkDescription,\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 180){\r\n      setLandmarkLongitude(event.target.value);\r\n\r\n      var newTempLandmark = [{\r\n        name: landmarkName,\r\n        description: landmarkDescription,\r\n        coordinates: [event.target.value, landmarkLatitude],\r\n        isVisible: true\r\n      }];\r\n\r\n      if(event.target.value !== \"\" && landmarkLatitude !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the add landmark event.\r\n   */\r\n  const handleAddLandmark = () => {\r\n\r\n    //TODO: validation check, there might be fields that are empty\r\n    const body = {\r\n      landmarkName: landmarkName,\r\n      landmarkDescription: landmarkDescription,\r\n      latitude: parseFloat(landmarkLatitude),\r\n      longitude: parseFloat(landmarkLongitude)\r\n    }\r\n\r\n    fetch(`/landmarks`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setLandmarks(prevArray => [...prevArray, {\r\n        id: `landmark_${res.landmark_uid}`,\r\n        path_uid: res.landmark_uid,\r\n        name: landmarkName,\r\n        description: landmarkDescription,\r\n        coordinates: [parseFloat(landmarkLongitude), parseFloat(landmarkLatitude)]\r\n      }])\r\n    })\r\n    .catch(err => invalidateAuth());\r\n\r\n    setLandmarkName(\"\");\r\n    setLandmarkLatitude(\"\");\r\n    setLandmarkLongitude(\"\");\r\n    setLandmarkDescription(\"\");\r\n    setTempLandmark([{\r\n      name: \"\",\r\n      description: \"\",\r\n      coordinates: [0, 0],\r\n      isVisible: false\r\n    }]);\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLatitude\" \r\n        placeholder=\"Enter value between -90 to 90\" \r\n        name=\"Latitude\"\r\n        value={landmarkLatitude}\r\n        onChange={handleLatitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLongitude\" \r\n        placeholder=\"Enter value between -180 to 180\" \r\n        name=\"Longitude\"\r\n        value={landmarkLongitude}\r\n        onChange={handleLongitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <TextField \r\n        id=\"standard-basic\" \r\n        label=\"Landmark Name\" \r\n        placeholder=\"ie. Vancouver, BC, Canada\" \r\n        value={landmarkName}\r\n        onChange={handleNameChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <TextField\r\n        id=\"standard-multiline-static\"\r\n        label=\"Description\"\r\n        placeholder=\"Enter a description about the landmark\" \r\n        multiline\r\n        rows={4}\r\n        value={landmarkDescription}\r\n        onChange={handleDescriptionChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddLandmark}>\r\n        Add Landmark\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default LandmarkInfo;","//Imports from libraries\r\nimport React, { useState } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Input } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport AirplanemodeActiveIcon from '@material-ui/icons/AirplanemodeActive';\r\nimport CommuteIcon from '@material-ui/icons/Commute';\r\nfunction NewPathTab({setPaths, value, index, setTempPath, invalidateAuth}) {\r\n\r\n  //NewPathTab states\r\n  const [nodes, setNodes] = useState([]);\r\n  const [isAirplane, setIsAirplane] = useState(true);\r\n\r\n  /**\r\n   * Handles creating a new node.\r\n   */\r\n  const handleNewNode = () => {\r\n    setNodes(prevArray => [...prevArray, [\"\", \"\"]]);\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new path.\r\n   */\r\n  const handleNewPath = () => {\r\n    //TODO: validation, there might be certain nodes that are incomplete\r\n\r\n    const body = {\r\n      coordinates: [...nodes], \r\n      isAirPlane: isAirplane\r\n    }\r\n\r\n    fetch(`/paths`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      let newPath = {\r\n        type: \"LineString\", \r\n        coordinates: [...nodes], \r\n        id:`path_${res.path_uid}`,\r\n        path_uid: res.path_uid,\r\n        isAirPlane: isAirplane\r\n      };\r\n\r\n      setPaths(prevArray => [...prevArray, newPath]);\r\n    })\r\n    .catch(err => invalidateAuth());\r\n\r\n    \r\n    setNodes([]);\r\n    setTempPath([{\r\n      type: \"LineString\",\r\n      coordinates: [],\r\n      isAirPlane: isAirplane\r\n    }]);\r\n  };\r\n\r\n  /**\r\n   * Handles deleting a node.\r\n   * @param {*} event - the button event\r\n   */\r\n  const handleDeleteNode = (event) => {\r\n    var idArray = event.target.parentElement.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newNodes = [...nodes];\r\n    newNodes.splice(index, 1);\r\n\r\n    setNodes(newNodes);\r\n    updateTempPath(newNodes);\r\n  };\r\n\r\n  /**\r\n   * Updates the temporary path.\r\n   * @param {*} newElements - the nodes used to show the temporary path\r\n   * @param {*} newIsAirplane - (optional) the boolean airplane state\r\n   */\r\n  const updateTempPath = (newElements, newIsAirplane) => {\r\n    var isAirplaneVal = newIsAirplane !== undefined ? newIsAirplane : isAirplane;\r\n\r\n    var newTempPath = {\r\n      type: \"LineString\", \r\n      coordinates: [],\r\n      isAirPlane: isAirplaneVal\r\n    };\r\n\r\n    for(var i = 0; i < newElements.length; i++){\r\n      var node = newElements[i];\r\n      var lat = node[1];\r\n      var long = node[0];\r\n\r\n      if(lat !== \"\" && long !== \"\"){\r\n        newTempPath.coordinates.push(node);\r\n      }\r\n    }\r\n    setTempPath([newTempPath]);\r\n  };\r\n\r\n  /**\r\n   * Handles a latitude field being changed.\r\n   * @param {*} event - the text event \r\n   */\r\n  const onElementLatitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 90){\r\n      item[1] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[1] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n\r\n    setNodes(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles a longitude field being changed.\r\n   * @param {*} event - the text event\r\n   */\r\n  const onElementLongitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 180){\r\n      item[0] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[0] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n    \r\n    setNodes(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Gets the view for the finish button.\r\n   */\r\n  const getFinishButton = () => {\r\n    if(nodes.length >= 2){\r\n      return(\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleNewPath} fullWidth>\r\n          Finish Path\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the switch state being changed.\r\n   * @param {*} event - the switch event\r\n   */\r\n  const handleSwitchChange = (event) => {\r\n    setIsAirplane(event.target.checked);\r\n    updateTempPath(nodes, event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch \r\n            checked={isAirplane} \r\n            onChange={handleSwitchChange} \r\n            name=\"checkedA\" \r\n            checkedIcon={<AirplanemodeActiveIcon/>}\r\n            icon={<CommuteIcon/>}\r\n          />\r\n        }\r\n        label=\"Travel Type\"/>\r\n      {\r\n        nodes.map((element, index) => {\r\n          var latId = `nodeLatitude_${index}`;\r\n          var longitudeId = `nodeLongitude_${index}`;\r\n          var deleteBtnId = `deleteBtn_${index}`;\r\n\r\n          return (\r\n            <form>\r\n              <br/>\r\n              <Typography>Node {index + 1}</Typography>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor={latId}>Latitude</InputLabel>\r\n                <Input \r\n                  type=\"number\" \r\n                  id={latId}\r\n                  placeholder=\"Enter value between -90 to 90\" \r\n                  name=\"Latitude\"\r\n                  value={element[1]}\r\n                  onChange={onElementLatitudeChange} />\r\n              </FormControl>\r\n              <FormControl fullWidth>\r\n              <InputLabel htmlFor={longitudeId}>Longitude</InputLabel>\r\n              <Input \r\n                type=\"number\" \r\n                id={longitudeId}\r\n                placeholder=\"Enter value between -180 to 180\" \r\n                name=\"Longitude\"\r\n                value={element[0]}\r\n                onChange={onElementLongitudeChange} />\r\n              </FormControl>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={handleDeleteNode} fullWidth id={deleteBtnId}>\r\n                Delete Node {index + 1}\r\n              </Button>\r\n            </form>\r\n          );\r\n        })\r\n      }\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleNewNode} fullWidth> \r\n        Add Node\r\n      </Button>\r\n      \r\n      {getFinishButton()}\r\n\r\n      <br/>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewPathTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nfunction ZoomSlider({ scale, handleChangeScale }) {\r\n  const marks = [\r\n    {\r\n      value: 1,\r\n      label: 'Full View',\r\n    },\r\n    {\r\n      value: 2,\r\n      label: 'Half View',\r\n    },\r\n    {\r\n      value: 4.24733333333,\r\n      label: '3000 km',\r\n    },\r\n    {\r\n      value: 8.49466666667,\r\n      label: '1500 km',\r\n    },\r\n    {\r\n      value: 12.742,\r\n      label: '1000 km',\r\n    },\r\n    {\r\n      value: 16.9893333333,\r\n      label: '750 km',\r\n    },\r\n    {\r\n      value: 21.2366666667,\r\n      label: '600 km',\r\n    },\r\n    {\r\n      value: 25.484,\r\n      label: '500 km',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{height:\"100%\"}}>\r\n      <Typography id=\"vertical-slider\" gutterBottom>\r\n        <SearchIcon/>\r\n      </Typography>\r\n      <Slider\r\n        orientation=\"vertical\" value={scale} onChange={handleChangeScale}\r\n        aria-labelledby=\"vertical-slider\" step={0.01}\r\n        min={1}\r\n        max={25.484}\r\n        marks={marks}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZoomSlider;","import './App.css';\r\nimport Globe from './Globe';\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport LandmarkInfo from './LandmarkInfo';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport NewLandmarkTab from './NewLandmarkTab';\r\nimport NewPathTab from './NewPathTab';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport ZoomSlider from './ZoomSlider';\r\nimport {  Redirect } from \"react-router-dom\";\r\n\r\nfunction Dashboard() {\r\n  // const classes = useStyles();\r\n  const [isAuth, setIsAuth] = React.useState(true);\r\n  const [scale, setScale] = React.useState(1);\r\n  const [paths, setPaths] = React.useState([]);\r\n  const [landmarks, setLandmarks] = React.useState([]);\r\n  const [currentLandmark, setCurrentLandmark] = React.useState(null);\r\n\r\n  // const clientHeight = document.getElementById('globeGrid').clientHeight;\r\n\r\n  const handleChangeScale = (event, newValue) => {\r\n    setScale(newValue);\r\n  };\r\n\r\n  \r\n  // const getWindowDimension = () => {\r\n  //   var width = document.getElementById('globeGrid').offsetWidth;\r\n  //   var height = document.getElementById('globeGrid').offsetHeight;\r\n  //   console.log(width < height ? width : height);\r\n  //   return width < height ? width : height;\r\n  // };\r\n\r\n  const getMinDimension = () => {\r\n    // console.log(\"dimension calculated\");\r\n    return window.innerHeight < window.innerWidth ? window.innerHeight : window.innerWidth;\r\n  };\r\n\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const [tempPath, setTempPath] = useState([{\r\n    type: \"LineString\", \r\n    coordinates: [],\r\n    isAirPlane: true\r\n  }]);\r\n\r\n  const [tempLandmark, setTempLandmark] = useState([{\r\n    name: \"\",\r\n    description: \"\",\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n\r\n  const getUserPaths = () => {\r\n    fetch(`/paths`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => setPaths(res))\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  const getUserLandmarks = () => {\r\n    fetch(`/landmarks`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => setLandmarks(res))\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  const invalidateAuth = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuth(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserLandmarks();\r\n    getUserPaths();\r\n  }, []);\r\n\r\n  const getDashboardContent = () => {\r\n    if(isAuth){\r\n      return (\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={1} style={{ padding: 60, height:\"90vh\" }}>\r\n            <ZoomSlider scale={scale} handleChangeScale={handleChangeScale}/>\r\n          </Grid>\r\n          <Grid item xs={7} style={{ padding: 60, height:\"90vh\" }}>\r\n            <Globe scale={scale * getMinDimension()*0.6/2} \r\n              paths={paths} \r\n              landmarks={landmarks} \r\n              landmarkHandler={setCurrentLandmark} \r\n              size={getMinDimension()*0.8} \r\n              tempPath={tempPath}\r\n              tempLandmark={tempLandmark}/>\r\n          </Grid>\r\n          <Grid item xs={4} style={{ padding: 60, height:\"90vh\" }} align=\"left\">\r\n            <AppBar position=\"static\">\r\n              <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\r\n                <Tab style={{ minWidth: 25 }} icon={<InfoIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<RoomIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<TimelineIcon/>}/>\r\n              </Tabs>\r\n            </AppBar>\r\n            <LandmarkInfo currentLandmark={currentLandmark} value={tabValue} index={0}/>\r\n            <NewLandmarkTab setLandmarks={setLandmarks} value={tabValue} index={1} setTempLandmark={setTempLandmark} invalidateAuth={invalidateAuth}/>\r\n            <NewPathTab setPaths={setPaths} value={tabValue} index={2} setTempPath={setTempPath} invalidateAuth={invalidateAuth}/>\r\n          </Grid>\r\n          <Grid item xs={12} style={{ padding: 60}}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={invalidateAuth}>\r\n              Logout\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n    else{\r\n      return (<Redirect to={{pathname:'/loggedOut'}}/>);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {getDashboardContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","//Imports from libraries\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\n\r\nfunction SignIn() {\r\n\r\n  const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleSignIn = () => {\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n\r\n    const body = {\r\n      \"username\": username,\r\n      \"password\": password\r\n    }\r\n\r\n    console.log(\"body used for signing in\", body);\r\n\r\n    fetch(`/users/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      console.log(\"result of signing in\", res);\r\n      localStorage.setItem('token', res.token);\r\n      setIsTokenValid(true);\r\n    })\r\n    .catch((error) => alert(\"Invalid credentials!\"));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('token') !== null){\r\n      fetch(`/users/checkToken`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if(res.isTokenValid){\r\n          setIsTokenValid(true);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const getSignInContent = () => {\r\n    if(isTokenValid){\r\n      return (<Redirect to={{pathname:'/dashboard'}}/>);\r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete=\"username\"\r\n              autoFocus\r\n              value={username}\r\n              onChange={handleUsernameChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={password}\r\n              onChange={handlePasswordChange}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleSignIn}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </form>\r\n          <Link to=\"/signUp\">Don't have an account? Sign up</Link>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {getSignInContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction LoggedOut() {\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            Session has expired. Please sign back in.\r\n            <br/>\r\n            <Link to=\"/\">Back to Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoggedOut;","//Imports from libraries\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\n\r\nfunction SignUp() {\r\n\r\n  // const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isUsernameTaken, setIsUsernameTaken] = useState(false);\r\n\r\n  const hasNumber = value => {\r\n    return new RegExp(/[0-9]/).test(value);\r\n  }\r\n  const hasMixed = value => {\r\n    return new RegExp(/[a-z]/).test(value) && new RegExp(/[A-Z]/).test(value);\r\n  }\r\n  const hasSpecial = value => {\r\n    return new RegExp(/[!#@$%^&*)(+=._-]/).test(value);\r\n  }\r\n\r\n  const strengthMagnitude = count => {\r\n    if (count < 2)\r\n       return 'Very Weak';\r\n    if (count < 3)\r\n       return 'Weak';\r\n    if (count < 4)\r\n       return 'Fair';\r\n    if (count < 5)\r\n       return 'Good';\r\n    if (count < 6)\r\n       return 'Strong';\r\n  }\r\n\r\n  const strengthIndicator = value => {\r\n    let strengths = 0;\r\n    if (value.length > 5)\r\n       strengths++;\r\n    if (value.length > 7)\r\n       strengths++;\r\n    if (hasNumber(value))\r\n       strengths++;\r\n    if (hasSpecial(value))\r\n       strengths++;\r\n    if (hasMixed(value))\r\n       strengths++;\r\n    return strengthMagnitude(strengths);\r\n  }\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n    getUsernameStatus(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const getUsernameStatus = (value) => {\r\n    fetch(`/users/exists?username=${value}`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setIsUsernameTaken(res.isexist === \"true\" ? true : false);\r\n    })\r\n  }\r\n\r\n  const handleSignUp = () => {\r\n    if(email === \"\" || password === \"\" || username === \"\"){\r\n      alert(\"At least one field is empty!\");\r\n    }\r\n    else{\r\n      const body = {\r\n        \"email\": email,\r\n        \"password\" : password,\r\n        \"username\" : username\r\n      }\r\n  \r\n      console.log(\"body used for signing in\", body);\r\n  \r\n      fetch(`/users/create`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        // console.log(\"result of signing in\", res);\r\n        // localStorage.setItem('token', res.token);\r\n        // setIsTokenValid(true);\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        setEmail(\"\");\r\n        alert(\"A new user has been made!\")\r\n      })\r\n      .catch((error) => alert(\"The username already exists! Please create an unowned username.\"));\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(localStorage.getItem('token') !== null){\r\n  //     fetch(`/users/checkToken`, {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n  //       },\r\n  //     })\r\n  //     .then(res => res.json())\r\n  //     .then(res => {\r\n  //       if(res.isTokenValid){\r\n  //         setIsTokenValid(true);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Sign Up\r\n      </Typography>\r\n      <form>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          value={email}\r\n          onChange={handleEmailChange}\r\n        />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"username\"\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          autoComplete=\"username\"\r\n          value={username}\r\n          onChange={handleUsernameChange}\r\n        />\r\n        Username Status: {isUsernameTaken ? \"Taken\" : \"Available\"}\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n        />\r\n        Password Strength: {strengthIndicator(password)}\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={handleSignUp}\r\n        >\r\n          Sign Up\r\n        </Button>\r\n      </form>\r\n      <Link to=\"/\">Back to sign in screen</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import './App.css';\nimport React, { Component, useState, useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Dashboard from './Dashboard';\nimport SignIn from './SignIn';\nimport LoggedOut from './LoggedOut';\nimport SignUp from './SignUp';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nfunction App() {\n  \n  useEffect(() => {\n    document.title = 'Wanderlust';\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={SignIn}/>\n          <Route exact path='/dashboard' component={Dashboard}/>\n          <Route exact path='/loggedOut' component={LoggedOut}/>\n          <Route exact path='/signUp' component={SignUp}/>\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}