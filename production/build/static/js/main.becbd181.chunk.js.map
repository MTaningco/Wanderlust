{"version":3,"sources":["Globe.jsx","LandmarkInfo.jsx","NewLandmarkTab.jsx","NewPathTab.jsx","ZoomSlider.jsx","Dashboard.jsx","landing.png","SignIn.jsx","LoggedOut.jsx","SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Globe","size","scale","paths","landmarks","landmarkHandler","tempPath","tempLandmark","currentLandmark","editLandmark","subSolarCoordinates","setScale","useState","mouseCoordinates","setMouseCoordinates","oldCoordinates","setOldCoordinates","newCoordinates","setNewCoordinates","isMove","setIsMove","isDrag","setIsDrag","isLoading","setIsLoading","svgRef","useRef","circle","d3","projection","fitSize","type","precision","pathGenerator","useIdleTimer","timeout","onIdle","event","setTimeout","drawGlobe","onActive","onAction","events","debounce","getRemainingTime","getLastActiveTime","resume","rotateParams","scaleParams","isCoarse","svg","current","rotate","isDaylight","selectAll","data","join","attr","feature","on","mouseEvent","item","isVisible","landmark_uid","name","description","coordinates","drawSphere","land","landCoarse","features","landFine","raise","drawLand","lakes","lakesCoarse","lakesFine","drawLakes","nightLongitude","nightLatitude","style","center","radius","drawCurrentShadow","drawLandOutline","drawLakesOutline","graticule","drawGraticule","landmark","drawCurrentLandmark","isDayTime","isAirPlane","drawArcs","drawTempPath","drawTempLandmark","drawEditLandmark","id","drawLandmarks","useEffect","width","height","ref","border","onMouseDown","screenX","screenY","onMouseMove","currentMouseCoordinates","scalingFactor","movedCoordinates","onMouseUp","onWheel","prev","newVal","deltaY","Math","min","max","LinearProgress","color","LandmarkInfo","value","index","setEditLandmark","updateLandmarks","invalidateAuth","deleteLandmark","isEdit","setIsEdit","editId","setEditId","editName","setEditName","editDescription","setEditDescription","editLongitude","setEditLongitude","editLatitude","setEditLatitude","isProcessing","setIsProcessing","handleNameChange","target","handleDescriptionChange","handleLatitudeChange","abs","parseFloat","handleLongitudeChange","handleDeleteLandmark","window","confirm","body","fetch","method","headers","localStorage","getItem","JSON","stringify","then","res","json","catch","err","handleEditLandmarkMode","handleCancelEdit","handleEditLandmark","alert","hidden","Typography","variant","FormControl","fullWidth","InputLabel","htmlFor","Input","placeholder","onChange","TextField","label","multiline","rows","Button","onClick","CircularProgress","disableShrink","descriptionArray","split","endIcon","paragraph","map","element","getLandmarkInfoContent","NewLandmarkTab","setLandmarks","setTempLandmark","landmarkName","setLandmarkName","landmarkLatitude","setLandmarkLatitude","landmarkLongitude","setLandmarkLongitude","landmarkDescription","setLandmarkDescription","newTempLandmark","latitude","longitude","prevArray","path_uid","NewPathTab","setPaths","setTempPath","nodes","setNodes","isAirplane","setIsAirplane","handleNewPath","isNodesPopulated","i","length","newPath","handleDeleteNode","idArray","parentElement","parseInt","newNodes","splice","updateTempPath","newElements","newIsAirplane","newTempPath","undefined","node","lat","long","push","onElementLatitudeChange","onElementLongitudeChange","FormControlLabel","control","Switch","checked","checkedIcon","icon","Paper","maxHeight","overflow","latId","longitudeId","deleteBtnId","getFinishButton","ZoomSlider","handleChangeScale","gutterBottom","Slider","orientation","aria-labelledby","step","marks","Dashboard","tabValue","setTabValue","isAuth","setIsAuth","setSubSolarCoordinates","React","anchorEl","setAnchorEl","open","Boolean","isPathsLoaded","setIsPathsLoaded","isLandmarksLoaded","setIsLandmarksLoaded","isSubSolarLoaded","setIsSubsolarLoaded","setCurrentLandmark","newValue","getMinDimension","innerHeight","innerWidth","handleTabChange","removeItem","getSubsolarPoint","items","itemToUpdate","newPathHandler","isSameLength","isAirPlaneSame","isCoordinatesSame","handleClose","error","interval","setInterval","clearInterval","className","AppBar","position","Toolbar","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Grid","container","spacing","xs","padding","align","Tabs","Tab","minWidth","to","pathname","SignIn","isTokenValid","setIsTokenValid","username","setUsername","password","setPassword","handleUsernameChange","handlePasswordChange","handleSignIn","setItem","token","backgroundImage","Image","backgroundSize","component","margin","required","autoComplete","autoFocus","LoggedOut","SignUp","email","setEmail","isUsernameTaken","setIsUsernameTaken","getUsernameStatus","isexist","count","strengths","RegExp","test","hasNumber","hasSpecial","hasMixed","strengthIndicator","theme","createMuiTheme","palette","App","document","title","ThemeProvider","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.becbd181.chunk.js","sourcesContent":["//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport * as topojson from \"topojson\";\r\nimport { useIdleTimer } from 'react-idle-timer';\r\n\r\n//Imports from self defined structures\r\n//https://github.com/martynafford/natural-earth-geojson\r\nimport landFine from \"./jsonData/ne_10m_land.json\";\r\nimport landCoarse from \"./jsonData/ne_110m_land.json\";\r\nimport lakesFine from \"./jsonData/ne_10m_lakes.json\";\r\nimport lakesCoarse from \"./jsonData/ne_110m_lakes.json\";\r\n//https://s3-us-west-2.amazonaws.com/s.cdpn.io/215059/cities-200000.json\r\n//https://public.opendatasoft.com/api/records/1.0/search/?dataset=geonames-all-cities-with-a-population-1000&q=&rows=10000&sort=population&pretty_print=true&format=json&fields=population,coordinates,name\r\nimport lightsFine from \"./jsonData/geonames-all-cities-with-a-population-1000.json\";\r\nimport lightsCoarse from \"./jsonData/cities-200000.json\";//TODO: use if performance is fixed\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\";\r\n\r\nfunction Globe({size, scale, paths, landmarks, landmarkHandler, tempPath, tempLandmark, currentLandmark, editLandmark, subSolarCoordinates, setScale}) {\r\n    //States\r\n    const [mouseCoordinates, setMouseCoordinates] = useState(null);         //state for initially pressing down the mouse button's position\r\n    const [oldCoordinates, setOldCoordinates] = useState([180, -25]);   //state for the position of the globe during inactivity (units in -longitude, -latitude)\r\n    const [newCoordinates, setNewCoordinates] = useState(null);             //state for updating the old coordinates\r\n    const [isMove, setIsMove] = useState(false);\r\n    const [isDrag, setIsDrag] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    //Constants\r\n    const svgRef = useRef();\r\n    const circle = d3.geoCircle();\r\n    const projection = d3.geoOrthographic()\r\n        .fitSize([size, size], {type: \"Sphere\"})\r\n        .precision(0.1);\r\n    const pathGenerator = d3.geoPath().projection(projection);\r\n\r\n    /**\r\n    * Handles the mouse down event in the Globe.\r\n    * @param {*} event - the mouse event\r\n    */\r\n    const onMouseDownHandler = (event) => {\r\n        setMouseCoordinates([event.screenX, event.screenY]);\r\n    };\r\n\r\n    /**\r\n     * Gets the Radius of the city.\r\n     * @param {int} population - the population of the city\r\n     */\r\n    const getCityRadius = (population) => {\r\n        if (population < 5000)\r\n            return 0.02\r\n        else if (population < 10000)\r\n            return 0.05\r\n        else if (population < 50000)\r\n            return 0.07\r\n        else if (population < 100000)\r\n            return 0.1\r\n        else\r\n            return 0.2\r\n    };\r\n\r\n    /**\r\n     * Handles when the user has become idle.\r\n     * @param {*} event - the event during idle.\r\n     */\r\n    const handleOnIdle = event => {\r\n        //TODO: fix fine rendering issue\r\n        // if(event !== null && event.type !== \"mousedown\"){\r\n            // console.log(\"event for idle\", event);\r\n            // console.log(\"redrawing globe\");\r\n            // console.log(\"isMove=\", isMove);\r\n            // console.log(\"ismove\", isMove);\r\n            // console.log(\"!isDrag\", !isDrag);\r\n        if(isMove && !isDrag){\r\n            // console.log(\"redrawing globe\");\r\n            // drawGlobe(oldCoordinates, scale, false);\r\n            setIsMove(false);\r\n            \r\n            setIsLoading(true);\r\n            setTimeout(() => {\r\n                drawGlobe(oldCoordinates, scale, false);\r\n                setIsLoading(false);\r\n            }, 400);\r\n        }\r\n        // }\r\n        // console.log(event);\r\n    }\r\n    \r\n    /**\r\n     * Handles when the user has become active.\r\n     * @param {*} event - the event during active\r\n     */\r\n    const handleOnActive = event => {\r\n        //TODO: fix fine rendering issue\r\n        // console.log(event.path[1].tagName === \"svg\");\r\n        // if(event.path[1].tagName === \"svg\"){\r\n        //     if(newCoordinates){\r\n        //         setMouseCoordinates(null);\r\n        //         setOldCoordinates(newCoordinates);\r\n        //         setNewCoordinates(null);\r\n        //     }\r\n        //     setMouseCoordinates(null);\r\n        // }\r\n    }\r\n    \r\n    /**\r\n     * Handles when the user has done an action.\r\n     * @param {*} event - the event during an action\r\n     */\r\n    const handleOnAction = (event) => {}\r\n     \r\n    //Idle timer and parameters\r\n    const { getRemainingTime, getLastActiveTime, resume } = useIdleTimer({\r\n        timeout: 1000 * 1.5,\r\n        onIdle: handleOnIdle,\r\n        onActive: handleOnActive,\r\n        onAction: handleOnAction,\r\n        events: ['mouseup', 'mousewheel'],\r\n        debounce: 500\r\n    })\r\n\r\n    /**\r\n     * Handler for when the mouse has been moved.\r\n     * @param {*} event - the event of when the mouse has been moved\r\n     */\r\n    const onMouseMoveHandler = (event) => {\r\n        //TODO: fix fine rendering issue\r\n        if(mouseCoordinates){\r\n            // console.log(\"mouse move\", e);\r\n            // console.log(\"drawing the globe coarse\");\r\n            var currentMouseCoordinates = [event.screenX, event.screenY];\r\n            var scalingFactor = 3.0 * scale/200.0;\r\n            var movedCoordinates = [oldCoordinates[0] + (currentMouseCoordinates[0] - mouseCoordinates[0])/scalingFactor, oldCoordinates[1] - (currentMouseCoordinates[1] - mouseCoordinates[1])/scalingFactor];\r\n            movedCoordinates[1] = movedCoordinates[1] < -90 ? -90 :\r\n                movedCoordinates[1] > 90 ?  90 : movedCoordinates[1];\r\n            // projection.rotate(movedCoordinates);\r\n            setNewCoordinates(movedCoordinates);\r\n            setIsMove(true);\r\n            setIsDrag(true);\r\n            drawGlobe(movedCoordinates, scale, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handler when the mouse click is now up.\r\n     * @param {*} event - the event of when the mouse click is now up\r\n     */\r\n    const onMouseUpHandler = (event) => {\r\n        //TODO: fix fine rendering issue\r\n        // console.log(\"mouseuphandler activated\");\r\n        if(newCoordinates){\r\n            // setMouseCoordinates(null);\r\n            setOldCoordinates(newCoordinates);\r\n            setNewCoordinates(null);\r\n        }\r\n        setIsDrag(false);\r\n        setMouseCoordinates(null);\r\n    };\r\n\r\n    /**\r\n     * Draws a sphere.\r\n     * @param {*} svg - the svg used to draw the sphere.\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawSphere = (svg, isDaylight) => {\r\n        svg\r\n            .selectAll(\".sphere\")\r\n            .data([{type: \"Sphere\"}])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"sphere\")\r\n            .attr(\"fill\", isDaylight ? \"#dde\" : \"#1c458c\")\r\n            .attr(\"d\", feature => pathGenerator(feature))\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                if(currentLandmark[0].isVisible){\r\n                    landmarkHandler([{\r\n                        landmark_uid: -1,\r\n                        name: \"\",\r\n                        description: \"\",\r\n                        coordinates: [0, 0],\r\n                        isVisible: false\r\n                    }]);\r\n                }\r\n            } );\r\n    };\r\n\r\n    /**\r\n     * Draws the grid.\r\n     * @param {*} svg - the svg used to draw the graticule.\r\n     * @param {boolean} isDaylight - the parameter for night time styles.\r\n     */\r\n    const drawGraticule = (svg, isDaylight) => {\r\n        const graticule = d3.geoGraticule10()\r\n        svg\r\n            .selectAll(\".mesh\")\r\n            .data([graticule])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"mesh\")\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", isDaylight ? \"#ccf\" : \"gray\")\r\n            .attr(\"stroke-opacity\", \"0.5\")\r\n            .attr(\"stroke-width\", isDaylight ? 1 : 0.3)\r\n            .attr(\"d\", feature => pathGenerator(feature))\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                if(currentLandmark[0].isVisible){\r\n                    landmarkHandler([{\r\n                        landmark_uid: -1,\r\n                        name: \"\",\r\n                        description: \"\",\r\n                        coordinates: [0, 0],\r\n                        isVisible: false\r\n                    }]);\r\n                }\r\n            } )\r\n            .raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the land.\r\n     * @param {*} svg - the svg used to draw the land\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawLand = (svg, isCoarse, isDaylight) => {\r\n        //Using local json data that is of type Topology\r\n        const land = isCoarse ? landCoarse.features : landFine.features;\r\n        svg\r\n        .selectAll(\".country\")\r\n        .data(land)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", isDaylight ? \"#edd\" : \"#f5c684\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.5)\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            if(currentLandmark[0].isVisible){\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            }\r\n        } )\r\n        .raise();\r\n\r\n        //Using external json data that is of type Topology\r\n        // d3.json(\"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-10m.json\").then(res => {\r\n        //     const countries1 = topojson.feature(isCoarse ? landCoarse : res, isCoarse ? landCoarse.objects.land : res.objects.land).features;\r\n        //     console.log(countries1);\r\n        //     svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(countries1)\r\n        //     .join(\"path\")\r\n        //     .attr(\"id\", feature => console.log(feature))\r\n        //     .attr(\"class\", \"country\")\r\n        //     .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     // .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     // .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n        // });\r\n\r\n        //Using local json data that is of type FeatureCollection\r\n        // svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(dataCoarse.features)\r\n        //     .join(\"path\")\r\n        //     .attr(\"class\", \"country\")\r\n        //     // .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     // .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n    };\r\n\r\n    const drawLandOutline = (svg, isCoarse, isDaylight) => {\r\n        //Using local json data that is of type Topology\r\n        const land = isCoarse ? landCoarse.features : landFine.features;\r\n        svg\r\n        .selectAll(\".countryOutline\")\r\n        .data(land)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"countryOutline\")\r\n        .attr(\"fill-opacity\", \"0\")\r\n        .attr(\"stroke\", \"#b89463\")\r\n        .attr(\"stroke-width\", 0.3)\r\n        // .attr(\"stroke-opacity\", \"0.8\")\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            if(currentLandmark[0].isVisible){\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            }\r\n        } )\r\n        .raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the lakes.\r\n     * @param {*} svg - the svg used to draw the land\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawLakes = (svg, isCoarse, isDaylight) => {\r\n        const lakes = isCoarse ? lakesCoarse.features :lakesFine.features;\r\n        svg\r\n        .selectAll(\".lakes\")\r\n        .data(lakes)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"lakes\")\r\n        .attr(\"fill\", isDaylight ? \"#edd\" : \"#1c458c\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.5)\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .raise()\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            if(currentLandmark[0].isVisible){\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            }\r\n        });\r\n    };\r\n\r\n    const drawLakesOutline = (svg, isCoarse, isDaylight) => {\r\n        const lakes = isCoarse ? lakesCoarse.features :lakesFine.features;\r\n        svg\r\n        .selectAll(\".lakesOutline\")\r\n        .data(lakes)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"lakesOutline\")\r\n        .attr(\"fill-opacity\", \"0\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.3)\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .raise()\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            if(currentLandmark[0].isVisible){\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Draws city lights based on population sizes in cities.\r\n     * @param {*} svg - the svg used to draw city lights\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     */\r\n    const drawLights = (svg, isCoarse) => {\r\n        if(isCoarse){\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsCoarse)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center([parseFloat(cityElement[3]), parseFloat(cityElement[2])]).radius(getCityRadius(cityElement[0]))())).raise();\r\n        }else{\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsFine)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center(cityElement.geometry.coordinates).radius(getCityRadius(cityElement.fields.population))())).raise();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draws the landmarks.\r\n     * @param {*} svg - the svg used to draw the landmarks\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawLandmarks = (svg, isDaylight) => {\r\n        // Format of one element of data\r\n        //   {\r\n        //     id: \"landmark_1\",\r\n        //     landmark_uid: 1,\r\n        //     name: \"Manila / Marikina\",\r\n        //     description: \"First Hometown. Revisited 2011, 2013, 2017, 2018, and 2019.\",\r\n        //     coordinates: [120.9842, 14.5995]\r\n        //   }\r\n        svg\r\n            .selectAll(\".landmarks\")\r\n            .data(landmarks)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"landmarks\")\r\n            .attr(\"id\", landmark => `${landmark.id}`)\r\n            .style(\"fill\", \"black\")\r\n            .style(\"stroke\", \"white\")\r\n            .attr(\"stroke-width\", 0.2)\r\n            .attr(\"fill-opacity\",\"0.3\")\r\n            .on(\"mouseover\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`).style(\"fill\", \"red\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.3)()));\r\n            } )\r\n            .on(\"mouseout\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`)\r\n                .style(\"fill\", isDaylight ? \"black\" : \"black\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n            } )\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: item.landmark_uid,\r\n                    name: item.name,\r\n                    description: item.description,\r\n                    coordinates: item.coordinates,\r\n                    isVisible: true\r\n                }]);\r\n            })\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current selected landmark.\r\n     * @param {*} svg - the svg used to draw the current selected landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawCurrentLandmark = (svg, isDaylight) => {\r\n        svg\r\n            .selectAll(\".currentLandmark\")\r\n            .data(currentLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"currentLandmark\")\r\n            .attr(\"id\", landmark => `current_${landmark.landmark_uid}`)\r\n            .style(\"fill\", \"red\")\r\n            .attr(\"fill-opacity\",\"0.3\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.2)())).raise();\r\n    }\r\n\r\n    /**\r\n     * Draws the current world night time.\r\n     * @param {*} svg - the svg used to draw the world night time\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawCurrentShadow = (svg, isDaylight) => {\r\n        var nightLongitude = subSolarCoordinates[0] + 180;\r\n        var nightLatitude = -subSolarCoordinates[1];\r\n        var opacity = \"0.3\";\r\n        svg\r\n            .selectAll(\".shadow\")\r\n            .data([90, 90-6, 90-12, 90-18])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"shadow\")\r\n            .attr(\"id\", `shadow`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",opacity)\r\n            .attr(\"d\", data => pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(data)())).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                if(currentLandmark[0].isVisible){\r\n                    landmarkHandler([{\r\n                        landmark_uid: -1,\r\n                        name: \"\",\r\n                        description: \"\",\r\n                        coordinates: [0, 0],\r\n                        isVisible: false\r\n                    }]);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Draws the current new landmark.\r\n     * @param {*} svg - the svg used to draw the current new landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawTempLandmark = (svg, isDaylight) => {\r\n        //format of one element of data\r\n        // {\r\n        //     coordinates: [0, 0],\r\n        //     isVisible: false\r\n        //   }\r\n        svg\r\n            .selectAll(\".tempLandmark\")\r\n            .data(tempLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempLandmark\")\r\n            .attr(\"id\", `tempLandmark`)\r\n            .style(\"fill\", \"red\")\r\n            .attr(\"fill-opacity\",\"0.5\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current modified landmark.\r\n     * @param {} svg - the svg used to draw the current modified landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawEditLandmark = (svg, isDaylight) => {\r\n        //format of one element of data\r\n        // {\r\n        //     coordinates: [0, 0],\r\n        //     isVisible: false\r\n        //   }\r\n        svg\r\n            .selectAll(\".editLandmark\")\r\n            .data(editLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"editLandmark\")\r\n            .attr(\"id\", landmark => `edit`)\r\n            .style(\"fill\", \"orange\")\r\n            .attr(\"fill-opacity\",\"0.5\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\",\"black\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the arcs.\r\n     * @param {*} svg - the svg used to draw the arcs\r\n     * @param {boolean} isDayTime - the parameter used for night time styles\r\n     */\r\n    const drawArcs = (svg, isDayTime) => {\r\n        //The format of one element of data is \r\n        //{ type: \"LineString\", coordinates: [[-122.810850, 49.191663], [-156.0407, 19.7367]], id:\"path_9\", path_uid: 9, isAirPlane: true}\r\n        svg\r\n        .selectAll(\".arcOutline\")\r\n        .data(paths)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"arcOutline\")\r\n        // .transition()\r\n        .attr(\"fill-opacity\", \"0\")\r\n        .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.5 : 1)\r\n        .attr(\"stroke\", feature => isDayTime ? \"black\" : \"white\")\r\n        .attr(\"stroke-width\", feature => feature.isAirPlane ? 0.8 : 0.2)\r\n        .attr(\"d\", feature =>pathGenerator(feature)).raise()\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            if(currentLandmark[0].isVisible){\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            }\r\n        } )\r\n        .raise();\r\n        svg\r\n            .selectAll(\".arc\")\r\n            .data(paths)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"arc\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\", \"0\")\r\n            .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.5 : 1)\r\n            .attr(\"stroke\", feature => isDayTime ? \"black\" : \"black\")\r\n            .attr(\"stroke-width\", feature => feature.isAirPlane ? 1 : 0.5)\r\n            .style(\"stroke-dasharray\", feature => feature.isAirPlane ? (\"15, 3\") : (\"3\", \"3\"))\r\n            .attr(\"d\", feature =>pathGenerator(feature)).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                if(currentLandmark[0].isVisible){\r\n                    landmarkHandler([{\r\n                        landmark_uid: -1,\r\n                        name: \"\",\r\n                        description: \"\",\r\n                        coordinates: [0, 0],\r\n                        isVisible: false\r\n                    }]);\r\n                }\r\n            } )\r\n            .raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current new path.\r\n     * @param {*} svg - the svg used to draw the current new path\r\n     * @param {boolean} isDayTime - the parameter used for night time styles\r\n     */\r\n    const drawTempPath = (svg, isDayTime) => {\r\n        //format of one element of data\r\n        // {\r\n        //     type: \"LineString\", \r\n        //     coordinates: [],\r\n        //     isAirPlane: true\r\n        //   }\r\n        // console.log(tempPath);\r\n        svg\r\n            .selectAll(\".tempPath\")\r\n            .data(tempPath)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempPath\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", feature => feature.isAirPlane ? \"red\" : \"red\")\r\n            .style(\"stroke-dasharray\", feature => feature.isAirPlane ? (\"15, 3\") : (\"3\", \"3\"))\r\n            .attr(\"stroke-opacity\", feature => 1)\r\n            .attr(\"stroke-width\", feature => 1)\r\n            .attr(\"d\", feature =>pathGenerator(feature))\r\n            .raise();\r\n    };\r\n\r\n    const mouseWheelHandler = (event) => {\r\n        setScale(prev => {\r\n            let newVal = prev - event.deltaY/110;\r\n            return Math.min(Math.max(newVal, 1), 25.484);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Draws the globe.\r\n     * @param {Array<number>} rotateParams - the rotation parameters to position the globe\r\n     * @param {number} scaleParams - the scale parameter to scale the globe\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     */\r\n    const drawGlobe = (rotateParams, scaleParams, isCoarse) => {\r\n        const svg = d3.select(svgRef.current);\r\n        projection.rotate(rotateParams).scale(scaleParams);\r\n\r\n        var isDaylight = false;\r\n        \r\n        drawSphere(svg, isDaylight);\r\n        drawLand(svg, isCoarse, isDaylight);\r\n        drawLakes(svg, isCoarse, isDaylight);\r\n        drawCurrentShadow(svg, isDaylight);\r\n\r\n        drawLandOutline(svg, isCoarse, isDaylight);\r\n        drawLakesOutline(svg, isCoarse, isDaylight);\r\n\r\n        if(!isDaylight){\r\n            // drawLights(svg, false);\r\n        }\r\n        \r\n        drawGraticule(svg, isDaylight);    \r\n\r\n        drawCurrentLandmark(svg, isDaylight);\r\n        drawArcs(svg, isDaylight);\r\n        drawTempPath(svg, isDaylight);\r\n        drawTempLandmark(svg, isDaylight);\r\n        drawEditLandmark(svg, isDaylight);\r\n        drawLandmarks(svg, isDaylight);\r\n\r\n    };\r\n\r\n    //Use effect hook.\r\n    useEffect(() => {\r\n        drawGlobe(oldCoordinates, scale, true);\r\n        setIsMove(true);\r\n    }, [scale])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            drawGlobe(oldCoordinates, scale, false);\r\n            setIsLoading(false);\r\n        }, 800);\r\n    }, [landmarks, paths, tempPath, tempLandmark, currentLandmark, editLandmark, subSolarCoordinates])\r\n    \r\n    return (\r\n        <div>\r\n            <svg width={size} height={size} ref={svgRef} style={{border:1 }}\r\n                onMouseDown={onMouseDownHandler} \r\n                onMouseMove={onMouseMoveHandler} \r\n                onMouseUp={onMouseUpHandler}\r\n                onWheel={mouseWheelHandler}\r\n                >\r\n            </svg>\r\n            {isLoading && <LinearProgress color='secondary'/>}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Globe;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { CircularProgress, FormControl, Input, InputLabel, TextField } from \"@material-ui/core\";\r\n\r\nfunction LandmarkInfo({ currentLandmark, value, index, setEditLandmark, updateLandmarks, invalidateAuth, deleteLandmark }) {\r\n    //States\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [editId, setEditId] = useState(-1);\r\n    const [editName, setEditName] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(\"\");\r\n    const [editLongitude, setEditLongitude] = useState(\"\");\r\n    const [editLatitude, setEditLatitude] = useState(\"\");\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    /**\r\n     * Handles the name change of the edited landmark.\r\n     * @param {*} event - the event for the name change\r\n     */\r\n    const handleNameChange = (event) => {\r\n        setEditName(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * Handles the description change of the edited landmark.\r\n     * @param {*} event - the event for the desription change\r\n     */\r\n    const handleDescriptionChange = (event) => {\r\n        setEditDescription(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * Handles the latitude change of the edited landmark.\r\n     * @param {*} event - the event for the latitude change\r\n     */\r\n    const handleLatitudeChange = (event) => {\r\n        if(event.target.value === \"\"){\r\n            var editLandmark = [{\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }];\r\n            setEditLandmark(editLandmark);\r\n        }\r\n\r\n        if(Math.abs(event.target.value) <= 90){\r\n            setEditLatitude(event.target.value);\r\n            var editLandmark = [{\r\n                coordinates: [editLongitude, parseFloat(event.target.value)],\r\n                isVisible: true\r\n            }];\r\n            if(editLongitude !== \"\" && event.target.value !== \"\"){\r\n                setEditLandmark(editLandmark);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the longitude change of the edited landmark.\r\n     * @param {*} event - the event for the longitude change\r\n     */\r\n    const handleLongitudeChange = (event) => {\r\n        if(event.target.value === \"\"){\r\n            var editLandmark = [{\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }];\r\n            setEditLandmark(editLandmark);\r\n        }\r\n\r\n        if(Math.abs(event.target.value) <= 180){\r\n            setEditLongitude(event.target.value);\r\n            var editLandmark = [{\r\n                coordinates: [parseFloat(event.target.value), editLatitude],\r\n                isVisible: true\r\n            }];\r\n            if(editLatitude !== \"\" && event.target.value !== \"\"){\r\n                setEditLandmark(editLandmark);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles deleting the landmark.\r\n     */\r\n    const handleDeleteLandmark = () => {\r\n        let isConfirmed = window.confirm(`Are you sure you want to delete this landmark?\\n\\n${currentLandmark[0].name}\\nlongitude:${currentLandmark[0].coordinates[0]}\\nlatitude:${currentLandmark[0].coordinates[1]}\\n\\n${currentLandmark[0].description}`);\r\n        if(isConfirmed){\r\n            setIsProcessing(true);\r\n            const body = {\r\n                landmark_uid: currentLandmark[0].landmark_uid\r\n            };\r\n            fetch(`/landmarks`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setIsProcessing(false);\r\n                // deleteLandmark(currentLandmark[0].landmark_uid);\r\n                setIsEdit(false);\r\n                setTimeout(() => {\r\n                    deleteLandmark(currentLandmark[0].landmark_uid);\r\n                }, 500);\r\n            })\r\n            .catch(err => invalidateAuth());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles switching to the mode of editing a landmark.\r\n     */\r\n    const handleEditLandmarkMode = () => {\r\n        setIsEdit(true);\r\n        setEditId(currentLandmark[0].landmark_uid);\r\n        setEditName(currentLandmark[0].name);\r\n        setEditDescription(currentLandmark[0].description);\r\n        setEditLongitude(currentLandmark[0].coordinates[0]);\r\n        setEditLatitude(currentLandmark[0].coordinates[1]);\r\n        var editLandmark = [{\r\n            coordinates: [currentLandmark[0].coordinates[0], currentLandmark[0].coordinates[1]],\r\n            isVisible: true\r\n        }];\r\n        setEditLandmark(editLandmark);\r\n    };\r\n\r\n    /**\r\n     * Handles canceling out of the edit mode.\r\n     */\r\n    const handleCancelEdit = () => {\r\n        var editLandmark = [{\r\n            coordinates: [0, 0],\r\n            isVisible: false\r\n        }];\r\n        setEditLandmark(editLandmark);\r\n        setIsEdit(false);\r\n    };\r\n\r\n    /**\r\n     * Handles editing the landmark.\r\n     */\r\n    const handleEditLandmark = () => {\r\n        if(editId !== -1 && editName !== \"\" && editLongitude !== \"\" && editLatitude !== \"\"){\r\n            setIsProcessing(true);\r\n            const body = {\r\n                landmark_uid: editId,\r\n                name: editName,\r\n                description: editDescription,\r\n                coordinates: [editLongitude, editLatitude]\r\n            };\r\n\r\n            fetch(`/landmarks`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setIsEdit(false);\r\n                setIsProcessing(false);\r\n                setTimeout(() => {\r\n                    updateLandmarks({\r\n                        landmark_uid: editId,\r\n                        name: editName,\r\n                        description: editDescription,\r\n                        coordinates: [editLongitude, editLatitude]\r\n                    })\r\n                }, 500);\r\n            })\r\n            .catch(err => invalidateAuth());\r\n        }\r\n        else{\r\n            alert('A field is missing! Cannot update landmark.')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the landmark information.\r\n     */\r\n    const getLandmarkInfoContent = () => {\r\n        const landmark = currentLandmark[0];\r\n        if (landmark.isVisible) {\r\n            if(isEdit){\r\n                return (\r\n                    <form>\r\n                        <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n                        <Input \r\n                            type=\"number\" \r\n                            id=\"landmarkLatitude\" \r\n                            placeholder=\"Enter value between -90 to 90\" \r\n                            name=\"Latitude\"\r\n                            value={editLatitude}\r\n                            onChange={handleLatitudeChange}/>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n                        <Input \r\n                            type=\"number\" \r\n                            id=\"landmarkLongitude\" \r\n                            placeholder=\"Enter value between -180 to 180\" \r\n                            name=\"Longitude\"\r\n                            value={editLongitude}\r\n                            onChange={handleLongitudeChange}/>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <TextField \r\n                            id=\"standard-basic\" \r\n                            label=\"Landmark Name\" \r\n                            placeholder=\"ie. Vancouver, BC, Canada\" \r\n                            value={editName}\r\n                            onChange={handleNameChange}\r\n                            fullWidth/>\r\n                        <br/>\r\n                        <TextField\r\n                            id=\"standard-multiline-static\"\r\n                            label=\"Description\"\r\n                            placeholder=\"Enter a description about the landmark\" \r\n                            multiline\r\n                            rows={4}\r\n                            value={editDescription}\r\n                            onChange={handleDescriptionChange}\r\n                            fullWidth/>\r\n                        <br/>\r\n                        <br/>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleEditLandmark}>\r\n                            {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n                            {!isProcessing && 'Finish Edit'}\r\n                        </Button>\r\n                        \r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handleCancelEdit}>\r\n                            {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n                            {!isProcessing && 'Cancel Edit'}\r\n                        </Button>\r\n                    </form>\r\n                );\r\n            }\r\n            else{\r\n                var description = landmark.description;\r\n                var descriptionArray = description.split(\"\\n\");\r\n                return (\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            endIcon={!isProcessing ? <EditIcon/> : ''}\r\n                            onClick={handleEditLandmarkMode}>\r\n                            {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n                            {!isProcessing && 'Edit'}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            endIcon={!isProcessing ? <DeleteIcon/> : ''}\r\n                            onClick={handleDeleteLandmark}>\r\n                            {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n                            {!isProcessing && 'Delete'}\r\n                        </Button>\r\n                        <Typography variant=\"h4\">\r\n                            {landmark.name}\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" paragraph>\r\n                            Latitude: {landmark.coordinates[1]}, Longitude: {landmark.coordinates[0]}\r\n                        </Typography>\r\n                        {\r\n                            descriptionArray.map(element => {\r\n                                return (\r\n                                    <Typography variant=\"h6\" paragraph>\r\n                                        {element}\r\n                                    </Typography>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Typography variant=\"h4\">\r\n                        Click on a Landmark\r\n                    </Typography>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div hidden={value !== index}>\r\n            \r\n            <Typography variant=\"h5\">\r\n                Landmark Information\r\n            </Typography>\r\n            <br/>\r\n            {getLandmarkInfoContent()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandmarkInfo;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input, Typography, CircularProgress } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nfunction NewLandmarkTab({setLandmarks, value, index, setTempLandmark, invalidateAuth}) {\r\n\r\n  //States\r\n  const [landmarkName, setLandmarkName] = useState(\"\");\r\n  const [landmarkLatitude, setLandmarkLatitude] = useState(\"\");\r\n  const [landmarkLongitude, setLandmarkLongitude] = useState(\"\");\r\n  const [landmarkDescription, setLandmarkDescription] = useState(\"\");\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  /**\r\n   * Handles the description change\r\n   * @param {*} event - the text event \r\n   */\r\n  const handleDescriptionChange = (event) => {\r\n    setLandmarkDescription(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the name change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setLandmarkName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles the latitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLatitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 90){\r\n      setLandmarkLatitude(parseFloat(event.target.value));\r\n      var newTempLandmark = [{\r\n        coordinates: [landmarkLongitude, parseFloat(event.target.value)],\r\n        isVisible: true\r\n      }];\r\n      if(landmarkLongitude !== \"\" && event.target.value !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the longitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLongitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 180){\r\n      setLandmarkLongitude(parseFloat(event.target.value));\r\n\r\n      var newTempLandmark = [{\r\n        coordinates: [parseFloat(event.target.value), landmarkLatitude],\r\n        isVisible: true\r\n      }];\r\n\r\n      if(event.target.value !== \"\" && landmarkLatitude !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the add landmark event.\r\n   */\r\n  const handleAddLandmark = () => {\r\n    if(!(landmarkName === \"\" || landmarkLatitude === \"\" || landmarkLongitude === \"\")){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        landmarkName: landmarkName,\r\n        landmarkDescription: landmarkDescription,\r\n        latitude: parseFloat(landmarkLatitude),\r\n        longitude: parseFloat(landmarkLongitude)\r\n      }\r\n  \r\n      fetch(`/landmarks`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setLandmarkName(\"\");\r\n        setLandmarkLatitude(\"\");\r\n        setLandmarkLongitude(\"\");\r\n        setLandmarkDescription(\"\");\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          setLandmarks(prevArray => [...prevArray, {\r\n            id: `landmark_${res.landmark_uid}`,\r\n            path_uid: res.landmark_uid,\r\n            name: landmarkName,\r\n            description: landmarkDescription,\r\n            coordinates: [parseFloat(landmarkLongitude), parseFloat(landmarkLatitude)]\r\n          }]);\r\n          setTempLandmark([{\r\n            coordinates: [0, 0],\r\n            isVisible: false\r\n          }]);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());//TODO: check if processing needs to be set to false here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Landmark\r\n      </Typography>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLatitude\" \r\n        placeholder=\"Enter value between -90 to 90\" \r\n        name=\"Latitude\"\r\n        value={landmarkLatitude}\r\n        onChange={handleLatitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLongitude\" \r\n        placeholder=\"Enter value between -180 to 180\" \r\n        name=\"Longitude\"\r\n        value={landmarkLongitude}\r\n        onChange={handleLongitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <TextField \r\n        id=\"standard-basic\" \r\n        label=\"Landmark Name\" \r\n        placeholder=\"ie. Vancouver, BC, Canada\" \r\n        value={landmarkName}\r\n        onChange={handleNameChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <TextField\r\n        id=\"standard-multiline-static\"\r\n        label=\"Description\"\r\n        placeholder=\"Enter a description about the landmark\" \r\n        multiline\r\n        rows={4}\r\n        value={landmarkDescription}\r\n        onChange={handleDescriptionChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddLandmark}>\r\n        {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n        {!isProcessing && 'Add Landmark'}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewLandmarkTab;","//Imports from libraries\r\nimport React, { useState } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Input, CircularProgress, Paper } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport AirplanemodeActiveIcon from '@material-ui/icons/AirplanemodeActive';\r\nimport CommuteIcon from '@material-ui/icons/Commute';\r\n\r\nfunction NewPathTab({setPaths, value, index, setTempPath, invalidateAuth}) {\r\n\r\n  //NewPathTab states\r\n  const [nodes, setNodes] = useState([]);\r\n  const [isAirplane, setIsAirplane] = useState(true);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  /**\r\n   * Handles creating a new node.\r\n   */\r\n  const handleNewNode = () => {\r\n    setNodes(prevArray => [...prevArray, [\"\", \"\"]]);\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new path.\r\n   */\r\n  const handleNewPath = () => {\r\n    var isNodesPopulated = true;\r\n\r\n    for(var i = 0; i < nodes.length; i++){\r\n      if(nodes[i][0] === \"\" || nodes[i][1] === \"\"){\r\n        isNodesPopulated = false;\r\n      }\r\n    }\r\n    \r\n    if(isNodesPopulated){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        coordinates: [...nodes], \r\n        isAirPlane: isAirplane\r\n      }\r\n  \r\n      fetch(`/paths`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        let newPath = {\r\n          type: \"LineString\", \r\n          coordinates: [...nodes], \r\n          id:`path_${res.path_uid}`,\r\n          path_uid: res.path_uid,\r\n          isAirPlane: isAirplane\r\n        };\r\n  \r\n        setNodes([]);\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          setPaths(prevArray => [...prevArray, newPath]);\r\n          setTempPath([{\r\n            type: \"LineString\",\r\n            coordinates: [],\r\n            isAirPlane: isAirplane\r\n          }]);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles deleting a node.\r\n   * @param {*} event - the button event\r\n   */\r\n  const handleDeleteNode = (event) => {\r\n    var idArray = event.target.parentElement.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newNodes = [...nodes];\r\n    newNodes.splice(index, 1);\r\n\r\n    setNodes(newNodes);\r\n    updateTempPath(newNodes);\r\n  };\r\n\r\n  /**\r\n   * Updates the temporary path.\r\n   * @param {*} newElements - the nodes used to show the temporary path\r\n   * @param {*} newIsAirplane - (optional) the boolean airplane state\r\n   */\r\n  const updateTempPath = (newElements, newIsAirplane) => {\r\n    var isAirplaneVal = newIsAirplane !== undefined ? newIsAirplane : isAirplane;\r\n\r\n    var newTempPath = {\r\n      type: \"LineString\", \r\n      coordinates: [],\r\n      isAirPlane: isAirplaneVal\r\n    };\r\n\r\n    for(var i = 0; i < newElements.length; i++){\r\n      var node = newElements[i];\r\n      var lat = node[1];\r\n      var long = node[0];\r\n\r\n      if(lat !== \"\" && long !== \"\"){\r\n        newTempPath.coordinates.push(node);\r\n      }\r\n    }\r\n    setTempPath([newTempPath]);\r\n  };\r\n\r\n  /**\r\n   * Handles a latitude field being changed.\r\n   * @param {*} event - the text event \r\n   */\r\n  const onElementLatitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 90){\r\n      item[1] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[1] = event.target.value;\r\n    }\r\n    \r\n    newElements[index] = item;\r\n\r\n    setNodes(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles a longitude field being changed.\r\n   * @param {*} event - the text event\r\n   */\r\n  const onElementLongitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 180){\r\n      item[0] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[0] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n    \r\n    setNodes(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles the switch state being changed.\r\n   * @param {*} event - the switch event\r\n   */\r\n  const handleSwitchChange = (event) => {\r\n    setIsAirplane(event.target.checked);\r\n    updateTempPath(nodes, event.target.checked);\r\n  };\r\n\r\n  /**\r\n   * Gets the view for the finish button.\r\n   */\r\n  const getFinishButton = () => {\r\n    if(nodes.length >= 2){\r\n      return(\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleNewPath} fullWidth>\r\n          {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n          {!isProcessing && 'Finish Path'}\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Path\r\n      </Typography>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch \r\n            checked={isAirplane} \r\n            onChange={handleSwitchChange} \r\n            name=\"checkedA\" \r\n            checkedIcon={<AirplanemodeActiveIcon/>}\r\n            icon={<CommuteIcon/>}\r\n          />\r\n        }\r\n        label=\"Travel Type\"/>\r\n      <Paper style={{maxHeight: \"50vh\", overflow: 'auto'}}>\r\n        {\r\n          nodes.map((element, index) => {\r\n            var latId = `nodeLatitude_${index}`;\r\n            var longitudeId = `nodeLongitude_${index}`;\r\n            var deleteBtnId = `deleteBtn_${index}`;\r\n\r\n            return (\r\n              <form>\r\n                <br/>\r\n                <Typography>Node {index + 1}</Typography>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor={latId}>Latitude</InputLabel>\r\n                  <Input \r\n                    type=\"number\" \r\n                    id={latId}\r\n                    placeholder=\"Enter value between -90 to 90\" \r\n                    name=\"Latitude\"\r\n                    value={element[1]}\r\n                    onChange={onElementLatitudeChange} />\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                <InputLabel htmlFor={longitudeId}>Longitude</InputLabel>\r\n                <Input \r\n                  type=\"number\" \r\n                  id={longitudeId}\r\n                  placeholder=\"Enter value between -180 to 180\" \r\n                  name=\"Longitude\"\r\n                  value={element[0]}\r\n                  onChange={onElementLongitudeChange} />\r\n                </FormControl>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleDeleteNode} fullWidth id={deleteBtnId}>\r\n                  Delete Node {index + 1}\r\n                </Button>\r\n              </form>\r\n            );\r\n          })\r\n        }\r\n      </Paper>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleNewNode} fullWidth> \r\n        Add Node\r\n      </Button>\r\n      \r\n      {getFinishButton()}\r\n\r\n      <br/>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewPathTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nfunction ZoomSlider({ scale, handleChangeScale }) {\r\n  const marks = [\r\n    {\r\n      value: 1,\r\n      label: 'Full View',\r\n    },\r\n    {\r\n      value: 2,\r\n      label: 'Half View',\r\n    },\r\n    {\r\n      value: 4.24733333333,\r\n      label: '3000 km',\r\n    },\r\n    {\r\n      value: 8.49466666667,\r\n      label: '1500 km',\r\n    },\r\n    {\r\n      value: 12.742,\r\n      label: '1000 km',\r\n    },\r\n    {\r\n      value: 16.9893333333,\r\n      label: '750 km',\r\n    },\r\n    {\r\n      value: 21.2366666667,\r\n      label: '600 km',\r\n    },\r\n    {\r\n      value: 25.484,\r\n      label: '500 km',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{height:\"100%\"}}>\r\n      <Typography id=\"vertical-slider\" gutterBottom>\r\n        <SearchIcon/>\r\n      </Typography>\r\n      <Slider\r\n        orientation=\"vertical\" value={scale} onChange={handleChangeScale}\r\n        aria-labelledby=\"vertical-slider\" step={0.01}\r\n        min={1}\r\n        max={25.484}\r\n        marks={marks}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZoomSlider;","import './App.css';\r\nimport Globe from './Globe';\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Button, Grid, IconButton, Menu, MenuItem, Toolbar, Typography } from '@material-ui/core';\r\nimport LandmarkInfo from './LandmarkInfo';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport NewLandmarkTab from './NewLandmarkTab';\r\nimport NewPathTab from './NewPathTab';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport ZoomSlider from './ZoomSlider';\r\nimport {  Redirect } from \"react-router-dom\";\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Dashboard() {\r\n  // const classes = useStyles();\r\n  //States\r\n  const [scale, setScale] = useState(1);\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  const [isAuth, setIsAuth] = useState(true);\r\n  const [paths, setPaths] = useState([]);\r\n  const [landmarks, setLandmarks] = useState([]);\r\n  const [subSolarCoordinates, setSubSolarCoordinates] = useState([0, 0]);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const [isPathsLoaded, setIsPathsLoaded] = useState(false);\r\n  const [isLandmarksLoaded, setIsLandmarksLoaded] = useState(false);\r\n  const [isSubSolarLoaded, setIsSubsolarLoaded] = useState(false);\r\n\r\n  const [currentLandmark, setCurrentLandmark] = useState([{\r\n    landmark_uid: -1,\r\n    name: \"\",\r\n    description: \"\",\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n  const [tempPath, setTempPath] = useState([{\r\n    type: \"LineString\", \r\n    coordinates: [],\r\n    isAirPlane: true\r\n  }]);\r\n  const [tempLandmark, setTempLandmark] = useState([{\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n  const [editLandmark, setEditLandmark] = useState([{\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n\r\n  // const clientHeight = document.getElementById('globeGrid').clientHeight;\r\n\r\n  /**\r\n   * Handles the scale change.\r\n   * @param {*} event - the event of the scale change\r\n   * @param {number} newValue - the value used to change the scale\r\n   */\r\n  const handleChangeScale = (event, newValue) => {\r\n    setScale(newValue);\r\n  };\r\n\r\n  \r\n  // const getWindowDimension = () => {\r\n  //   var width = document.getElementById('globeGrid').offsetWidth;\r\n  //   var height = document.getElementById('globeGrid').offsetHeight;\r\n  //   console.log(width < height ? width : height);\r\n  //   return width < height ? width : height;\r\n  // };\r\n\r\n  /**\r\n   * Gets the minimum dimension of the browser window.\r\n   */\r\n  const getMinDimension = () => {\r\n    // console.log(\"dimension calculated\");\r\n    return window.innerHeight < window.innerWidth ? window.innerHeight : window.innerWidth;\r\n  };\r\n\r\n  /**\r\n   * Handle's the tab change.\r\n   * @param {*} event - the event of the tab change\r\n   * @param {number} newValue - the value used to change the tab\r\n   */\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  /**\r\n   * Gets the user's paths from the database.\r\n   */\r\n  const getUserPaths = () => {\r\n    fetch(`/paths`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setPaths(res);\r\n      setIsPathsLoaded(true);\r\n    })\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Gets the user's landmarks from the database.\r\n   */\r\n  const getUserLandmarks = () => {\r\n    fetch(`/landmarks`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setLandmarks(res);\r\n      setIsLandmarksLoaded(true);\r\n    })\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Invalidates the authorization of the user.\r\n   */\r\n  const invalidateAuth = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuth(false);\r\n  };\r\n\r\n  /**\r\n   * Gets the subsolar point from the backend.\r\n   */\r\n  const getSubsolarPoint = () => {\r\n    fetch(`/sun`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setSubSolarCoordinates([res.longitude, res.latitude]);\r\n      setIsSubsolarLoaded(true);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the front end landmark.\r\n   * @param {*} landmark - the landmark to be updated\r\n   */\r\n  const updateLandmarks = (landmark) => {\r\n    let items = [...landmarks];\r\n    for(var i = 0; i < items.length; i++){\r\n      if(items[i].landmark_uid === landmark.landmark_uid){\r\n        let itemToUpdate = {...items[i]};\r\n\r\n        itemToUpdate.name = landmark.name;\r\n        itemToUpdate.description = landmark.description;\r\n        itemToUpdate.coordinates = landmark.coordinates;\r\n\r\n        items[i] = itemToUpdate;\r\n\r\n        setLandmarks(items);\r\n        setCurrentLandmark([{\r\n          landmark_uid: landmark.landmark_uid,\r\n          name: landmark.name,\r\n          description: landmark.description,\r\n          coordinates: landmark.coordinates,\r\n          isVisible: true\r\n        }]);\r\n        setEditLandmark([{\r\n          coordinates: [0, 0],\r\n          isVisible: false\r\n        }]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Deletes the frontend landmark.\r\n   * @param {number} landmark_uid - the landmark UID to be deleted.\r\n   */\r\n  const deleteLandmark = (landmark_uid) => {\r\n    let items = [...landmarks];\r\n    var index = -1;\r\n    for(var i = 0; i < items.length; i++){\r\n      if(items[i].landmark_uid === landmark_uid){\r\n        index = i;\r\n      }\r\n    }\r\n    if(index !== -1){\r\n      items.splice(index, 1);\r\n      setLandmarks(items);\r\n      setCurrentLandmark([{\r\n        landmark_uid: -1,\r\n        name: \"\",\r\n        description: \"\",\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }]);\r\n      setEditLandmark([{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles a new path called by the NewPathTab.\r\n   * @param {*} newPath - the new temp path to compare against the previous state\r\n   */\r\n  const newPathHandler = (newPath) => {\r\n    let isSameLength = newPath[0].coordinates.length === tempPath[0].coordinates.length;\r\n    let isAirPlaneSame = newPath[0].isAirPlane === tempPath[0].isAirPlane;\r\n    let isCoordinatesSame = true;\r\n    if(isSameLength){\r\n      for(var i = 0; i < newPath[0].coordinates.length; i++){\r\n        if(newPath[0].coordinates[i][0] !== tempPath[0].coordinates[i][0] || newPath[0].coordinates[i][1] !== tempPath[0].coordinates[i][1]){\r\n          isCoordinatesSame = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if(!isSameLength || !isAirPlaneSame || !isCoordinatesSame){\r\n      setTempPath(newPath);\r\n    }\r\n  };\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n // Use effect hook.\r\n  useEffect(() => {\r\n    getUserLandmarks();\r\n    getUserPaths();\r\n    getSubsolarPoint();\r\n    const interval = setInterval(() => {\r\n      getSubsolarPoint();\r\n    }, 2 * 60000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the dashboard content.\r\n   */\r\n  const getDashboardContent = () => {\r\n    if(isAuth){\r\n      return (\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={1} style={{ padding: 60, height:\"90vh\" }}>\r\n            <ZoomSlider scale={scale} handleChangeScale={handleChangeScale}/>\r\n          </Grid>\r\n          <Grid item xs={7} style={{ padding: 60, height:\"90vh\" }}>\r\n            {isLandmarksLoaded && isPathsLoaded && isSubSolarLoaded ? \r\n              <Globe scale={scale * getMinDimension()*0.8/2} \r\n              paths={paths} \r\n              landmarks={landmarks} \r\n              landmarkHandler={setCurrentLandmark} \r\n              size={getMinDimension()*0.8} \r\n              tempPath={tempPath}\r\n              tempLandmark={tempLandmark}\r\n              currentLandmark={currentLandmark}\r\n              editLandmark={editLandmark}\r\n              subSolarCoordinates={subSolarCoordinates}\r\n              setScale={setScale}/> : \r\n              <CircularProgress size={300}/>\r\n            }\r\n          </Grid>\r\n          <Grid item xs={4} style={{ padding: 60, height:\"90vh\" }} align=\"left\">\r\n            <AppBar position=\"static\">\r\n              <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\r\n                <Tab style={{ minWidth: 25 }} icon={<InfoIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<RoomIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<TimelineIcon/>}/>\r\n              </Tabs>\r\n            </AppBar>\r\n            <LandmarkInfo currentLandmark={currentLandmark} \r\n              value={tabValue} \r\n              index={0} \r\n              setEditLandmark={setEditLandmark} \r\n              updateLandmarks={updateLandmarks} \r\n              invalidateAuth={invalidateAuth} \r\n              deleteLandmark={deleteLandmark}/>\r\n            <NewLandmarkTab setLandmarks={setLandmarks} \r\n              value={tabValue} \r\n              index={1} \r\n              setTempLandmark={setTempLandmark} \r\n              invalidateAuth={invalidateAuth}/>\r\n            <NewPathTab setPaths={setPaths} \r\n              value={tabValue} \r\n              index={2} \r\n              setTempPath={newPathHandler} \r\n              invalidateAuth={invalidateAuth}/>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n    else{\r\n      return (<Redirect to={{pathname:'/loggedOut'}}/>);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">\r\n            Wanderlust\r\n          </Typography>\r\n          <IconButton>\r\n            <AccountCircle\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"/>\r\n          </IconButton>\r\n          <Menu\r\n            id=\"menu-appbar\"\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={open}\r\n            onClose={handleClose}>\r\n            <MenuItem onClick={handleClose}>Preferences</MenuItem>\r\n            <MenuItem onClick={invalidateAuth}>Logout</MenuItem>\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {getDashboardContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","export default __webpack_public_path__ + \"static/media/landing.bae6cf50.png\";","//Imports from libraries\r\nimport { Button, TextField, Typography, Toolbar, Grid } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Image from './landing.png'; // Import using relative path\r\n\r\nfunction SignIn() {\r\n  //States\r\n  const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  /**\r\n   * Handles the change in username.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the change in password.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the signing in.\r\n   */\r\n  const handleSignIn = () => {\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n\r\n    const body = {\r\n      \"username\": username,\r\n      \"password\": password\r\n    }\r\n    \r\n    fetch(`/users/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      localStorage.setItem('token', res.token);\r\n      setIsTokenValid(true);\r\n    })\r\n    .catch((error) => alert(\"Invalid credentials!\"));\r\n  };\r\n\r\n  //Use effect hook.\r\n  useEffect(() => {\r\n    if(localStorage.getItem('token') !== null){\r\n      fetch(`/users/checkToken`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if(res.isTokenValid){\r\n          setIsTokenValid(true);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the SignIn page content.\r\n   */\r\n  const getSignInContent = () => {\r\n    if(isTokenValid){\r\n      return (<Redirect to={{pathname:'/dashboard'}}/>);\r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\">\r\n                Wanderlust\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Grid container spacing={0}>\r\n            <Grid item xs={8} style={{ padding: 60, backgroundImage: `url(${Image})`, backgroundSize: 'cover', height: '95vh' }}>\r\n              <Typography component=\"h1\" variant=\"h3\">\r\n                Record Your Travels. Personalize Your Globe.\r\n              </Typography>\r\n              <Typography component=\"h1\" variant=\"h6\">\r\n                Wanderlust allows you to revisit places you have been to and even the journey you took to get there. With a clean design, you can see the globe in real time and take things into perspective.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={4} style={{ padding: 60 }}>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign In\r\n              </Typography>\r\n              <form>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"username\"\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  autoComplete=\"username\"\r\n                  autoFocus\r\n                  value={username}\r\n                  onChange={handleUsernameChange}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={password}\r\n                  onChange={handlePasswordChange}\r\n                />\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleSignIn}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n              </form>\r\n              <Link to=\"/signUp\">Don't have an account? Sign up</Link>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {getSignInContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography, Toolbar } from \"@material-ui/core\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction LoggedOut() {\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        Wanderlust\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Typography variant=\"h4\" style={{ padding: 60 }}>\r\n                Session has expired. Please sign back in.\r\n            </Typography>\r\n            <Link to=\"/\" style={{ padding: 60 }}>Back to Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoggedOut;","//Imports from libraries\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\n\r\nfunction SignUp() {\r\n  //States\r\n  // const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isUsernameTaken, setIsUsernameTaken] = useState(false);\r\n\r\n  /**\r\n   * Checks if a string has a number.\r\n   * @param {String} value - the string used to check if it has a number\r\n   */\r\n  const hasNumber = value => {\r\n    return new RegExp(/[0-9]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has mixed caps.\r\n   * @param {String} value - the string used to check if it has mixed caps\r\n   */\r\n  const hasMixed = value => {\r\n    return new RegExp(/[a-z]/).test(value) && new RegExp(/[A-Z]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has special characters\r\n   * @param {*} value - the string used to check if it has special characters\r\n   */\r\n  const hasSpecial = value => {\r\n    return new RegExp(/[!#@$%^&*)(+=._-]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Gets the human readable value of a password strength.\r\n   * @param {number} count - the password strength\r\n   */\r\n  const strengthMagnitude = count => {\r\n    if (count < 2)\r\n       return 'Very Weak';\r\n    if (count < 3)\r\n       return 'Weak';\r\n    if (count < 4)\r\n       return 'Fair';\r\n    if (count < 5)\r\n       return 'Good';\r\n    if (count < 6)\r\n       return 'Strong';\r\n  }\r\n\r\n  /**\r\n   * Gets the strength of a password.\r\n   * @param {String} value - the string used to check the strenght of a password\r\n   */\r\n  const strengthIndicator = value => {\r\n    let strengths = 0;\r\n    if (value.length > 5)\r\n       strengths++;\r\n    if (value.length > 7)\r\n       strengths++;\r\n    if (hasNumber(value))\r\n       strengths++;\r\n    if (hasSpecial(value))\r\n       strengths++;\r\n    if (hasMixed(value))\r\n       strengths++;\r\n    return strengthMagnitude(strengths);\r\n  }\r\n\r\n  /**\r\n   * Handles the username change.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n    getUsernameStatus(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the password change.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the email change.\r\n   * @param {*} event - the event for the email change\r\n   */\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Gets the availability of the username\r\n   * @param {String} value - the string used to check the availability of a username\r\n   */\r\n  const getUsernameStatus = (value) => {\r\n    fetch(`/users/exists?username=${value}`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setIsUsernameTaken(res.isexist === \"true\" ? true : false);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the user signing up.\r\n   */\r\n  const handleSignUp = () => {\r\n    if(email === \"\" || password === \"\" || username === \"\"){\r\n      alert(\"At least one field is empty!\");\r\n    }\r\n    else{\r\n      const body = {\r\n        \"email\": email,\r\n        \"password\" : password,\r\n        \"username\" : username\r\n      }\r\n  \r\n      fetch(`/users/create`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        setEmail(\"\");\r\n        alert(\"A new user has been made!\");\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error);\r\n        alert(\"The username already exists! Please create an unowned username.\");\r\n      });\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(localStorage.getItem('token') !== null){\r\n  //     fetch(`/users/checkToken`, {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n  //       },\r\n  //     })\r\n  //     .then(res => res.json())\r\n  //     .then(res => {\r\n  //       if(res.isTokenValid){\r\n  //         setIsTokenValid(true);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Sign Up\r\n      </Typography>\r\n      <form>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label=\"Email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          value={email}\r\n          onChange={handleEmailChange}\r\n        />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"username\"\r\n          label=\"Username\"\r\n          autoComplete=\"username\"\r\n          value={username}\r\n          onChange={handleUsernameChange}\r\n        />\r\n        Username Status: {isUsernameTaken ? \"Taken\" : \"Available\"}\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n        />\r\n        Password Strength: {strengthIndicator(password)}\r\n        <Button\r\n          // type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={handleSignUp}\r\n        >\r\n          Sign Up\r\n        </Button>\r\n      </form>\r\n      <Link to=\"/\">Back to sign in screen</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import './App.css';\nimport React, { Component, useState, useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Dashboard from './Dashboard';\nimport SignIn from './SignIn';\nimport LoggedOut from './LoggedOut';\nimport SignUp from './SignUp';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nfunction App() {\n  \n  useEffect(() => {\n    document.title = 'Wanderlust';\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={SignIn}/>\n          <Route exact path='/dashboard' component={Dashboard}/>\n          <Route exact path='/loggedOut' component={LoggedOut}/>\n          <Route exact path='/signUp' component={SignUp}/>\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}