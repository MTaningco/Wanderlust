{"version":3,"sources":["Globe.jsx","LandmarkInfo.jsx","NewLandmarkTab.jsx","NewPathTab.jsx","EditLandmarksTab.jsx","EditPathsTab.jsx","OtherFeatureTab.jsx","Dashboard.jsx","landing.png","SignIn.jsx","LoggedOut.jsx","SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","justifyContent","alignItems","textAlign","position","zoomInButton","display","backgroundColor","color","boxShadow","left","bottom","zoomOutButton","renderText","Globe","size","paths","landmarks","landmarkHandler","newPath","newLandmark","currentLandmark","editLandmark","subSolarCoordinates","editPath","classes","useState","mouseCoordinates","setMouseCoordinates","oldCoordinates","setOldCoordinates","newCoordinates","setNewCoordinates","isMove","setIsMove","isDrag","setIsDrag","isLoading","setIsLoading","setRenderText","isInitialLoad","setIsInitialLoad","scale","setScale","svgRef","useRef","circle","d3","projection","fitSize","type","precision","pathGenerator","useIdleTimer","timeout","onIdle","event","console","log","setTimeout","drawGlobe","onActive","onAction","events","debounce","getRemainingTime","getLastActiveTime","resume","rotateParams","isCoarse","svg","current","rotate","getRealScale","isDaylight","selectAll","data","join","attr","feature","on","mouseEvent","item","isVisible","drawSphere","land","landCoarse","features","landFine","raise","drawLand","lakes","lakesCoarse","lakesFine","drawLakes","nightLongitude","nightLatitude","style","center","radius","drawCurrentShadow","drawLandOutline","drawLakesOutline","graticule","drawGraticule","landmark","landmark_uid","coordinates","drawCurrentLandmark","isDayTime","isAirPlane","drawArcs","drawTempPath","drawTempLandmark","drawEditPath","drawEditLandmark","id","drawLandmarks","lineGenerator","text","Math","ceil","drawScale","renderExternalUpdate","message","useEffect","className","width","height","ref","onMouseDown","screenX","screenY","onMouseMove","currentMouseCoordinates","scalingFactor","movedCoordinates","onMouseUp","onWheel","prev","newVal","deltaY","min","max","IconButton","variant","onClick","prevVal","Typography","LandmarkInfo","value","index","hidden","margin","descriptionArray","description","split","name","paragraph","map","element","getLandmarkInfoContent","NewLandmarkTab","invalidateAuth","createLandmark","updateNewLandmark","landmarkName","setLandmarkName","landmarkLatitude","setLandmarkLatitude","landmarkLongitude","setLandmarkLongitude","landmarkDescription","setLandmarkDescription","isProcessing","setIsProcessing","FormControl","fullWidth","InputLabel","htmlFor","Input","placeholder","onChange","target","abs","parseFloat","TextField","label","multiline","rows","Button","body","latitude","longitude","fetch","method","headers","localStorage","getItem","JSON","stringify","then","res","json","path_uid","catch","err","CircularProgress","disableShrink","NewPathTab","updateNewPath","createPath","setCoordinates","isAirplane","setIsAirplane","setName","handleNewPath","isNodesPopulated","i","length","path_name","updateTempPath","newElements","newIsAirplane","newTempPath","undefined","node","lat","long","push","FormControlLabel","control","Switch","checked","checkedIcon","icon","Paper","maxHeight","overflow","latId","longitudeId","deleteBtnId","onElementLatitudeChange","onElementLongitudeChange","newNodes","splice","handleDeleteNode","prevArray","getFinishButton","EditLandmarksTab","updateLandmark","deleteLandmark","toInformationTab","updateEditLandmark","isEdit","setIsEdit","editId","setEditId","editName","setEditName","editDescription","setEditDescription","editLongitude","setEditLongitude","editLatitude","setEditLatitude","editIndex","setEditIndex","handleLatitudeChange","handleLongitudeChange","handleNameChange","handleDescriptionChange","handleEditLandmark","alert","handleCancelEdit","square","padding","elevation","marginTop","marginBottom","handleEditLandmarkMode","window","confirm","handleDeleteLandmark","EditPathsTab","deletePath","updatePath","updateEditPath","setIsAirPlane","handleSwitchChange","handleEditPath","is_airplane","handleNewNode","path","handleEditPathMode","handleDeletePath","OtherFeatureTab","drawerValue","toolbar","fontWeight","toolbarMenu","paddingTop","paddingLeft","drawerPaper","globeGrid","flexGrow","rightPanel","Dashboard","tabValue","setTabValue","isAuth","setIsAuth","setPaths","setLandmarks","setSubSolarCoordinates","isPathsLoaded","setIsPathsLoaded","isLandmarksLoaded","setIsLandmarksLoaded","isSubSolarLoaded","setIsSubsolarLoaded","windowSize","setWindowSize","setDrawerValue","setCurrentLandmark","setNewPath","setNewLandmark","setEditLandmark","setEditPath","handleTabChange","newValue","sortPaths","a","b","toLowerCase","sortLandmarks","removeItem","getSubsolarPoint","items","itemToUpdate","prevValCopy","sort","pathsCopy","changeDrawerFeatureHandler","currentLandmarkHandler","prevValue","prevValueCopy","prevArrayCopy","pathCopy","error","interval","setInterval","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","clearInterval","Drawer","anchor","open","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","onAccountMenuClicked","Grid","container","spacing","marginLeft","align","Skeleton","xs","AppBar","Tabs","aria-label","Tab","minWidth","to","pathname","link","textDecoration","fontSize","SignIn","isTokenValid","setIsTokenValid","username","setUsername","password","setPassword","handleUsernameChange","handlePasswordChange","handleSignIn","setItem","token","backgroundImage","Image","backgroundSize","component","required","autoComplete","autoFocus","timerIcon","LoggedOut","justify","direction","flexDirection","maxWidth","form","checkIcon","clearIcon","hint","veryWeakStrength","weakStrength","fairStrength","goodStrength","strongStrength","SignUp","email","setEmail","isUsernameTaken","setIsUsernameTaken","strengthIndicator","count","strengths","RegExp","test","hasNumber","hasSpecial","hasMixed","getUsernameStatus","isexist","Container","textField","renderPasswordStrength","createMuiTheme","palette","App","document","title","ThemeProvider","CssBaseline","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4qniwCAyBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,eAAe,SACfC,WAAW,SACXC,UAAW,SACXC,SAAU,YAEZC,aAAc,CACZC,QAAS,QACTC,gBAAiB,QACjBC,MAAO,QACP,UAAW,CACTA,MAAO,QACPD,gBAAiB,OACjBE,UAAW,QAEbL,SAAU,WACVM,KAAM,MACNC,OAAQ,SAEVC,cAAe,CACbN,QAAS,QACTC,gBAAiB,QACjBC,MAAO,QACP,UAAW,CACTA,MAAO,QACPD,gBAAiB,OACjBE,UAAW,QAEbL,SAAU,WACVM,KAAM,MACNC,OAAQ,QAEVE,WAAY,CACVT,SAAU,WACVM,KAAM,MACNC,OAAQ,YA+zBGG,MAzzBf,YAA+I,IAA/HC,EAA8H,EAA9HA,KAAMC,EAAwH,EAAxHA,MAAOC,EAAiH,EAAjHA,UAAWC,EAAsG,EAAtGA,gBAAiBC,EAAqF,EAArFA,QAASC,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,gBAAiBC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,oBAAqBC,EAAW,EAAXA,SAE3HC,EAAU5B,IAF4H,EAK5F6B,mBAAS,MALmF,mBAKrIC,EALqI,KAKnHC,EALmH,OAMhGF,mBAAS,CAAC,KAAM,KANgF,mBAMrIG,EANqI,KAMrHC,EANqH,OAOhGJ,mBAAS,MAPuF,mBAOrIK,EAPqI,KAOrHC,EAPqH,OAQhHN,oBAAS,GARuG,mBAQrIO,EARqI,KAQ7HC,EAR6H,OAShHR,oBAAS,GATuG,mBASrIS,EATqI,KAS7HC,EAT6H,OAU1GV,oBAAS,GAViG,mBAUrIW,EAVqI,KAU1HC,EAV0H,OAWxGZ,mBAAS,IAX+F,mBAWrIb,EAXqI,KAWzH0B,EAXyH,QAYlGb,oBAAS,GAZyF,qBAYrIc,GAZqI,MAYtHC,GAZsH,SAalHf,mBAAS,GAbyG,qBAarIgB,GAbqI,MAa9HC,GAb8H,MAgBtIC,GAASC,mBACTC,GAASC,MACTC,GAAaD,MAChBE,QAAQ,CAAClC,EAAMA,GAAO,CAACmC,KAAM,WAC7BC,UAAU,IACPC,GAAgBL,MAAaC,WAAWA,IArB8F,GAwGpFK,YAAa,CACnEC,QAAS,KACTC,OAtDmB,SAAAC,GAMjBC,QAAQC,IAAI,SAAUzB,GACtBwB,QAAQC,IAAI,WAAYvB,GACvBF,IAAWE,IAGZD,GAAU,GAEVI,GAAa,GACbC,EAAc,gCAEdoB,YAAW,WAETC,GAAU/B,GAAgB,GAC1BS,GAAa,KACZ,OAmCLuB,SAzBqB,SAAAL,GAErBpB,GAAU,GACVqB,QAAQC,IAAI,kBAuBZI,SAPqB,SAACN,KAQtBO,OAAQ,CAAC,UAAW,aAAc,WAClCC,SAAU,MA2hBNJ,IAzoBsI,GAwGpIK,iBAxGoI,GAwGlHC,kBAxGkH,GAwG/FC,OAiiB3B,SAACC,EAAcC,GAC/B,IAAMC,EAAMvB,IAAUH,GAAO2B,SAC7BvB,GAAWwB,OAAOJ,GAAc1B,MAAM+B,MAEtC,IAAIC,GAAa,GA/eA,SAACJ,EAAKI,GACvBJ,EACCK,UAAU,WACVC,KAAK,CAAC,CAAC1B,KAAM,YACb2B,KAAK,QACLC,KAAK,QAAS,UACdA,KAAK,OAAQJ,EAAa,OAAS,WACnCI,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCC,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAue3BkE,CAAWd,EAAKI,GAncD,SAACJ,EAAKD,EAAUK,GAE/B,IAAMW,EAAOhB,EAAWiB,EAAWC,SAAWC,EAASD,SACvDjB,EACCK,UAAU,YACVC,KAAKS,GACLR,KAAK,QACLC,KAAK,QAAS,WACdA,KAAK,OAAQJ,EAAa,OAAS,WACnCI,KAAK,SAAUJ,EAAa,OAAS,WACrCI,KAAK,eAAgB,IACrBA,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCC,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAG1BuE,QAmbDC,CAASpB,EAAKD,EAAUK,GAlXR,SAACJ,EAAKD,EAAUK,GAChC,IAAMiB,EAAQtB,EAAWuB,EAAYL,SAAUM,EAAUN,SACzDjB,EACCK,UAAU,UACVC,KAAKe,GACLd,KAAK,QACLC,KAAK,QAAS,SACdA,KAAK,OAAQJ,EAAa,OAAS,WACnCI,KAAK,SAAUJ,EAAa,OAAS,WACrCI,KAAK,eAAgB,IACrBA,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCU,QACAT,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAqW3B4E,CAAUxB,EAAKD,EAAUK,GAnOD,SAACJ,EAAKI,GAC9B,IAAIqB,EAAiBxE,EAAoB,GAAK,IAC1CyE,GAAiBzE,EAAoB,GAEzC+C,EACCK,UAAU,WACVC,KAAK,CAAC,GAAI,GAAM,GAAO,KACvBC,KAAK,QACLC,KAAK,QAAS,UACdA,KAAK,KALN,UAMCmB,MAAM,OAAQ,SACdnB,KAAK,eARQ,OASbA,KAAK,KAAK,SAAAF,GAAI,OAAIxB,GAAcN,GAAOoD,OAAO,CAACH,EAAgBC,IAAgBG,OAAOvB,EAAtD9B,OAChC2C,QACAT,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAoN3BkF,CAAkB9B,GA/YI,SAACA,EAAKD,EAAUK,GAEtC,IAAMW,EAAOhB,EAAWiB,EAAWC,SAAWC,EAASD,SACvDjB,EACCK,UAAU,mBACVC,KAAKS,GACLR,KAAK,QACLC,KAAK,QAAS,kBACdA,KAAK,eAAgB,KACrBA,KAAK,SAAU,WACfA,KAAK,eAAgB,IAErBA,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCC,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAG1BuE,QA+XDY,CAAgB/B,EAAKD,GA7VE,SAACC,EAAKD,EAAUK,GACvC,IAAMiB,EAAQtB,EAAWuB,EAAYL,SAAUM,EAAUN,SACzDjB,EACCK,UAAU,iBACVC,KAAKe,GACLd,KAAK,QACLC,KAAK,QAAS,gBACdA,KAAK,eAAgB,KACrBA,KAAK,SAAUJ,EAAa,OAAS,WACrCI,KAAK,eAAgB,IACrBA,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCU,QACAT,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAgV3BoF,CAAiBhC,EAAKD,EAAUK,GAneZ,SAACJ,EAAKI,GAC1B,IAAM6B,EAAYxD,MAClBuB,EACCK,UAAU,SACVC,KAAK,CAAC2B,IACN1B,KAAK,QACLC,KAAK,QAAS,QACdA,KAAK,eAAe,KACpBA,KAAK,SAAUJ,EAAa,OAAS,QACrCI,KAAK,iBAAkB,OACvBA,KAAK,eAAgBJ,EAAa,EAAI,IACtCI,KAAK,KAAK,SAAAC,GAAO,OAAI3B,GAAc2B,MACnCC,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAG1BuE,QAwdDe,CAAclC,EAAKI,GAtQO,SAACJ,EAAKI,GAOhCJ,EACCK,UAAU,oBACVC,KAAK,CAACvD,IACNwD,KAAK,QACLC,KAAK,QAAS,mBACdA,KAAK,MAAM,SAAA2B,GAAQ,wBAAeA,EAASC,iBAC3CT,MAAM,OAAQ,OACdnB,KAAK,eAAe,OACpBA,KAAK,cAAc,SAAA2B,GAAQ,OAAIA,EAAStB,UAAY,UAAY,YAChEL,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,OACpC2C,QAuPDmB,CAAoBtC,GAnKL,SAACA,EAAKuC,GASrBvC,EACCK,UAAU,eACVC,KAAK5D,GACL6D,KAAK,QACLC,KAAK,QAAS,cAEdA,KAAK,eAAgB,KACrBA,KAAK,kBAAkB,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,GAAM,KAC7DhC,KAAK,UAAU,SAAAC,GAAO,OAAI8B,EAAY,QAAU,WAChD/B,KAAK,gBAAgB,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,GAAM,MAC3DhC,KAAK,KAAK,SAAAC,GAAO,OAAG3B,GAAc2B,MAClCU,QACAT,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAG1BuE,QAEDnB,EACCK,UAAU,QACVC,KAAK5D,GACL6D,KAAK,QACLC,KAAK,QAAS,OAEdA,KAAK,eAAgB,KACrBA,KAAK,kBAAkB,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,GAAM,KAC7DhC,KAAK,UAAU,SAAAC,GAAO,MAAgB,WACtCD,KAAK,gBAAgB,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,EAAI,MACzDb,MAAM,oBAAoB,SAAAlB,GAAO,OAAIA,EAAQ+B,WAAc,QAAiB,OAC5EhC,KAAK,KAAK,SAAAC,GAAO,OAAG3B,GAAc2B,MAClCU,QACAT,GAAG,SAAS,SAACC,EAAYC,GACrB7D,EAAgB8D,WACjBjE,GAAgB,EAAO,SAG1BuE,QAsHDsB,CAASzC,EAAKI,GA9GK,SAACJ,EAAKuC,GASzBvC,EACCK,UAAU,YACVC,KAAK,CAACzD,IACN0D,KAAK,QACLC,KAAK,QAAS,WAEdA,KAAK,eAAe,KACpBA,KAAK,UAAU,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,SAC/Cb,MAAM,oBAAoB,SAAAlB,GAAO,OAAIA,EAAQ+B,WAAc,QAAiB,OAC5EhC,KAAK,kBAAkB,SAAAC,GAAO,OAAI,KAClCD,KAAK,gBAAgB,SAAAC,GAAO,OAAI,KAChCD,KAAK,KAAK,SAAAC,GAAO,OAAG3B,GAAc2B,MAClCU,QA0FDuB,CAAa1C,GAvNU,SAACA,EAAKI,GAM7BJ,EACCK,UAAU,gBACVC,KAAK,CAACxD,IACNyD,KAAK,QACLC,KAAK,QAAS,eACdA,KAAK,KALN,eAMCmB,MAAM,OAAQ,OACdnB,KAAK,eAAe,OACpBA,KAAK,cAAc,SAAA2B,GAAQ,OAAIA,EAAStB,UAAY,UAAY,YAChEL,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,OACpC2C,QAwMDwB,CAAiB3C,GAnFE,SAACA,EAAKuC,GAOzBvC,EACCK,UAAU,aACVC,KAAK,CAACpD,IACNqD,KAAK,QACLC,KAAK,QAAS,YACdA,KAAK,eAAe,KACpBA,KAAK,UAAU,SAAAC,GAAO,OAAIA,EAAQ+B,WAAa,YAC/Cb,MAAM,oBAAoB,SAAAlB,GAAO,OAAIA,EAAQ+B,WAAc,QAAiB,OAC5EhC,KAAK,kBAAkB,SAAAC,GAAO,OAAI,KAClCD,KAAK,gBAAgB,SAAAC,GAAO,OAAI,KAChCD,KAAK,KAAK,SAAAC,GAAO,OAAG3B,GAAc2B,MAClCU,QAkEDyB,CAAa5C,GAjMU,SAACA,EAAKI,GAM7BJ,EACCK,UAAU,iBACVC,KAAK,CAACtD,IACNuD,KAAK,QACLC,KAAK,QAAS,gBACdA,KAAK,MAAM,SAAA2B,GAAQ,gBACnBR,MAAM,OAAQ,UACdnB,KAAK,eAAe,OACpBA,KAAK,eAAgB,GACrBA,KAAK,SAAS,SACdA,KAAK,cAAc,SAAA2B,GAAQ,OAAIA,EAAStB,UAAY,UAAY,YAChEL,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,OACpC2C,QAgLD0B,CAAiB7C,GAtTG,SAACA,EAAKI,GAS1BJ,EACCK,UAAU,cACVC,KAAK3D,GACL4D,KAAK,QACLC,KAAK,QAAS,aACdA,KAAK,MAAM,SAAA2B,GAAQ,gBAAOA,EAASW,OACnCnB,MAAM,OAAQ,SACdA,MAAM,SAAU,SAChBnB,KAAK,eAAgB,IACrBA,KAAK,eAAe,OACpBE,GAAG,aAAa,SAACC,EAAYC,GAC5BnC,IAAA,WAAcmC,EAAKkC,KAClBnB,MAAM,OAAQ,OACdnB,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,UAEtCkC,GAAG,YAAY,SAACC,EAAYC,GAC3BnC,IAAA,WAAcmC,EAAKkC,KAClBnB,MAAM,OAAqB,SAC3BnB,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,UAEtCkC,GAAG,SAAS,SAACC,EAAYC,GACxBhE,GAAgB,EAAMgE,MAEvBJ,KAAK,KAAK,SAAA2B,GAAQ,OAAIrD,GAAcN,GAAOoD,OAAO,CAACO,EAASE,YAAY,GAAIF,EAASE,YAAY,KAAKR,OAAO,GAAzErD,OACpC2C,QAsRD4B,CAAc/C,GA7DE,SAACA,GAEjB,IAAIgD,EAAgBvE,MACpBuB,EACCK,UAAU,UACVC,KAAK,CAAC,IACNC,KAAK,QACLC,KAAK,QAAS,SAEdmB,MAAM,SAAU,SAChBA,MAAM,eAAgB,GACtBA,MAAM,eAAgB,GACtBA,MAAM,iBAAkB,GACxBnB,KAAK,IAAKwC,EAAc,CAAC,CAAQ,IAAPvG,EAAoB,IAAPA,GAAc,CAAQ,IAAPA,EAAoB,IAAPA,EAAc,IAAK,CAAQ,IAAPA,EAAcA,EAAK,EAAY,IAAPA,EAAc,IAAK,CAAQ,IAAPA,EAAcA,EAAK,EAAY,IAAPA,MAC3J0E,QAEDnB,EACCK,UAAU,cACVC,KAAK,CAAC,IACNC,KAAK,QACLC,KAAK,QAAS,aACdA,KAAK,KAAa,IAAP/D,EAAcA,EAAK,GAC9B+D,KAAK,KAAa,IAAP/D,GACXkF,MAAM,cAAe,UACrBA,MAAM,OAAQ,SACdsB,KATD,UASSC,KAAKC,KAjoBO,OAioBe/E,GAAQ,KAAK,IATjD,QAUC+C,QAqCDiC,CAAUpD,KAGNG,GAAe,WACnB,OAAO/B,GAAQ3B,EAAK,GAiChB4G,GAAuB,SAACC,EAASvD,GACrC/B,GAAa,GACbC,EAAcqF,GACdjE,YAAW,WACTC,GAAU/B,EAAgBwC,GAC1B/B,GAAa,GACV+B,GACDnC,GAAU,KAEXmC,EAAW,IAAM,MAmFtB,OA/EAwD,qBAAU,WACRjE,GAAU/B,GAAgB,GAC1BK,GAAU,KACT,CAACQ,KAEJmF,qBAAU,WACJrF,IAEFmF,GAAqB,2BAA4BxF,KAElD,CAACZ,IAEJsG,qBAAU,WACJrF,IAEFmF,GAAqB,iCAAiC,KAEvD,CAACtG,EAAgB8D,UAAW9D,EAAgBsF,cAE/CkB,qBAAU,WACJrF,IAEFmF,GAAqB,mCAAmC,KAEzD,CAAC5G,IAEJ8G,qBAAU,WACJrF,IAEFmF,GAAqB,6BAA6B,KAEnD,CAACvG,IAEJyG,qBAAU,WACJrF,IAEFmF,GAAqB,gCAAgC,KAEtD,CAACrG,IAEJuG,qBAAU,WACJrF,IAEFmF,GAAqB,4BAA4B,KAElD,CAACnG,EAASmF,YAAanF,EAASsF,aAEnCe,qBAAU,WACJrF,IAEFmF,GAAqB,yBAAyB,KAE/C,CAACxG,IAEJ0G,qBAAU,WACJrF,IAEFmF,GAAqB,qBAAqB,KAE3C,CAAC3G,IAEJ6G,qBAAU,WACJrF,IAEFmF,GAAqB,yBAAyB,KAE/C,CAAC1G,IAEJ4G,qBAAU,WACRpE,QAAQC,IAAI,SACZpB,GAAa,GACbC,EAAc,sBACdoB,YAAW,WACTC,GAAU/B,EAAgBa,IAAO,GACjCJ,GAAa,GACbG,IAAiB,KAChB,OACF,IAGD,sBAAKqF,UAAWrG,EAAQzB,KAAxB,UACE,qBAAK+H,MAAOhH,EAAMiH,OAAQjH,EAAMkH,IAAKrF,GACnCsF,YA9wBqB,SAAC1E,GAC1B5B,EAAoB,CAAC4B,EAAM2E,QAAS3E,EAAM4E,WA8wBtCC,YArrBqB,SAAC7E,GAE1B,GAAG7B,EAAiB,CAGlB,IAAI2G,EAA0B,CAAC9E,EAAM2E,QAAS3E,EAAM4E,SAChDG,EAAgB,EAAM9D,KAAe,IACrC+D,EAAmB,CAAC3G,EAAe,IAAMyG,EAAwB,GAAK3G,EAAiB,IAAI4G,EAAe1G,EAAe,IAAMyG,EAAwB,GAAK3G,EAAiB,IAAI4G,GACrLC,EAAiB,GAAKA,EAAiB,IAAM,IAAM,GACjDA,EAAiB,GAAK,GAAM,GAAKA,EAAiB,GAEpDxG,EAAkBwG,GAClBtG,GAAU,GACVE,GAAU,GACVwB,GAAU4E,GAAkB,KAwqB1BC,UA/pBmB,SAACjF,GAGrBzB,IAEDD,EAAkBC,GAClBC,EAAkB,OAEpBI,GAAU,GACVR,EAAoB,MACpB6B,QAAQC,IAAI,kBAspBRgF,QA5HoB,SAAClF,GACzBb,IAAS,SAAAgG,GACP,IAAIC,EAASD,EAAOnF,EAAMqF,OAAO,IACjC,OAAOrB,KAAKsB,IAAItB,KAAKuB,IAAIH,EAAQ,GAAI,cA2HrC,cAACI,EAAA,EAAD,CAAajI,KAAK,SAASkI,QAAQ,YAAYnB,UAAWrG,EAAQpB,aAAc6I,QApH9D,WACpBvG,IAAS,SAAAwG,GAAO,OAAI3B,KAAKsB,IAAIK,EAAU,EAAG,YAmHxC,SACE,cAAC,IAAD,MAEF,cAACH,EAAA,EAAD,CAAajI,KAAK,SAASkI,QAAQ,YAAYnB,UAAWrG,EAAQb,cAAesI,QAhH9D,WACrBvG,IAAS,SAAAwG,GAAO,OAAI3B,KAAKuB,IAAII,EAAU,EAAG,OA+GxC,SACE,cAAC,IAAD,MAED9G,GAAa,cAAC+G,EAAA,EAAD,CAAYtB,UAAWrG,EAAQZ,WAA/B,SAA4CA,Q,+DCj0BjDwI,MAlDf,YAAyD,IAAjChI,EAAgC,EAAhCA,gBAAiBiI,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAuC9C,OACE,sBAAKC,OAAQF,IAAUC,EAAOtD,MAAO,CAACwD,OAAQ,QAA9C,UACE,cAACL,EAAA,EAAD,CAAYH,QAAQ,KAApB,kCAGA,uBAxC2B,WAC7B,GAAI5H,EAAgB8D,UAAW,CAC7B,IACIuE,EADcrI,EAAgBsI,YACCC,MAAM,MACzC,OACE,gCACE,cAACR,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACG5H,EAAgBwI,OAEnB,eAACT,EAAA,EAAD,CAAYH,QAAQ,KAAKa,WAAS,EAAlC,uBACazI,EAAgBsF,YAAY,GADzC,gBAC0DtF,EAAgBsF,YAAY,MAGpF+C,EAAiBK,KAAI,SAAAC,GACnB,OACE,cAACZ,EAAA,EAAD,CAAYH,QAAQ,KAAKa,WAAS,EAAlC,SACGE,UASb,OACE,8BACE,cAACZ,EAAA,EAAD,CAAYH,QAAQ,KAApB,mCAcHgB,O,iFCkHQC,MA3Jf,YAA4F,IAAnEZ,EAAkE,EAAlEA,MAAOC,EAA2D,EAA3DA,MAAOY,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,kBAAoB,EAGjD3I,mBAAS,IAHwC,mBAGlF4I,EAHkF,KAGpEC,EAHoE,OAIzC7I,mBAAS,IAJgC,mBAIlF8I,EAJkF,KAIhEC,EAJgE,OAKvC/I,mBAAS,IAL8B,mBAKlFgJ,EALkF,KAK/DC,EAL+D,OAMnCjJ,mBAAS,IAN0B,mBAMlFkJ,EANkF,KAM7DC,EAN6D,OAOjDnJ,oBAAS,GAPwC,mBAOlFoJ,EAPkF,KAOpEC,EAPoE,KAqGzF,OACE,uBAAMvB,OAAQF,IAAUC,EAAOtD,MAAO,CAACwD,OAAQ,QAA/C,UACE,cAACL,EAAA,EAAD,CAAYH,QAAQ,KAApB,mCAGA,eAAC+B,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACA,cAACC,EAAA,EAAD,CAAYC,QAAQ,mBAApB,sBACA,cAACC,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAG,mBACHiE,YAAY,gCACZxB,KAAK,WACLP,MAAOkB,EACPc,SArFuB,SAAC9H,GACF,KAAvBA,EAAM+H,OAAOjC,OACde,GAAkB,EAAO,MAExB7C,KAAKgE,IAAIhI,EAAM+H,OAAOjC,QAAU,KACjCmB,EAAoBgB,WAAWjI,EAAM+H,OAAOjC,QAEnB,KAAtBoB,GAAmD,KAAvBlH,EAAM+H,OAAOjC,OAC1Ce,GAAkB,EAAM,CAACK,EAAmBe,WAAWjI,EAAM+H,OAAOjC,gBA+EtE,uBACA,eAAC0B,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACA,cAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,uBACA,cAACC,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAG,oBACHiE,YAAY,kCACZxB,KAAK,YACLP,MAAOoB,EACPY,SA/EwB,SAAC9H,GACH,KAAvBA,EAAM+H,OAAOjC,OACde,GAAkB,EAAO,MAExB7C,KAAKgE,IAAIhI,EAAM+H,OAAOjC,QAAU,MACjCqB,EAAqBc,WAAWjI,EAAM+H,OAAOjC,QAEnB,KAAvB9F,EAAM+H,OAAOjC,OAAqC,KAArBkB,GAC9BH,GAAkB,EAAM,CAACoB,WAAWjI,EAAM+H,OAAOjC,OAAQkB,WAyE3D,uBACA,cAACkB,EAAA,EAAD,CACEtE,GAAG,iBACHuE,MAAM,gBACNN,YAAY,6BACZ/B,MAAOgB,EACPgB,SAhHmB,SAAC9H,GACxB+G,EAAgB/G,EAAM+H,OAAOjC,QAgHzB2B,WAAS,IACX,uBACA,cAACS,EAAA,EAAD,CACEtE,GAAG,4BACHuE,MAAM,cACNN,YAAY,yCACZO,WAAS,EACTC,KAAM,EACNvC,MAAOsB,EACPU,SAlI0B,SAAC9H,GAC/BqH,EAAuBrH,EAAM+H,OAAOjC,QAkIhC2B,WAAS,IACX,uBACA,uBACA,eAACa,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,UAAU0I,QArFtB,WACxB,GAAsB,KAAjBoB,GAA4C,KAArBE,GAAiD,KAAtBE,EAA0B,CAC/EK,GAAgB,GAChB,IAAMgB,EAAO,CACXzB,aAAcA,EACdM,oBAAqBA,EACrBoB,SAAUP,WAAWjB,GACrByB,UAAWR,WAAWf,IAGxBwB,MAAM,aAAc,CAClBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJnC,EAAgB,IAChBE,EAAoB,IACpBE,EAAqB,IACrBE,EAAuB,IACvBlH,YAAW,WACToH,GAAgB,GAChBX,EAAe,CACbhD,GAAG,YAAD,OAAcsF,EAAIhG,cACpBkG,SAAUF,EAAIhG,aACdmD,KAAMS,EACNX,YAAaiB,EACbjE,YAAa,CAAC8E,WAAWf,GAAoBe,WAAWjB,QAEzD,QAEJqC,OAAM,SAAAC,GAAG,OAAI3C,SAkDd,UACGW,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,YAAYwM,eAAa,KAC1ElC,GAAgB,sB,uDCsGXmC,OAvPf,YAAgF,IAA3D3D,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,MAAOY,EAA4C,EAA5CA,eAAgB+C,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,WAAa,EAGvCzL,mBAAS,IAH8B,mBAGtEiF,EAHsE,KAGzDyG,EAHyD,OAIzC1L,oBAAS,GAJgC,mBAItE2L,EAJsE,KAI1DC,EAJ0D,OAKrC5L,oBAAS,GAL4B,mBAKtEoJ,EALsE,KAKxDC,EALwD,OAMrDrJ,mBAAS,IAN4C,mBAMtEmI,EANsE,KAMhE0D,EANgE,KA0BvEC,EAAgB,WAGpB,IAFA,IAAIC,GAAmB,EAEfC,EAAI,EAAGA,EAAI/G,EAAYgH,OAAQD,IACZ,KAAtB/G,EAAY+G,GAAG,IAAmC,KAAtB/G,EAAY+G,GAAG,KAC5CD,GAAmB,GAIvB,GAAGA,GAAoB9G,EAAYgH,QAAU,EAAE,CAC7C5C,GAAgB,GAChB,IAAMgB,EAAO,CACXpF,YAAY,YAAKA,GACjBG,WAAYuG,EACZO,UAAW/D,GAGbqC,MAAM,SAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJU,EAAe,IACfG,EAAQ,IACR5J,YAAW,WACToH,GAAgB,GAChBoC,EAAW,CACTjK,KAAM,aACNyD,YAAY,YAAKA,GACjBS,GAAG,QAAD,OAASsF,EAAIE,UACfA,SAAUF,EAAIE,SACd9F,WAAYuG,EACZO,UAAW/D,MAEZ,QAEJgD,OAAM,SAAAC,GAAG,OAAI3C,SAqBZ0D,EAAiB,SAACC,EAAaC,GASnC,IARA,IAEIC,EAAc,CAChB9K,KAAM,aACNyD,YAAa,GACbG,gBALoCmH,IAAlBF,EAA8BA,EAAgBV,GAQ1DK,EAAI,EAAGA,EAAII,EAAYH,OAAQD,IAAI,CACzC,IAAIQ,EAAOJ,EAAYJ,GACnBS,EAAMD,EAAK,GACXE,EAAOF,EAAK,GAEhBF,EAAYrH,YAAY0H,KAAK,CAAU,KAATD,EAAcA,EAAO,EAAW,KAARD,EAAaA,EAAM,IAE3EjB,EAAcc,IAsEhB,OACE,uBAAMxE,OAAQF,IAAUC,EAAOtD,MAAO,CAACwD,OAAQ,QAA/C,UACE,cAACL,EAAA,EAAD,CAAYH,QAAQ,KAApB,+BAGA,cAACqF,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAASpB,EACT/B,SA5BiB,SAAC9H,GAC1B8J,EAAc9J,EAAM+H,OAAOkD,SAC3BZ,EAAelH,EAAanD,EAAM+H,OAAOkD,UA2BjC5E,KAAK,WACL6E,YAAa,cAAC,IAAD,IACbC,KAAM,cAAC,KAAD,MAEVhD,MAAM,gBACR,cAACD,EAAA,EAAD,CACEtE,GAAG,iBACHuE,MAAM,YACNN,YAAY,sCACZ/B,MAAOO,EACPyB,SAtLmB,SAAC9H,GACxB+J,EAAQ/J,EAAM+H,OAAOjC,QAsLjB2B,WAAS,IACX,cAAC2D,EAAA,EAAD,CAAO3I,MAAO,CAAC4I,UAAW,OAAQC,SAAU,QAA5C,SAEInI,EAAYoD,KAAI,SAACC,EAAST,GACxB,IAAIwF,EAAK,uBAAmBxF,GACxByF,EAAW,wBAAoBzF,GAC/B0F,EAAW,oBAAgB1F,GAE/B,OACE,iCACE,uBACA,eAACH,EAAA,EAAD,mBAAkBG,EAAQ,KAC1B,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAS4D,EAArB,sBACA,cAAC3D,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAI2H,EACJ1D,YAAY,gCACZxB,KAAK,WACLP,MAAOU,EAAQ,GACfsB,SAAU,SAAC9H,GAAD,OAvGI,SAACA,EAAO+F,GACtC,IAAIuE,EAAW,YAAOnH,GAClBzB,EAAI,eAAO4I,EAAYvE,IAExB/B,KAAKgE,IAAIC,WAAWjI,EAAM+H,OAAOjC,SAAW,GAC7CpE,EAAK,GAAKuG,WAAWjI,EAAM+H,OAAOjC,OAEL,KAAvB9F,EAAM+H,OAAOjC,QACnBpE,EAAK,GAAK1B,EAAM+H,OAAOjC,OAGzBwE,EAAYvE,GAASrE,EAErBkI,EAAeU,GACfD,EAAeC,GAyFsBoB,CAAwB1L,EAAO+F,SAExD,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACA,cAACC,EAAA,EAAD,CAAYC,QAAS6D,EAArB,uBACA,cAAC5D,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAI4H,EACJ3D,YAAY,kCACZxB,KAAK,YACLP,MAAOU,EAAQ,GACfsB,SAAU,SAAC9H,GAAD,OA3FO,SAACA,EAAO+F,GACvC,IAAIuE,EAAW,YAAOnH,GAClBzB,EAAI,eAAO4I,EAAYvE,IAExB/B,KAAKgE,IAAIC,WAAWjI,EAAM+H,OAAOjC,SAAW,IAC7CpE,EAAK,GAAKuG,WAAWjI,EAAM+H,OAAOjC,OAEL,KAAvB9F,EAAM+H,OAAOjC,QACnBpE,EAAK,GAAK1B,EAAM+H,OAAOjC,OAGzBwE,EAAYvE,GAASrE,EAErBkI,EAAeU,GACfD,EAAeC,GA6EoBqB,CAAyB3L,EAAO+F,SAEvD,eAACuC,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,YAAY0I,QAAS,kBAxJ5C,SAACK,GACxB,IAAI6F,EAAQ,YAAOzI,GACnByI,EAASC,OAAO9F,EAAO,GAEvB6D,EAAegC,GACfvB,EAAeuB,GAmJ0DE,CAAiB/F,IAAQ0B,WAAS,EAAC7D,GAAI6H,EAApG,yBACe1F,EAAQ,aAOjC,uBACA,cAACuC,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,UAAU0I,QAzN1B,WACpBkE,GAAe,SAAAmC,GAAS,4BAAQA,GAAR,CAAmB,CAAC,GAAI,UAwNsBtE,WAAS,EAA7E,sBAzEoB,WACtB,GAAGtE,EAAYgH,QAAU,EACvB,OACE,eAAC7B,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,YAAY0I,QAASsE,EAAevC,WAAS,EAA/E,UACGH,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,UAAUwM,eAAa,KACxElC,GAAgB,iBAwErB0E,GAED,2B,gFCaSC,OAjQf,YAA4I,IAAjHnG,EAAgH,EAAhHA,MAAOC,EAAyG,EAAzGA,MAAOY,EAAkG,EAAlGA,eAAgBuF,EAAkF,EAAlFA,eAAgBC,EAAkE,EAAlEA,eAAgB1O,EAAkD,EAAlDA,UAAW2O,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,mBAAqB,EAG7GnO,oBAAS,GAHoG,mBAGlIoO,EAHkI,KAG1HC,EAH0H,OAI7GrO,oBAAU,GAJmG,mBAIlIsO,EAJkI,KAI1HC,EAJ0H,OAKjGvO,oBAAS,GALwF,mBAKlIoJ,EALkI,KAKpHC,EALoH,OAMzGrJ,mBAAS,IANgG,mBAMlIwO,EANkI,KAMxHC,EANwH,OAO3FzO,mBAAS,IAPkF,mBAOlI0O,EAPkI,KAOjHC,EAPiH,OAQ/F3O,mBAAS,IARsF,mBAQlI4O,EARkI,KAQnHC,EARmH,OASjG7O,mBAAS,IATwF,mBASlI8O,EATkI,KASpHC,EAToH,OAUvG/O,oBAAU,GAV6F,mBAUlIgP,EAVkI,KAUvHC,EAVuH,KAgBnIC,EAAuB,SAACpN,GACF,KAAvBA,EAAM+H,OAAOjC,OACduG,GAAmB,EAAO,MAGzBrI,KAAKgE,IAAIhI,EAAM+H,OAAOjC,QAAU,KACjCmH,EAAgBjN,EAAM+H,OAAOjC,OACR,KAAlBgH,GAA+C,KAAvB9M,EAAM+H,OAAOjC,OACtCuG,GAAmB,EAAM,CAACS,EAAe7E,WAAWjI,EAAM+H,OAAOjC,WASjEuH,GAAwB,SAACrN,GACH,KAAvBA,EAAM+H,OAAOjC,OACduG,GAAmB,EAAO,MAGzBrI,KAAKgE,IAAIhI,EAAM+H,OAAOjC,QAAU,MACjCiH,EAAiB/M,EAAM+H,OAAOjC,OACV,KAAjBkH,GAA8C,KAAvBhN,EAAM+H,OAAOjC,OACrCuG,GAAmB,EAAM,CAACpE,WAAWjI,EAAM+H,OAAOjC,OAAQkH,MAS1DM,GAAmB,SAACtN,GACxB2M,EAAY3M,EAAM+H,OAAOjC,QAOrByH,GAA0B,SAACvN,GAC/B6M,EAAmB7M,EAAM+H,OAAOjC,QAM5B0H,GAAqB,WACzB,IAAe,IAAZhB,GAA8B,KAAbE,GAAqC,KAAlBI,GAAyC,KAAjBE,EAAoB,CACjFzF,GAAgB,GAChB,IAAMgB,EAAO,CACXrF,aAAcsJ,EACdnG,KAAMqG,EACNvG,YAAayG,EACbzJ,YAAa,CAAC2J,EAAeE,IAG/BtE,MAAM,aAAc,CAClBC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJqD,GAAU,GACVhF,GAAgB,GAChBpH,YAAW,WACT+L,EAAe,CACbhJ,aAAcsJ,EACdnG,KAAMqG,EACNvG,YAAayG,EACbzJ,YAAa,CAAC2J,EAAeE,IAC5BE,GACHC,GAAc,KACb,QAEJ9D,OAAM,SAAAC,GAAG,OAAI3C,YAGd8G,MAAM,gDAOJC,GAAmB,WACvBrB,GAAmB,EAAO,MAC1BE,GAAU,GACVY,GAAc,IAgHhB,OACE,eAAC/B,EAAA,EAAD,CAAOpF,OAAQF,IAAUC,EAAO4H,QAAM,EAAClL,MAAO,CAACmL,QAAS,OAAQvC,UAAW,qBAAsBC,SAAU,QAASuC,UAAW,EAA/H,UACE,cAACjI,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACG6G,EAAS,gBAAkB,mBAG3BA,GAAU7O,EAAU8I,KAAI,SAACC,EAAST,GACjC,OACE,eAACqF,EAAA,EAAD,CAAO3I,MAAO,CAACqL,UAAW,OAAQC,aAAc,OAAQH,QAAQ,QAAUC,UAAW,EAArF,UACE,cAACrI,EAAA,EAAD,UACE,cAAC,KAAD,MAEF,cAACA,EAAA,EAAD,CAAYE,QAAS,kBAAM0G,EAAiB5F,IAA5C,SACE,cAAC,KAAD,MAEF,cAAChB,EAAA,EAAD,CAAYxI,MAAM,UAAU0I,QAAS,kBAvHlB,SAACzC,EAAU8C,GACxCwG,GAAU,GACVE,EAAUxJ,EAASC,cACnByJ,EAAY1J,EAASoD,MACrBwG,EAAmB5J,EAASkD,aAC5B4G,EAAiB9J,EAASE,YAAY,IACtC8J,EAAgBhK,EAASE,YAAY,IACrCgK,EAAapH,GACbsG,GAAmB,EAAM,CAACpJ,EAASE,YAAY,GAAIF,EAASE,YAAY,KA+GnB6K,CAAuBxH,EAAST,IAA3E,SACE,cAAC,KAAD,MAEF,cAACP,EAAA,EAAD,CAAYxI,MAAM,YAAY0I,QAAS,kBA1GtB,SAACzC,EAAU8C,GAEtC,GADkBkI,OAAOC,QAAP,4DAAoEjL,EAASoD,KAA7E,uBAAgGpD,EAASE,YAAY,GAArH,sBAAqIF,EAASE,YAAY,GAA1J,eAAmKF,EAASkD,cAC/K,CACboB,GAAgB,GAChB,IAAMgB,EAAO,CACXrF,aAAcD,EAASC,cAEzBwF,MAAM,aAAc,CAClBC,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ3B,GAAgB,GAChBgF,GAAU,GACVpM,YAAW,WACTgM,EAAelJ,EAASC,aAAc6C,KACrC,QAEJsD,OAAM,SAAAC,GAAG,OAAI3C,QAmFuCwH,CAAqB3H,EAAST,IAA3E,SACE,cAAC,KAAD,MAEF,cAACH,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACGe,EAAQH,aAOjBiG,GArFF,iCACE,eAAC9E,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACA,cAACC,EAAA,EAAD,CAAYC,QAAQ,mBAApB,sBACA,cAACC,EAAA,EAAD,CACIlI,KAAK,SACLkE,GAAG,mBACHiE,YAAY,gCACZxB,KAAK,WACLP,MAAOkH,EACPlF,SAAUsF,OAEd,uBACA,eAAC5F,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACA,cAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,uBACA,cAACC,EAAA,EAAD,CACIlI,KAAK,SACLkE,GAAG,oBACHiE,YAAY,kCACZxB,KAAK,YACLP,MAAOgH,EACPhF,SAAUuF,QAEd,uBACA,cAACnF,EAAA,EAAD,CACItE,GAAG,iBACHuE,MAAM,gBACNN,YAAY,6BACZ/B,MAAO4G,EACP5E,SAAUwF,GACV7F,WAAS,IACb,uBACA,cAACS,EAAA,EAAD,CACItE,GAAG,4BACHuE,MAAM,cACNN,YAAY,yCACZO,WAAS,EACTC,KAAM,GACNgD,UAAU,QACVvF,MAAO8G,EACP9E,SAAUyF,GACV9F,WAAS,IACb,uBACA,uBACA,eAACa,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,UAAU0I,QAAS8H,GAArD,UACKlG,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,YAAYwM,eAAa,KAC1ElC,GAAgB,iBAGtB,eAACgB,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,YAAY0I,QAASgI,GAAvD,UACKpG,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,UAAUwM,eAAa,KACxElC,GAAgB,wBC0Gf8G,OA/Tf,YAAsG,IAA/EtI,EAA8E,EAA9EA,MAAOC,EAAuE,EAAvEA,MAAOY,EAAgE,EAAhEA,eAAgBnJ,EAAgD,EAAhDA,MAAO6Q,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,eAAiB,EAGvErQ,oBAAS,GAH8D,mBAG5FoO,EAH4F,KAGpFC,EAHoF,OAI3DrO,oBAAS,GAJkD,mBAI5FoJ,EAJ4F,KAI9EC,EAJ8E,OAKnErJ,mBAAS,IAL0D,mBAK5FwO,EAL4F,KAKlFC,EALkF,OAMvEzO,oBAAU,GAN6D,mBAM5FsO,EAN4F,KAMpFC,EANoF,OAOjEvO,oBAAU,GAPuD,mBAO5FgP,EAP4F,KAOjFC,EAPiF,OAQ7DjP,mBAAS,IARoD,mBAQ5FiF,EAR4F,KAQ/EyG,EAR+E,OAS/D1L,oBAAS,GATsD,mBAS5FoF,EAT4F,KAShFkL,EATgF,KAsE7FlB,EAAmB,SAACtN,GACxB2M,EAAY3M,EAAM+H,OAAOjC,QAOrB2I,GAAqB,SAACzO,GAC1BwO,EAAcxO,EAAM+H,OAAOkD,SAC3BsD,EAAepL,EAAanD,EAAM+H,OAAOkD,UAMrCyD,GAAiB,WAErB,IADA,IAAIzE,GAAmB,EACfC,EAAI,EAAGA,EAAI/G,EAAYgH,OAAQD,IACrC,GAAyB,KAAtB/G,EAAY+G,GAAG,IAAmC,KAAtB/G,EAAY+G,GAAG,GAAU,CACtDD,GAAmB,EACnB,MAGJ,GAAGA,GAAoB9G,EAAYgH,QAAU,EAAE,CAC7C5C,GAAgB,GAChB,IAAMgB,EAAO,CACXa,SAAUoD,EACVpC,UAAWsC,EACXvJ,YAAaA,EACbwL,YAAarL,GAGfoF,MAAM,SAAU,CACdC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJqD,GAAU,GACVhF,GAAgB,GAChBpH,YAAW,WACTwM,EAAY,IACZF,GAAW,GACXU,GAAc,GACdmB,EAAW,CACTnL,YAAaA,EACbG,WAAYA,EACZ8G,UAAWsC,GACVQ,KACF,QAEJ7D,OAAM,SAAAC,GAAG,OAAI3C,YAGd8G,MAAM,gDAOJC,GAAmB,WACvBnB,GAAU,GACVE,GAAW,GACXU,GAAc,GACdoB,EAAe,GAAIjL,IAMfsL,GAAgB,WACpBhF,GAAe,SAAAjE,GAAO,4BAAQA,GAAR,CAAiB,CAAC,GAAI,UA2I9C,OACE,eAACyF,EAAA,EAAD,CAAOpF,OAAQF,IAAUC,EAAO4H,QAAM,EAAClL,MAAO,CAACmL,QAAS,OAAQvC,UAAW,qBAAsBC,SAAU,QAASuC,UAAW,EAA/H,UACE,cAACjI,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACG6G,EAAS,YAAc,eAGvBA,GAAU9O,EAAM+I,KAAI,SAACC,EAAST,GAC7B,OACE,eAACqF,EAAA,EAAD,CAAO3I,MAAO,CAACqL,UAAW,OAAQC,aAAc,OAAQH,QAAQ,QAAUC,UAAW,EAArF,UACE,cAACrI,EAAA,EAAD,UACG8B,EAAe,cAACiC,EAAA,EAAD,CAAkB9G,MAAO,CAACzF,MAAO,SAASO,KAAM,GAAIP,MAAM,YAAYwM,eAAa,IAAM,cAAC,KAAD,MAE3G,cAAChE,EAAA,EAAD,CAAYxI,MAAM,UAAU0I,QAAS,kBA/ItB,SAACmJ,EAAM9I,GAC7BuB,IAGHiF,GAAU,GACVI,EAAYkC,EAAKzE,WACjBqC,EAAUoC,EAAKzF,UACf+D,EAAapH,GACb6D,EAAeiF,EAAK1L,aACpBqL,EAAcK,EAAKvL,YACnBiL,EAAeM,EAAK1L,YAAa0L,EAAKvL,aAqIewL,CAAmBtI,EAAST,IAAvE,SACGuB,EAAe,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,UAAUwM,eAAa,IAAM,cAAC,KAAD,MAEjF,cAAChE,EAAA,EAAD,CAAYxI,MAAM,YAAY0I,QAAS,kBAhI1B,SAACmJ,EAAM9I,GAC9B,IAAGuB,GAIe2G,OAAOC,QAAP,+DAA0F,OAAnBW,EAAKzE,UAAqB,OAASyE,EAAKzE,UAA/G,2BAA2IyE,EAAK1L,YAAYoD,KAAI,SAACC,EAAST,GAC1L,MAAM,GAAN,OAAUA,EAAQ,EAAlB,cAAyBS,EAAQ,GAAjC,aAAwCA,EAAQ,GAAhD,UACCnF,KAAK,MACO,CACbkG,GAAgB,GAEhB,IAAMgB,EAAO,CACXa,SAAUyF,EAAKzF,UAEjBV,MAAM,SAAU,CACdC,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,WAEnDP,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJjJ,QAAQC,IAAIgJ,GACZ3B,GAAgB,GAChBgF,GAAU,GACVpM,YAAW,WACTkO,EAAWtI,KACV,QAEJsD,OAAM,SAAAC,GAAG,OAAI3C,QAiGuCoI,CAAiBvI,EAAST,IAAvE,SACGuB,EAAe,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,YAAYwM,eAAa,IAAM,cAAC,KAAD,MAEnF,eAAC5D,EAAA,EAAD,CAAYH,QAAQ,KAApB,UACGe,EAAQlD,WAAa,cAAC,IAAD,IAA4B,cAAC,KAAD,IAC3B,OAAtBkD,EAAQ4D,UAAqB,eAAiB5D,EAAQ4D,mBAO/DkC,GAnGF,iCACE,cAACxB,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAAS3H,EACTwE,SAAU2G,GACVpI,KAAK,WACL6E,YAAa,cAAC,IAAD,IACbC,KAAM,cAAC,KAAD,MAGVhD,MAAM,gBACR,cAACD,EAAA,EAAD,CACEtE,GAAG,iBACHuE,MAAM,YACNN,YAAY,sCACZ/B,MAAO4G,EACP5E,SAAUwF,EACV7F,WAAS,IAETtE,EAAYoD,KAAI,SAACC,EAAST,GACxB,IAAIwF,EAAK,wBAAoBxF,GACzByF,EAAW,wBAAoBzF,GAC/B0F,EAAW,oBAAgB1F,GAC/B,OACE,eAACqF,EAAA,EAAD,CAAO3I,MAAO,CAACqL,UAAW,OAAQC,aAAc,OAAQH,QAAQ,QAAUC,UAAW,EAArF,UACE,eAACjI,EAAA,EAAD,mBAAkBG,EAAQ,KAC1B,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAS4D,EAArB,sBACA,cAAC3D,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAI2H,EACJ1D,YAAY,gCACZxB,KAAK,WACLP,MAAOU,EAAQ,GACfsB,SAAU,SAAC9H,GAAD,OAzOI,SAACA,EAAO+F,GACtC,IAAIuE,EAAW,YAAOnH,GAClBzB,EAAI,eAAO4I,EAAYvE,IAExB/B,KAAKgE,IAAIC,WAAWjI,EAAM+H,OAAOjC,SAAW,GAC7CpE,EAAK,GAAKuG,WAAWjI,EAAM+H,OAAOjC,OAEL,KAAvB9F,EAAM+H,OAAOjC,QACnBpE,EAAK,GAAK1B,EAAM+H,OAAOjC,OAGzBwE,EAAYvE,GAASrE,EAErBkI,EAAeU,GACfiE,EAAejE,EAAahH,GA2NSoI,CAAwB1L,EAAO+F,SAExD,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAS6D,EAArB,uBACA,cAAC5D,EAAA,EAAD,CACElI,KAAK,SACLkE,GAAI4H,EACJ3D,YAAY,kCACZxB,KAAK,YACLP,MAAOU,EAAQ,GACfsB,SAAU,SAAC9H,GAAD,OA7NK,SAACA,EAAO+F,GACvC,IAAIuE,EAAW,YAAOnH,GAClBzB,EAAI,eAAO4I,EAAYvE,IAExB/B,KAAKgE,IAAIC,WAAWjI,EAAM+H,OAAOjC,SAAW,IAC7CpE,EAAK,GAAKuG,WAAWjI,EAAM+H,OAAOjC,OAEL,KAAvB9F,EAAM+H,OAAOjC,QACnBpE,EAAK,GAAK1B,EAAM+H,OAAOjC,OAGzBwE,EAAYvE,GAASrE,EAErBkI,EAAeU,GACfiE,EAAejE,EAAahH,GA+MSqI,CAAyB3L,EAAO+F,SAEzD,eAACuC,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,YAAY0I,QAAS,kBA1M5C,SAACK,GACxB,IAAI6F,EAAQ,YAAOzI,GACnByI,EAASC,OAAO9F,EAAO,GACvB6D,EAAegC,GACf2C,EAAe3C,EAAUtI,GAsMgDwI,CAAiB/F,IAAQ0B,WAAS,EAAC7D,GAAI6H,EAApG,yBACe1F,EAAQ,WAO/B,cAACuC,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,UAAU0I,QAASkJ,GAAenH,WAAS,EAA7E,sBAIA,eAACa,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,UAAU0I,QAASgJ,GAArD,UACGpH,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,YAAYwM,eAAa,KAC1ElC,GAAgB,iBAGpB,eAACgB,EAAA,EAAD,CAAQ7C,QAAQ,YAAYzI,MAAM,YAAY0I,QAASgI,GAAvD,UACGpG,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,UAAUwM,eAAa,KACxElC,GAAgB,wBC1Pb0H,OApCf,YAAqQ,IAA3OlJ,EAA0O,EAA1OA,MAAOC,EAAmO,EAAnOA,MAAOkJ,EAA4N,EAA5NA,YAAatI,EAA+M,EAA/MA,eAAgBuF,EAA+L,EAA/LA,eAAgBC,EAA+K,EAA/KA,eAAgB1O,EAA+J,EAA/JA,UAAW2O,EAAoJ,EAApJA,iBAAkB5O,EAAkI,EAAlIA,MAAO6Q,EAA2H,EAA3HA,WAAYzH,EAA+G,EAA/GA,eAAgBC,EAA+F,EAA/FA,kBAAmBwF,EAA4E,EAA5EA,mBAAoB3C,EAAwD,EAAxDA,cAAeC,EAAyC,EAAzCA,WAAY2E,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,eACjP,OACE,sBAAKvI,OAAQF,IAAUC,EAAvB,UACE,cAAC,EAAD,CACED,MAAOmJ,EACPlJ,MAAO,EACPY,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,IACrB,cAAC,GAAD,CACEf,MAAOmJ,EACPlJ,MAAO,EACPY,eAAgBA,EAChByF,iBAAkBA,EAClB3O,UAAWA,EACXyO,eAAgBA,EAChBG,mBAAoBA,EACpBF,eAAgBA,IAClB,cAAC,GAAD,CACErG,MAAOmJ,EACPlJ,MAAO,EACPY,eAAgBA,EAChB+C,cAAeA,EACfC,WAAYA,IACd,cAAC,GAAD,CACE7D,MAAOmJ,EACPlJ,MAAO,EACPY,eAAgBA,EAChBnJ,MAAOA,EACP6Q,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,Q,uGCZlBlS,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJM,QAAS,QAGXoS,QAAS,CACPtB,QAAS,GACTuB,WAAY,QAEdC,YAAa,CACXC,WAAY,GACZC,YAAa,GACbH,WAAY,QAEdI,YAAa,CACXhL,MArBgB,IAsBhBxH,gBAAiB,WAEnByS,UAAW,CACTC,SAAU,GAEZC,WAAY,CAEVlL,OAAO,aA8gBImL,OAzgBf,WAAsB,IAAD,EACb1R,EAAU5B,KADG,EAGa6B,mBAAS,GAHtB,mBAGZ0R,EAHY,KAGFC,EAHE,OAKS3R,oBAAS,GALlB,mBAKZ4R,EALY,KAKJC,EALI,OAMO7R,mBAAS,IANhB,mBAMZV,EANY,KAMLwS,EANK,OAOe9R,mBAAS,IAPxB,mBAOZT,EAPY,KAODwS,EAPC,OAQmC/R,mBAAS,CAAC,EAAG,IARhD,mBAQZH,EARY,KAQSmS,EART,OAWuBhS,oBAAS,GAXhC,mBAWZiS,EAXY,KAWGC,EAXH,OAY+BlS,oBAAS,GAZxC,mBAYZmS,EAZY,KAYOC,EAZP,OAa6BpS,oBAAS,GAbtC,mBAaZqS,EAbY,KAaMC,GAbN,QAciBtS,mBAAS,CAC3CqG,WAAOkG,EACPjG,YAAQiG,IAhBS,qBAcZgG,GAdY,MAcAC,GAdA,SAkBmBxS,mBAAS,GAlB5B,qBAkBZ+Q,GAlBY,MAkBC0B,GAlBD,SAoB2BzS,mBAAS,CACrDgF,cAAe,EACfmD,KAAM,GACNF,YAAa,GACbhD,YAAa,CAAC,EAAG,GACjBxB,WAAW,IAzBM,qBAoBZ9D,GApBY,MAoBK+S,GApBL,SA2BW1S,mBAAS,CACrCwB,KAAM,aACNyD,YAAa,GACbG,YAAY,IA9BK,qBA2BZ3F,GA3BY,MA2BHkT,GA3BG,SAgCmB3S,mBAAS,CAC7CiF,YAAa,CAAC,EAAG,GACjBxB,WAAW,IAlCM,qBAgCZ/D,GAhCY,MAgCCkT,GAhCD,SAoCqB5S,mBAAS,CAC/CiF,YAAa,CAAC,EAAG,GACjBxB,WAAW,IAtCM,qBAoCZ7D,GApCY,MAoCEiT,GApCF,SAwCa7S,mBAAS,CACvCwB,KAAM,aACNyD,YAAa,GACbG,YAAY,IA3CK,qBAwCZtF,GAxCY,MAwCFgT,GAxCE,MA0DbC,GAAkB,SAACjR,EAAOkR,GAC9BrB,EAAYqB,IAOR9E,GAAmB,SAACnJ,GACxB4M,EAAY,GACZe,GAAmB,2BAAI3N,GAAL,IAAetB,WAAW,MAQxCwP,GAAY,SAACC,EAAGC,GACpB,OAAsB,OAAnBD,EAAC,WAA6C,OAAnBC,EAAC,UACtB,EAEkB,OAAnBD,EAAC,UACA,EAEkB,OAAnBC,EAAC,WACC,EAEFD,EAAC,UAAcE,cAAgBD,EAAC,UAAcC,cAC7C,EAEDF,EAAC,UAAcE,cAAgBD,EAAC,UAAcC,eAC5C,EAEH,GA4BHC,GAAgB,SAACH,EAAGC,GACxB,OAAID,EAAC,KAASE,cAAgBD,EAAC,KAASC,cAC7B,EACAF,EAAC,KAASE,cAAgBD,EAAC,KAASC,eACnC,EAEL,GA0BH3K,GAAiB,WACrBkC,aAAa2I,WAAW,SACxBzB,GAAU,IAMN0B,GAAmB,WACvB/I,MAAM,QACLO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJgH,EAAuB,CAAChH,EAAIT,UAAWS,EAAIV,WAC3CgI,IAAoB,OAQlBtE,GAAiB,SAACjJ,EAAU8C,GAChC,IAAI2L,EAAK,YAAOjU,GAEZkU,EAAY,eAAOD,EAAM3L,IAE7B4L,EAAatL,KAAOpD,EAASoD,KAC7BsL,EAAaxL,YAAclD,EAASkD,YACpCwL,EAAaxO,YAAcF,EAASE,YAEpCuO,EAAM3L,GAAS4L,EAEZ1O,EAASC,cAAgBrF,GAAgBqF,cAC1C0N,GAAmB,2BAAI3N,GAAL,IAAetB,WAAW,KAE9CoP,IAAgB,SAAApL,GACd,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYjQ,WAAY,EACjBiQ,KAET3B,EAAayB,EAAMG,KAAKN,MAOpBpF,GAAiB,SAACjJ,EAAc6C,GACpC,IAAI2L,EAAK,YAAOjU,GAChBiU,EAAM7F,OAAO9F,EAAO,GACjBlI,GAAgBqF,cAAgBA,GACjC0N,IAAmB,SAAAjL,GACjB,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYjQ,WAAY,EACjBiQ,KAGX3B,EAAayB,IAOTrD,GAAa,SAACtI,GAClB,IAAI+L,EAAS,YAAOtU,GACpBsU,EAAUjG,OAAO9F,EAAO,GACxBiL,IAAY,SAAArL,GACV,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYzO,YAAc,GACnByO,KAET5B,EAAS8B,IAiBLC,GAA6B,SAACjM,GAClC6K,GAAe7K,GACf+J,EAAY,IAQRmC,GAAyB,SAACrQ,EAAWsB,GACtCtB,GACDkO,EAAY,GAEde,IAAmB,SAAAjL,GACjB,IAAMiM,EAAcjQ,EAAS,eAAOsB,GAAP,eAAuB0C,GAEpD,OADAiM,EAAYjQ,UAAYA,EACjBiQ,MAQLhL,GAAiB,SAAC3D,GACtB6N,IAAe,SAAAnL,GACb,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYjQ,WAAY,EACjBiQ,KAET3B,GAAa,SAAAlE,GAEX,MADY,sBAAOA,GAAP,CAAkB9I,IACd4O,KAAKN,QASnB1K,GAAoB,SAAClF,EAAWwB,GASlC2N,GAREnP,EAQa,CAACwB,YAAaA,EAAaxB,WAAW,GAPtC,SAAAgE,GACb,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYjQ,WAAY,EACjBiQ,KAaPvF,GAAqB,SAAC1K,EAAWwB,GASnC4N,GAREpP,EAQc,CAACwB,YAAaA,EAAaxB,WAAW,GAPtC,SAAAgE,GACd,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYjQ,WAAY,EACjBiQ,KAYPjI,GAAa,SAACkF,GAClBgC,IAAW,SAAAlL,GACT,IAAMiM,EAAW,eAAOjM,GAExB,OADAiM,EAAYzO,YAAc,GACnByO,KAET5B,GAAS,SAAAjE,GAEP,MADY,sBAAOA,GAAP,CAAkB8C,IACdgD,KAAKV,QAQnBzH,GAAgB,SAACmF,GACrBgC,GAAWhC,IAQPP,GAAa,SAACO,EAAM9I,GACxBiL,IAAY,SAAAiB,GACV,IAAIC,EAAa,eAAOD,GAExB,OADAC,EAAc/O,YAAc,GACrB+O,KAETlC,GAAS,SAAAjE,GACP,IAAIoG,EAAa,YAAOpG,GACpBqG,EAAQ,eAAOD,EAAcpM,IAMjC,OALAqM,EAAS9O,WAAauL,EAAKvL,WAC3B8O,EAAShI,UAAYyE,EAAKzE,UAC1BgI,EAASjP,YAAc0L,EAAK1L,YAC5BgP,EAAcpM,GAASqM,EACvBD,EAAcN,KAAKV,IACZgB,MASL5D,GAAiB,SAACpL,EAAaG,GACnC0N,IAAY,SAAArL,GACV,IAAMiM,EAAW,eAAOjM,GAGxB,OAFAiM,EAAYzO,YAAcA,EAC1ByO,EAAYtO,WAAaA,EAClBsO,MAgGX,OA3FAvN,qBAAU,WAnPRqE,MAAM,aAAc,CAClBE,QAAS,CACP,+BAA4BC,aAAaC,QAAQ,aAGpDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJA,EAAI2I,KAAKN,IACTtB,EAAa/G,GACboH,GAAqB,MAEtBjH,OAAM,SAACgJ,GACN1L,QA9CF+B,MAAM,SAAU,CACdE,QAAS,CACP,+BAA4BC,aAAaC,QAAQ,aAGpDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJA,EAAI2I,KAAKV,IACTnB,EAAS9G,GACTkH,GAAiB,MAElB/G,OAAM,SAACgJ,GACN1L,QA4QF8K,KACA,IAAMa,EAAWC,aAAY,WAC3Bd,OACC,MAEH,SAASe,IAEP9B,GAAc,CACZnM,MAAO0J,OAAOwE,WACdjO,OAAQyJ,OAAOyE,cAWnB,OANAzE,OAAO0E,iBAAiB,SAAUH,GAGlCA,IAGO,WACLvE,OAAO2E,oBAAoB,SAAUJ,GACrCK,cAAcP,MAGf,IAgED,yBAAKhO,UAAU,OAAf,0BAAgCrG,EAAQzB,MAAxC,0BACE,eAACsW,EAAA,EAAD,CACErN,QAAQ,aACRsN,OAAO,OACPC,MAAM,EACN/U,QAAS,CACPgV,MAAOhV,EAAQsR,aALnB,UAOE,cAAC3J,EAAA,EAAD,CAAYtB,UAAWrG,EAAQiR,QAA/B,wBAGA,cAACgE,EAAA,EAAD,IACA,cAACtN,EAAA,EAAD,CAAYtB,UAAWrG,EAAQmR,YAA/B,sBAGA,cAAC+D,EAAA,EAAD,UACG,CAAC,eAAgB,iBAAiB5M,KAAI,SAACxC,EAAMgC,GAAP,OACrC,eAACqN,EAAA,EAAD,CAAUC,QAAM,EAAY3N,QAAS,kBAAMqM,GAA2BhM,IAAtE,UACE,cAACuN,GAAA,EAAD,UAAyB,IAAVvN,EAAc,cAAC,KAAD,IAAc,cAAC,IAAD,MAC3C,cAACwN,EAAA,EAAD,CAAcC,QAASzP,MAFHA,QAM1B,cAACmP,EAAA,EAAD,IACA,cAACtN,EAAA,EAAD,CAAYtB,UAAWrG,EAAQmR,YAA/B,kBAGA,cAAC+D,EAAA,EAAD,UACG,CAAC,WAAY,aAAa5M,KAAI,SAACxC,EAAMgC,GAAP,OAC7B,eAACqN,EAAA,EAAD,CAAUC,QAAM,EAAY3N,QAAS,kBAAMqM,GAA2BhM,EAAQ,IAA9E,UACE,cAACuN,GAAA,EAAD,UAAyB,IAAVvN,EAAc,cAAC,KAAD,IAAc,cAAC,IAAD,MAC3C,cAACwN,EAAA,EAAD,CAAcC,QAASzP,MAFHA,QAM1B,cAACmP,EAAA,EAAD,IACA,cAACtN,EAAA,EAAD,CAAYtB,UAAWrG,EAAQmR,YAA/B,qBAGA,cAAC+D,EAAA,EAAD,UACG,CAAC,cAAe,WAAW5M,KAAI,SAACxC,EAAMgC,GAAP,OAC9B,eAACqN,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,GAAA,EAAD,UAAyB,IAAVvN,EAAc,cAAC,KAAD,IAAmB,cAAC,KAAD,MAChD,cAACwN,EAAA,EAAD,CAAcC,QAASzP,EAAM2B,QAAS,kBAxRrB,SAACK,GACf,IAAVA,GACDY,KAsRoD8M,CAAqB1N,QAF7ChC,WAnG3B+L,EAEC,eAAC4D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGnR,MAAO,CAAC8B,MAAM,eAAD,OA9b7B,IA8b6B,OAAmCsP,WA9bhE,KA8bZ,UACE,cAACH,EAAA,EAAD,CAAMhS,MAAI,EAACoS,MAAM,SAASrR,MAAO,CAAEmL,QAAS,MAAOpJ,OAAO,QAASiL,SAAU,GAA7E,SACGY,GAAqBF,GAAiBI,EACrC,cAAC,EAAD,CACA/S,MAAOA,EACPC,UAAWA,EACXC,gBAAiBsU,GACjBzU,KAAwB,IAjX3ByG,KAAKsB,IAAImL,GAAWjM,OAAQiM,GAAWlM,OAkXpC5G,QAASA,GACTC,YAAaA,GACbC,gBAAiBA,GACjBC,aAAcA,GACdC,oBAAqBA,EACrBC,SAAUA,KACV,cAAC+V,GAAA,EAAD,CAAUtO,QAAQ,SAASlB,MAAO,OAAQC,OAAQ,WAGtD,cAACkP,EAAA,EAAD,CAAMhS,MAAI,EAACsS,GAAI,EAAGF,MAAM,OAAxB,SACE,eAAC1I,EAAA,EAAD,CAAOyC,UAAW,EAAGF,QAAM,EAACrJ,UAAWrG,EAAQyR,WAA/C,UACE,cAACuE,EAAA,EAAD,CAAQrX,SAAS,SAAjB,SACE,eAACsX,EAAA,EAAD,CAAMpO,MAAO8J,EAAU9H,SAAUmJ,GAAiBkD,aAAW,sBAAsB1O,QAAQ,YAA3F,UACE,cAAC2O,EAAA,EAAD,CAAK3R,MAAO,CAAE4R,SAAU,IAAMlJ,KAAM,cAAC,KAAD,MACpC,cAACiJ,EAAA,EAAD,CAAK3R,MAAO,CAAE4R,SAAU,IAAMlJ,KAAM,cAAC,KAAD,WAGxC,cAAC,EAAD,CAActN,gBAAiBA,GAC7BiI,MAAO8J,EACP7J,MAAO,IACT,cAAC,GAAD,CAAiBD,MAAO8J,EACtB7J,MAAO,EACPkJ,YAAaA,GACbtI,eAAgBA,GAChByF,iBAAkBA,GAClB3O,UAAWA,EACXD,MAAOA,EACP6Q,WAAYA,GACZzH,eAAgBA,GAChBC,kBAAmBA,GACnBqF,eAAgBA,GAChBC,eAAgBA,GAChBE,mBAAoBA,GACpB3C,cAAeA,GACfC,WAAYA,GACZ2E,WAAYA,GACZC,eAAgBA,aAOlB,cAAC,IAAD,CAAU+F,GAAI,CAACC,SAAS,kBAKlC,KC1gBW,OAA0B,oCCWnClY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiY,KAAM,CACJxX,MAAO,UACPyX,eAAgB,OAChBC,SAAU,OACVvF,WAAY,YA2JDwF,OAvJf,WACE,IAAM1W,EAAU5B,KADA,EAGwB6B,oBAAS,GAHjC,mBAGT0W,EAHS,KAGKC,EAHL,OAIgB3W,mBAAS,IAJzB,mBAIT4W,EAJS,KAICC,EAJD,OAKgB7W,mBAAS,IALzB,mBAKT8W,EALS,KAKCC,EALD,OAMwB/W,oBAAS,GANjC,mBAMToJ,EANS,KAMKC,EANL,KAYV2N,EAAuB,SAAClV,GAC5B+U,EAAY/U,EAAM+H,OAAOjC,QAOrBqP,EAAuB,SAACnV,GAC5BiV,EAAYjV,EAAM+H,OAAOjC,QAMrBsP,EAAe,WACnBL,EAAY,IACZE,EAAY,IACZ1N,GAAgB,GAEhB,IAAMgB,EAAO,CACX,SAAYuM,EACZ,SAAYE,GAGdtM,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBL,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJL,aAAawM,QAAQ,QAASnM,EAAIoM,OAClCT,GAAgB,GAChBtN,GAAgB,MAEjB8B,OAAM,SAACgJ,GACN5E,MAAM,wBACNlG,GAAgB,OA4FpB,OAvFAlD,qBAAU,WAC6B,OAAlCwE,aAAaC,QAAQ,UACtBJ,MAAM,oBAAqB,CACzBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,+BAA4BC,aAAaC,QAAQ,aAGpDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACDA,EAAI0L,cACLC,GAAgB,QAIrB,IAwED,8BAlEGD,EACO,cAAC,IAAD,CAAUN,GAAI,CAACC,SAAS,gBAI9B,8BACE,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAACF,EAAA,EAAD,CAAMhS,MAAI,EAACsS,GAAI,EAAGvR,MAAO,CAAEmL,QAAS,GAAI2H,gBAAgB,OAAD,OAASC,GAAT,KAAmBC,eAAgB,QAASjR,OAAQ,SAA3G,UACE,cAACoB,EAAA,EAAD,CAAY8P,UAAU,KAAKjQ,QAAQ,KAAnC,0DAGA,cAACG,EAAA,EAAD,CAAY8P,UAAU,KAAKjQ,QAAQ,KAAnC,+MAIF,eAACiO,EAAA,EAAD,CAAMhS,MAAI,EAACsS,GAAI,EAAGvR,MAAO,CAAEmL,QAAS,IAApC,UACE,cAAChI,EAAA,EAAD,CAAY8P,UAAU,KAAKjQ,QAAQ,KAAnC,qBAGA,iCACE,cAACyC,EAAA,EAAD,CACEzC,QAAQ,WACRQ,OAAO,SACP0P,UAAQ,EACRlO,WAAS,EACT7D,GAAG,WACHuE,MAAM,WACN9B,KAAK,WACLuP,aAAa,WACbC,WAAS,EACT/P,MAAOgP,EACPhN,SAAUoN,IACZ,cAAChN,EAAA,EAAD,CACEzC,QAAQ,WACRQ,OAAO,SACP0P,UAAQ,EACRlO,WAAS,EACTpB,KAAK,WACL8B,MAAM,WACNzI,KAAK,WACLkE,GAAG,WACHgS,aAAa,mBACb9P,MAAOkP,EACPlN,SAAUqN,IACZ,uBACA,uBACA,uBACA,eAAC7M,EAAA,EAAD,CACEb,WAAS,EACThC,QAAQ,YACRzI,MAAM,UACN0I,QAAS0P,EAJX,UAKG9N,GAAgB,cAACiC,EAAA,EAAD,CAAkBhM,KAAM,GAAIP,MAAM,YAAYwM,eAAa,KAC1ElC,GAAgB,gBAGtB,uBACA,cAAC,IAAD,CAAMgN,GAAG,UAAUhQ,UAAWrG,EAAQuW,KAAtC,uD,qBCjJRnY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiY,KAAM,CACJ5G,QAAS,GACT5Q,MAAO,UACPyX,eAAgB,OAChBC,SAAU,OACVvF,WAAY,QAEd2G,UAAW,CACTvR,MAAO,MACPC,OAAQ,WA0BGuR,OAtBf,WACE,IAAM9X,EAAU5B,KAEhB,OACE,8BACE,cAACqX,EAAA,EAAD,CAAMC,WAAS,EACbC,QAAS,EACTE,MAAM,SACNkC,QAAQ,SACRC,UAAU,SAASxT,MAAO,CAAE+B,OAAQ,QAASiL,SAAU,GAJzD,SAKE,eAACiE,EAAA,EAAD,CAAMhS,MAAI,EAAV,UACE,cAAC,KAAD,CAAc4C,UAAWrG,EAAQ6X,YACjC,cAAClQ,EAAA,EAAD,CAAYH,QAAQ,KAAKhD,MAAO,CAAEmL,QAAS,IAA3C,uDAGA,cAAC,IAAD,CAAM0G,GAAG,IAAIhQ,UAAWrG,EAAQuW,KAAhC,qC,6JCvBJnY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJM,QAAS,OACToZ,cAAe,SACfxZ,WAAY,SACZyZ,SAAU,QACVrI,UAAW,OAEbsI,KAAM,CACJ7R,MAAO,QAETiQ,KAAM,CACJxX,MAAO,UACPyX,eAAgB,OAChBC,SAAU,OACVvF,WAAY,QAEdkH,UAAW,CACTrZ,MAAO,SAETsZ,UAAW,CACTtZ,MAAO,OAETuZ,KAAM,CACJzZ,QAAS,OACTJ,WAAY,SACZgY,SAAU,QAEZ8B,iBAAkB,CAChBxZ,MAAO,OAETyZ,aAAc,CACZzZ,MAAO,UAET0Z,aAAc,CACZ1Z,MAAO,UAET2Z,aAAc,CACZ3Z,MAAO,QAET4Z,eAAgB,CACd5Z,MAAO,aAiQI6Z,OA7Pf,WACE,IAAM5Y,EAAU5B,KADA,EAIgB6B,mBAAS,IAJzB,mBAIT4W,EAJS,KAICC,EAJD,OAKgB7W,mBAAS,IALzB,mBAKT8W,EALS,KAKCC,EALD,OAMU/W,mBAAS,IANnB,mBAMT4Y,EANS,KAMFC,EANE,OAO8B7Y,oBAAS,GAPvC,mBAOT8Y,EAPS,KAOQC,EAPR,KAsDVC,EAAoB,SAAApR,GACxB,IAlBwBqR,EAkBpBC,EAAY,EAWhB,OAVItR,EAAMqE,OAAS,GACjBiN,IACEtR,EAAMqE,OAAS,GACjBiN,IA9Cc,SAAAtR,GAChB,OAAO,IAAIuR,OAAO,SAASC,KAAKxR,GA8C5ByR,CAAUzR,IACZsR,IAhCe,SAAAtR,GACjB,OAAO,IAAIuR,OAAO,qBAAqBC,KAAKxR,GAgCxC0R,CAAW1R,IACbsR,IA1Ca,SAAAtR,GACf,OAAO,IAAIuR,OAAO,SAASC,KAAKxR,IAAU,IAAIuR,OAAO,SAASC,KAAKxR,GA0C/D2R,CAAS3R,IACXsR,KA5BsBD,EA6BCC,GA5Bb,EACH,YACLD,EAAQ,EACH,OACLA,EAAQ,EACH,OACLA,EAAQ,EACH,OACLA,EAAQ,EACH,cADT,GAuEIO,EAAoB,SAAC5R,GACzB4C,MAAM,0BAAD,OAA2B5C,IAC/BmD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ+N,EAAmC,SAAhB/N,EAAIyO,aAyD3B,OACE,cAACC,GAAA,EAAD,CAAWzB,SAAS,KAApB,SACE,sBAAK7R,UAAWrG,EAAQzB,KAAxB,UACE,cAACoJ,EAAA,EAAD,CAAY8P,UAAU,KAAKjQ,QAAQ,KAAnC,qBAGA,uBAAMnB,UAAWrG,EAAQmY,KAAzB,UACE,cAAClO,EAAA,EAAD,CACEzC,QAAQ,WACRQ,OAAO,SACP0P,UAAQ,EACRlO,WAAS,EACT7D,GAAG,QACHuE,MAAM,QACNyN,aAAa,QACbC,WAAS,EACT/P,MAAOgR,EACPhP,SAtFgB,SAAC9H,GACzB+W,EAAS/W,EAAM+H,OAAOjC,QAsFdxB,UAAWrG,EAAQ4Z,YACrB,uBACA,uBACA,cAAC3P,EAAA,EAAD,CACEzC,QAAQ,WACRQ,OAAO,SACP0P,UAAQ,EACRlO,WAAS,EACT7D,GAAG,WACHuE,MAAM,WACNyN,aAAa,WACb9P,MAAOgP,EACPhN,SApHmB,SAAC9H,GAC5B+U,EAAY/U,EAAM+H,OAAOjC,OACzB4R,EAAkB1X,EAAM+H,OAAOjC,QAmHvBxB,UAAWrG,EAAQ4Z,YACrB,uBACA,eAACjS,EAAA,EAAD,CAAYtB,UAAWrG,EAAQsY,KAA/B,8BACoBS,EAAkB,QAAU,YAC7CA,EAAkB,cAAC,KAAD,CAAW1S,UAAWrG,EAAQqY,YAAe,cAAC,KAAD,CAAWhS,UAAWrG,EAAQoY,eAEhG,cAACnO,EAAA,EAAD,CACEzC,QAAQ,WACRQ,OAAO,SACP0P,UAAQ,EACRlO,WAAS,EACTU,MAAM,WACNzI,KAAK,WACLkE,GAAG,WACHgS,aAAa,mBACb9P,MAAOkP,EACPlN,SA5HmB,SAAC9H,GAC5BiV,EAAYjV,EAAM+H,OAAOjC,QA4HjBxB,UAAWrG,EAAQ4Z,YACrB,uBACA,eAACjS,EAAA,EAAD,CAAYtB,UAAWrG,EAAQsY,KAA/B,gCACsBW,EAAkBlC,GA5JjB,SAAAlP,GAC7B,OAAOA,GACL,IAAK,YACH,OAAQ,cAAC,KAAD,CAAwBxB,UAAWrG,EAAQuY,mBACrD,IAAK,OACH,OAAQ,cAAC,KAAD,CAAwBlS,UAAWrG,EAAQwY,eACrD,IAAK,OACH,OAAQ,cAAC,KAAD,CAAwBnS,UAAWrG,EAAQyY,eACrD,IAAK,OACH,OAAQ,cAAC,KAAD,CAAwBpS,UAAWrG,EAAQ0Y,eACrD,QACE,OAAQ,cAAC,KAAD,CAAwBrS,UAAWrG,EAAQ2Y,kBAkJ9CkB,CAAuBZ,EAAkBlC,OAE5C,uBACA,cAAC1M,EAAA,EAAD,CACEb,WAAS,EACThC,QAAQ,YACRzI,MAAM,UACN0I,QA7GW,WACnB,GAAa,KAAVoR,GAA6B,KAAb9B,GAAgC,KAAbF,EACpCrH,MAAM,oCAEJ,CACF,IAAMlF,EAAO,CACX,MAASuO,EACT,SAAa9B,EACb,SAAaF,GAGfpM,MAAM,gBAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBL,KAAMQ,KAAKC,UAAUT,KAEtBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ6L,EAAY,IACZE,EAAY,IACZ8B,EAAS,IACTtJ,MAAM,gCAEPpE,OAAM,SAACgJ,GAEN5E,MAAM,wEAmFFnJ,UAAWrG,EAAQ4Z,UALrB,wBASF,uBACA,cAACnE,EAAA,EAAD,CAAMC,WAAS,EAACqC,QAAQ,aAAxB,SACE,cAACtC,EAAA,EAAD,CAAMhS,MAAI,EAAV,SACE,cAAC,IAAD,CAAM4C,UAAWrG,EAAQuW,KAAMF,GAAG,IAAlC,8CCzSN/X,GAAQwb,YAAe,CAC3BC,QAAS,CACPtY,KAAM,UAyBKuY,OArBf,WAME,OAJA5T,qBAAU,WACR6T,SAASC,MAAQ,eAChB,IAGD,eAACC,EAAA,EAAD,CAAe7b,MAAOA,GAAtB,UACE,cAAC8b,EAAA,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACzJ,KAAK,IAAI6G,UAAWf,KACjC,cAAC,IAAD,CAAO2D,OAAK,EAACzJ,KAAK,aAAa6G,UAAW/F,KAC1C,cAAC,IAAD,CAAO2I,OAAK,EAACzJ,KAAK,aAAa6G,UAAWK,KAC1C,cAAC,IAAD,CAAOuC,OAAK,EAACzJ,KAAK,UAAU6G,UAAWmB,cClBlC0B,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxP,MAAK,YAAkD,IAA/CyP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFf,SAASgB,eAAe,SAM1BX,M","file":"static/js/main.f4f2fa4f.chunk.js","sourcesContent":["//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport * as topojson from \"topojson\";\r\nimport { useIdleTimer } from 'react-idle-timer';\r\n\r\n//Imports from self defined structures\r\n//https://github.com/martynafford/natural-earth-geojson\r\nimport landFine from \"./jsonData/ne_10m_land.json\";\r\nimport landCoarse from \"./jsonData/ne_110m_land.json\";\r\nimport lakesFine from \"./jsonData/ne_10m_lakes.json\";\r\nimport lakesCoarse from \"./jsonData/ne_110m_lakes.json\";\r\n//https://s3-us-west-2.amazonaws.com/s.cdpn.io/215059/cities-200000.json\r\n//https://public.opendatasoft.com/api/records/1.0/search/?dataset=geonames-all-cities-with-a-population-1000&q=&rows=10000&sort=population&pretty_print=true&format=json&fields=population,coordinates,name\r\nimport lightsFine from \"./jsonData/geonames-all-cities-with-a-population-1000.json\";\r\nimport lightsCoarse from \"./jsonData/cities-200000.json\";//TODO: use if performance is fixed\r\nimport { Button, CircularProgress, IconButton, LinearProgress, Typography } from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\n/**\r\n * Styles used for the component.\r\n * @param  {*} theme - the theme of the application\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    justifyContent:'center',\r\n    alignItems:'center',\r\n    textAlign: \"center\",\r\n    position: 'relative'\r\n  },\r\n  zoomInButton: {\r\n    display: \"block\",\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    '&:hover': {\r\n      color: \"white\",\r\n      backgroundColor: 'gray',\r\n      boxShadow: 'none',\r\n    },\r\n    position: 'absolute',\r\n    left: \"83%\",\r\n    bottom: \"150px\",\r\n  },\r\n  zoomOutButton: {\r\n    display: \"block\",\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    '&:hover': {\r\n      color: \"white\",\r\n      backgroundColor: 'gray',\r\n      boxShadow: 'none',\r\n    },\r\n    position: 'absolute',\r\n    left: \"83%\",\r\n    bottom: \"90px\",\r\n  },\r\n  renderText: {\r\n    position: 'absolute',\r\n    left: \"15%\",\r\n    bottom: '30px',\r\n  }\r\n}));\r\n\r\nconst QUARTER_DIAMETER = 12742/4.0;\r\n\r\nfunction Globe({size, paths, landmarks, landmarkHandler, newPath, newLandmark, currentLandmark, editLandmark, subSolarCoordinates, editPath}) {\r\n    \r\n  const classes = useStyles();\r\n  \r\n  //States\r\n  const [mouseCoordinates, setMouseCoordinates] = useState(null);         //state for initially pressing down the mouse button's position\r\n  const [oldCoordinates, setOldCoordinates] = useState([180, -25]);   //state for the position of the globe during inactivity (units in -longitude, -latitude)\r\n  const [newCoordinates, setNewCoordinates] = useState(null);             //state for updating the old coordinates\r\n  const [isMove, setIsMove] = useState(false);\r\n  const [isDrag, setIsDrag] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [renderText, setRenderText] = useState(\"\");\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n  const [scale, setScale] = useState(1);\r\n\r\n  //Constants\r\n  const svgRef = useRef();\r\n  const circle = d3.geoCircle();\r\n  const projection = d3.geoOrthographic()\r\n    .fitSize([size, size], {type: \"Sphere\"})\r\n    .precision(0.1);\r\n  const pathGenerator = d3.geoPath().projection(projection);\r\n\r\n  /**\r\n  * Handles the mouse down event in the Globe.\r\n  * @param {*} event - the mouse event\r\n  */\r\n  const onMouseDownHandler = (event) => {\r\n    setMouseCoordinates([event.screenX, event.screenY]);\r\n  };\r\n\r\n  /**\r\n   * Gets the Radius of the city.\r\n   * @param {number} population - the population of the city\r\n   */\r\n  const getCityRadius = (population) => {\r\n    if (population < 5000)\r\n      return 0.02\r\n    else if (population < 10000)\r\n      return 0.05\r\n    else if (population < 50000)\r\n      return 0.07\r\n    else if (population < 100000)\r\n      return 0.1\r\n    else\r\n      return 0.2\r\n  };\r\n\r\n  /**\r\n   * Handles when the user has become idle.\r\n   * @param {*} event - the event during idle.\r\n   */\r\n  const handleOnIdle = event => {\r\n    //TODO: fix fine rendering issue\r\n    // if(event !== null && event.type !== \"mousedown\"){\r\n      // console.log(\"event for idle\", event);\r\n      // console.log(\"redrawing globe\");\r\n      // console.log(\"isMove=\", isMove);\r\n      console.log(\"ismove\", isMove);\r\n      console.log(\"!isDrag\", !isDrag);\r\n    if(isMove && !isDrag){\r\n      // console.log(\"redrawing globe\");\r\n      // drawGlobe(oldCoordinates, scale, false);\r\n      setIsMove(false);\r\n      \r\n      setIsLoading(true);\r\n      setRenderText(\"Rendering full resolution...\");\r\n      // console.log(\"redrawing globe for idle, this is the current landmark\", currentLandmark);\r\n      setTimeout(() => {\r\n        // console.log(\"timeout done for redrawing globe for idle, this is the current landmark\", currentLandmark);\r\n        drawGlobe(oldCoordinates, false);\r\n        setIsLoading(false);\r\n      }, 400);\r\n    }\r\n    // }\r\n    // console.log(event);\r\n  }\r\n    \r\n  /**\r\n   * Handles when the user has become active.\r\n   * @param {*} event - the event during active\r\n   */\r\n  const handleOnActive = event => {\r\n    //TODO: fix fine rendering issue\r\n    setIsDrag(false);\r\n    console.log(\"mouse up done\");\r\n    // console.log(event.path[1].tagName === \"svg\");\r\n    // if(event.path[1].tagName === \"svg\"){\r\n    //     if(newCoordinates){\r\n    //         setMouseCoordinates(null);\r\n    //         setOldCoordinates(newCoordinates);\r\n    //         setNewCoordinates(null);\r\n    //     }\r\n    //     setMouseCoordinates(null);\r\n    // }\r\n  }\r\n    \r\n  /**\r\n   * Handles when the user has done an action.\r\n   * @param {*} event - the event during an action\r\n   */\r\n  const handleOnAction = (event) => {}\r\n     \r\n  //Idle timer and parameters\r\n  const { getRemainingTime, getLastActiveTime, resume } = useIdleTimer({\r\n    timeout: 1000 * 1.5,\r\n    onIdle: handleOnIdle,\r\n    onActive: handleOnActive,\r\n    onAction: handleOnAction,\r\n    events: ['mouseup', 'mousewheel', 'keydown'],\r\n    debounce: 500\r\n  })\r\n\r\n  /**\r\n   * Handler for when the mouse has been moved.\r\n   * @param {*} event - the event of when the mouse has been moved\r\n   */\r\n  const onMouseMoveHandler = (event) => {\r\n    //TODO: fix fine rendering issue\r\n    if(mouseCoordinates){\r\n      // console.log(\"mouse move\", e);\r\n      // console.log(\"drawing the globe coarse\");\r\n      var currentMouseCoordinates = [event.screenX, event.screenY];\r\n      var scalingFactor = 3.0 * getRealScale()/200.0;\r\n      var movedCoordinates = [oldCoordinates[0] + (currentMouseCoordinates[0] - mouseCoordinates[0])/scalingFactor, oldCoordinates[1] - (currentMouseCoordinates[1] - mouseCoordinates[1])/scalingFactor];\r\n      movedCoordinates[1] = movedCoordinates[1] < -90 ? -90 :\r\n        movedCoordinates[1] > 90 ?  90 : movedCoordinates[1];\r\n      // projection.rotate(movedCoordinates);\r\n      setNewCoordinates(movedCoordinates);\r\n      setIsMove(true);\r\n      setIsDrag(true);\r\n      drawGlobe(movedCoordinates, true);\r\n      // console.log(\"mouse moved while dragged\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler when the mouse click is now up.\r\n   * @param {*} event - the event of when the mouse click is now up\r\n   */\r\n  const onMouseUpHandler = (event) => {\r\n    //TODO: fix fine rendering issue\r\n    // console.log(\"mouseuphandler activated\");\r\n    if(newCoordinates){\r\n      // setMouseCoordinates(null);\r\n      setOldCoordinates(newCoordinates);\r\n      setNewCoordinates(null);\r\n    }\r\n    setIsDrag(false);\r\n    setMouseCoordinates(null);\r\n    console.log(\"mouse up done\");\r\n  };\r\n\r\n  /**\r\n   * Draws a sphere.\r\n   * @param {*} svg - the svg used to draw the sphere.\r\n   * @param {boolean} isDaylight - the parameter for night time styles\r\n   */\r\n  const drawSphere = (svg, isDaylight) => {\r\n    svg\r\n    .selectAll(\".sphere\")\r\n    .data([{type: \"Sphere\"}])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"sphere\")\r\n    .attr(\"fill\", isDaylight ? \"#dde\" : \"#1c458c\")\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Draws the grid.\r\n   * @param {*} svg - the svg used to draw the graticule.\r\n   * @param {boolean} isDaylight - the parameter for night time styles.\r\n   */\r\n  const drawGraticule = (svg, isDaylight) => {\r\n    const graticule = d3.geoGraticule10();\r\n    svg\r\n    .selectAll(\".mesh\")\r\n    .data([graticule])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"mesh\")\r\n    .attr(\"fill-opacity\",\"0\")\r\n    .attr(\"stroke\", isDaylight ? \"#ccf\" : \"gray\")\r\n    .attr(\"stroke-opacity\", \"0.5\")\r\n    .attr(\"stroke-width\", isDaylight ? 1 : 0.3)\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    })\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the land.\r\n   * @param {*} svg - the svg used to draw the land\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   * @param {boolean} isDaylight - the parameter for night time styles\r\n   */\r\n  const drawLand = (svg, isCoarse, isDaylight) => {\r\n    //Using local json data that is of type Topology\r\n    const land = isCoarse ? landCoarse.features : landFine.features;\r\n    svg\r\n    .selectAll(\".country\")\r\n    .data(land)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"country\")\r\n    .attr(\"fill\", isDaylight ? \"#edd\" : \"#f5c684\")\r\n    .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n    .attr(\"stroke-width\", 0.5)\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    })\r\n    .raise();\r\n\r\n    //Using external json data that is of type Topology\r\n    // d3.json(\"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-10m.json\").then(res => {\r\n    //     const countries1 = topojson.feature(isCoarse ? landCoarse : res, isCoarse ? landCoarse.objects.land : res.objects.land).features;\r\n    //     console.log(countries1);\r\n    //     svg\r\n    //     .selectAll(\".country\")\r\n    //     .data(countries1)\r\n    //     .join(\"path\")\r\n    //     .attr(\"id\", feature => console.log(feature))\r\n    //     .attr(\"class\", \"country\")\r\n    //     .attr(\"fill\", feature => \"#edd\")//daytime\r\n    //     // .attr(\"fill\", feature => \"#114\")//nighttime\r\n    //     .attr(\"stroke\", feature => \"#faa\")//daytime\r\n    //     // .attr(\"stroke\", feature => \"#004\")//nighttime\r\n    //     .attr(\"d\", feature => pathGenerator(feature));\r\n    // });\r\n\r\n    //Using local json data that is of type FeatureCollection\r\n    // svg\r\n    //     .selectAll(\".country\")\r\n    //     .data(dataCoarse.features)\r\n    //     .join(\"path\")\r\n    //     .attr(\"class\", \"country\")\r\n    //     // .attr(\"fill\", feature => \"#edd\")//daytime\r\n    //     .attr(\"fill\", feature => \"#114\")//nighttime\r\n    //     // .attr(\"stroke\", feature => \"#faa\")//daytime\r\n    //     .attr(\"stroke\", feature => \"#004\")//nighttime\r\n    //     .attr(\"d\", feature => pathGenerator(feature));\r\n  };\r\n\r\n  /**\r\n   * Draws the land outline.\r\n   * @param {*} svg - the svg used to draw the land outline\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   * @param {boolean} isDaylight - the parameter for night time styles\r\n   */\r\n  const drawLandOutline = (svg, isCoarse, isDaylight) => {\r\n    //Using local json data that is of type Topology\r\n    const land = isCoarse ? landCoarse.features : landFine.features;\r\n    svg\r\n    .selectAll(\".countryOutline\")\r\n    .data(land)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"countryOutline\")\r\n    .attr(\"fill-opacity\", \"0\")\r\n    .attr(\"stroke\", \"#b89463\")\r\n    .attr(\"stroke-width\", 0.3)\r\n    // .attr(\"stroke-opacity\", \"0.8\")\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    })\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the lakes.\r\n   * @param {*} svg - the svg used to draw the land\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   * @param {boolean} isDaylight - the parameter for night time styles\r\n   */\r\n  const drawLakes = (svg, isCoarse, isDaylight) => {\r\n    const lakes = isCoarse ? lakesCoarse.features :lakesFine.features;\r\n    svg\r\n    .selectAll(\".lakes\")\r\n    .data(lakes)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"lakes\")\r\n    .attr(\"fill\", isDaylight ? \"#edd\" : \"#1c458c\")\r\n    .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n    .attr(\"stroke-width\", 0.5)\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .raise()\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Draws the lake outline.\r\n   * @param {*} svg - the svg used to draw the lake outline\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   * @param {boolean} isDaylight - the parameter for night time styles\r\n   */\r\n  const drawLakesOutline = (svg, isCoarse, isDaylight) => {\r\n    const lakes = isCoarse ? lakesCoarse.features :lakesFine.features;\r\n    svg\r\n    .selectAll(\".lakesOutline\")\r\n    .data(lakes)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"lakesOutline\")\r\n    .attr(\"fill-opacity\", \"0\")\r\n    .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n    .attr(\"stroke-width\", 0.3)\r\n    .attr(\"d\", feature => pathGenerator(feature))\r\n    .raise()\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Draws city lights based on population sizes in cities.\r\n   * @param {*} svg - the svg used to draw city lights\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   */\r\n  const drawLights = (svg, isCoarse) => {\r\n    if(isCoarse){\r\n      svg\r\n      .selectAll(\".lights\")\r\n      .data(lightsCoarse)\r\n      .join(\"path\")\r\n      .attr(\"class\", \"lights\")\r\n      .style(\"fill\", \"#ff8\")\r\n      .attr(\"fill-opacity\",\"0.4\")\r\n      .attr(\"d\", cityElement => pathGenerator(circle.center([parseFloat(cityElement[3]), parseFloat(cityElement[2])]).radius(getCityRadius(cityElement[0]))()))\r\n      .raise();\r\n    }else{\r\n      svg\r\n        .selectAll(\".lights\")\r\n        .data(lightsFine)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"lights\")\r\n        .style(\"fill\", \"#ff8\")\r\n        .attr(\"fill-opacity\",\"0.4\")\r\n        .attr(\"d\", cityElement => pathGenerator(circle.center(cityElement.geometry.coordinates).radius(getCityRadius(cityElement.fields.population))()))\r\n        .raise();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Draws the landmarks.\r\n   * @param {*} svg - the svg used to draw the landmarks\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawLandmarks = (svg, isDaylight) => {\r\n    // Format of one element of data\r\n    //   {\r\n    //     id: \"landmark_1\",\r\n    //     landmark_uid: 1,\r\n    //     name: \"Manila / Marikina\",\r\n    //     description: \"First Hometown. Revisited 2011, 2013, 2017, 2018, and 2019.\",\r\n    //     coordinates: [120.9842, 14.5995]\r\n    //   }\r\n    svg\r\n    .selectAll(\".landmarks\")\r\n    .data(landmarks)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"landmarks\")\r\n    .attr(\"id\", landmark => `${landmark.id}`)\r\n    .style(\"fill\", \"black\")\r\n    .style(\"stroke\", \"white\")\r\n    .attr(\"stroke-width\", 0.2)\r\n    .attr(\"fill-opacity\",\"0.3\")\r\n    .on(\"mouseover\", (mouseEvent, item) => {\r\n      d3.select(`#${item.id}`)\r\n      .style(\"fill\", \"red\")\r\n      .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.3)()));\r\n    } )\r\n    .on(\"mouseout\", (mouseEvent, item) => {\r\n      d3.select(`#${item.id}`)\r\n      .style(\"fill\", isDaylight ? \"black\" : \"black\")\r\n      .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n    } )\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      landmarkHandler(true, item);\r\n    })\r\n    .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the current selected landmark.\r\n   * @param {*} svg - the svg used to draw the current selected landmark\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawCurrentLandmark = (svg, isDaylight) => {\r\n    // console.log(\"this is the current landmark from draw landmark\", currentLandmark);\r\n    //format of one element of data\r\n    // {\r\n    //     coordinates: [0, 0],\r\n    //     isVisible: false\r\n    // }\r\n    svg\r\n    .selectAll(\".currentLandmark\")\r\n    .data([currentLandmark])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"currentLandmark\")\r\n    .attr(\"id\", landmark => `current_${landmark.landmark_uid}`)\r\n    .style(\"fill\", \"red\")\r\n    .attr(\"fill-opacity\",\"0.3\")\r\n    .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n    .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.2)()))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the current world night time.\r\n   * @param {*} svg - the svg used to draw the world night time\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawCurrentShadow = (svg, isDaylight) => {\r\n    var nightLongitude = subSolarCoordinates[0] + 180;\r\n    var nightLatitude = -subSolarCoordinates[1];\r\n    var opacity = \"0.3\";\r\n    svg\r\n    .selectAll(\".shadow\")\r\n    .data([90, 90-6, 90-12, 90-18])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"shadow\")\r\n    .attr(\"id\", `shadow`)\r\n    .style(\"fill\", \"black\")\r\n    .attr(\"fill-opacity\",opacity)\r\n    .attr(\"d\", data => pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(data)()))\r\n    .raise()\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Draws the current new landmark.\r\n   * @param {*} svg - the svg used to draw the current new landmark\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawTempLandmark = (svg, isDaylight) => {\r\n    //format of one element of data\r\n    // {\r\n    //     coordinates: [0, 0],\r\n    //     isVisible: false\r\n    //   }\r\n    svg\r\n    .selectAll(\".newLandmark\")\r\n    .data([newLandmark])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"newLandmark\")\r\n    .attr(\"id\", `newLandmark`)\r\n    .style(\"fill\", \"red\")\r\n    .attr(\"fill-opacity\",\"0.5\")\r\n    .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n    .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the current modified landmark.\r\n   * @param {*} svg - the svg used to draw the current modified landmark\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawEditLandmark = (svg, isDaylight) => {\r\n    //format of one element of data\r\n    // {\r\n    //     coordinates: [0, 0],\r\n    //     isVisible: false\r\n    //   }\r\n    svg\r\n    .selectAll(\".editLandmark\")\r\n    .data([editLandmark])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"editLandmark\")\r\n    .attr(\"id\", landmark => `edit`)\r\n    .style(\"fill\", \"orange\")\r\n    .attr(\"fill-opacity\",\"0.5\")\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"stroke\",\"black\")\r\n    .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n    .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the arcs.\r\n   * @param {*} svg - the svg used to draw the arcs\r\n   * @param {boolean} isDayTime - the parameter used for night time styles\r\n   */\r\n  const drawArcs = (svg, isDayTime) => {\r\n    //The format of one element of data is \r\n    // { \r\n    //   type: \"LineString\", \r\n    //   coordinates: [[0, 0], ...], \r\n    //   id:\"path_x\", \r\n    //   path_uid: x, \r\n    //   isAirPlane: true\r\n    // }\r\n    svg\r\n    .selectAll(\".arcOutline\")\r\n    .data(paths)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"arcOutline\")\r\n    // .transition()\r\n    .attr(\"fill-opacity\", \"0\")\r\n    .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.5 : 1)\r\n    .attr(\"stroke\", feature => isDayTime ? \"black\" : \"white\")\r\n    .attr(\"stroke-width\", feature => feature.isAirPlane ? 0.8 : 0.2)\r\n    .attr(\"d\", feature =>pathGenerator(feature))\r\n    .raise()\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    })\r\n    .raise();\r\n      \r\n    svg\r\n    .selectAll(\".arc\")\r\n    .data(paths)\r\n    .join(\"path\")\r\n    .attr(\"class\", \"arc\")\r\n    // .transition()\r\n    .attr(\"fill-opacity\", \"0\")\r\n    .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.5 : 1)\r\n    .attr(\"stroke\", feature => isDayTime ? \"black\" : \"black\")\r\n    .attr(\"stroke-width\", feature => feature.isAirPlane ? 1 : 0.5)\r\n    .style(\"stroke-dasharray\", feature => feature.isAirPlane ? (\"15, 3\") : (\"3\", \"3\"))\r\n    .attr(\"d\", feature =>pathGenerator(feature))\r\n    .raise()\r\n    .on(\"click\", (mouseEvent, item) => {\r\n      if(currentLandmark.isVisible){\r\n        landmarkHandler(false, null);\r\n      }\r\n    })\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the current new path.\r\n   * @param {*} svg - the svg used to draw the current new path\r\n   * @param {boolean} isDayTime - the parameter used for night time styles\r\n   */\r\n  const drawTempPath = (svg, isDayTime) => {\r\n    //format of one element of data\r\n    // {\r\n    //     type: \"LineString\", \r\n    //     coordinates: [],\r\n    //     isAirPlane: true\r\n    //   }\r\n    // console.log(newPath);\r\n    // console.log(newPath)\r\n    svg\r\n    .selectAll(\".newPath\")\r\n    .data([newPath])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"newPath\")\r\n    // .transition()\r\n    .attr(\"fill-opacity\",\"0\")\r\n    .attr(\"stroke\", feature => feature.isAirPlane ? \"red\" : \"red\")\r\n    .style(\"stroke-dasharray\", feature => feature.isAirPlane ? (\"15, 3\") : (\"3\", \"3\"))\r\n    .attr(\"stroke-opacity\", feature => 1)\r\n    .attr(\"stroke-width\", feature => 1)\r\n    .attr(\"d\", feature =>pathGenerator(feature))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the current modified path.\r\n   * @param {*} svg - the svg used to draw the current modified path\r\n   * @param {boolean} isDaylight - the parameter used for night time styles\r\n   */\r\n  const drawEditPath = (svg, isDayTime) => {\r\n    //format of one element of data\r\n    // {\r\n    //     type: \"LineString\",\r\n    //     coordinates: [],\r\n    //     isAirPlane: true\r\n    // }\r\n    svg\r\n    .selectAll(\".editPath\")\r\n    .data([editPath])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"editPath\")\r\n    .attr(\"fill-opacity\",\"0\")\r\n    .attr(\"stroke\", feature => feature.isAirPlane ? \"orange\" : \"orange\")\r\n    .style(\"stroke-dasharray\", feature => feature.isAirPlane ? (\"15, 3\") : (\"3\", \"3\"))\r\n    .attr(\"stroke-opacity\", feature => 1)\r\n    .attr(\"stroke-width\", feature => 1)\r\n    .attr(\"d\", feature =>pathGenerator(feature))\r\n    .raise();\r\n  };\r\n\r\n  /**\r\n   * Draws the scale.\r\n   * @param {*} svg - the svg used to draw the scale\r\n   */\r\n  const drawScale = (svg) => {\r\n\r\n    var lineGenerator = d3.line();\r\n    svg\r\n    .selectAll(\".scale\")\r\n    .data([1])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"scale\")\r\n    // .append('path')\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"stroke-width\", 1)\r\n    .style(\"fill-opacity\", 0)\r\n    .style(\"stroke-opacity\", 1)\r\n    .attr(\"d\", lineGenerator([[size * 0.73, size * 0.98], [size * 0.73, size * 0.98 + 10], [size * 0.73 + size/4.0, size * 0.98 + 10], [size * 0.73 + size/4.0, size * 0.98]]))\r\n    .raise();\r\n    \r\n    svg\r\n    .selectAll(\".textScale\")\r\n    .data([1])\r\n    .join(\"text\")\r\n    .attr(\"class\", \"textScale\")\r\n    .attr(\"dx\", size * 0.73 + size/8.0)\r\n    .attr(\"dy\", size * 0.98)\r\n    .style(\"text-anchor\", \"middle\")\r\n    .style(\"fill\", \"white\")\r\n    .text(`${Math.ceil(QUARTER_DIAMETER/scale * 100)/100} km`)\r\n    .raise();\r\n  }\r\n\r\n  /**\r\n   * Draws the globe.\r\n   * @param {Array<number>} rotateParams - the rotation parameters to position the globe\r\n   * @param {number} scaleParams - the scale parameter to scale the globe\r\n   * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n   */\r\n  const drawGlobe = (rotateParams, isCoarse) => {\r\n    const svg = d3.select(svgRef.current);\r\n    projection.rotate(rotateParams).scale(getRealScale());\r\n\r\n    var isDaylight = false;\r\n    \r\n    drawSphere(svg, isDaylight);\r\n    drawLand(svg, isCoarse, isDaylight);\r\n    drawLakes(svg, isCoarse, isDaylight);\r\n    drawCurrentShadow(svg, isDaylight);\r\n\r\n    drawLandOutline(svg, isCoarse, isDaylight);\r\n    drawLakesOutline(svg, isCoarse, isDaylight);\r\n\r\n    if(!isDaylight){\r\n      // drawLights(svg, false);\r\n    }\r\n    \r\n    drawGraticule(svg, isDaylight);    \r\n\r\n    drawCurrentLandmark(svg, isDaylight);\r\n    drawArcs(svg, isDaylight);\r\n    drawTempPath(svg, isDaylight);\r\n    drawTempLandmark(svg, isDaylight);\r\n    drawEditPath(svg, isDaylight);\r\n    drawEditLandmark(svg, isDaylight);\r\n    drawLandmarks(svg, isDaylight);\r\n\r\n    drawScale(svg);\r\n  };\r\n\r\n  const getRealScale = () => {\r\n    return scale * size/2.0;\r\n  }\r\n\r\n  /**\r\n   * Handles the mouse wheel event.\r\n   * @param {*} event - the event triggered\r\n   */\r\n  const mouseWheelHandler = (event) => {\r\n    setScale(prev => {\r\n      let newVal = prev - event.deltaY/110;\r\n      return Math.min(Math.max(newVal, 1), 25.484);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Handles the zoom in event.\r\n   */\r\n  const zoomInHandler = () => {\r\n    setScale(prevVal => Math.min(prevVal + 1, 25.484));\r\n  }\r\n\r\n  /**\r\n   * Handles the zoom out event.\r\n   */\r\n  const zoomOutHandler = () => {\r\n    setScale(prevVal => Math.max(prevVal - 1, 1));\r\n  }\r\n\r\n  /**\r\n   * Renders the external message while rendering the globe.\r\n   * @param {string} message \r\n   * @param {boolean} isCoarse \r\n   */\r\n  const renderExternalUpdate = (message, isCoarse) => {\r\n    setIsLoading(true);\r\n    setRenderText(message);\r\n    setTimeout(() => {\r\n      drawGlobe(oldCoordinates, isCoarse);\r\n      setIsLoading(false);\r\n      if(isCoarse){\r\n        setIsMove(true);\r\n      }\r\n    }, isCoarse ? 100 : 800);\r\n  }\r\n\r\n  //Use effect hook.\r\n  useEffect(() => {\r\n    drawGlobe(oldCoordinates, true);\r\n    setIsMove(true);\r\n  }, [scale])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"subsolar\");\r\n      renderExternalUpdate(\"Updating earth shadow...\", isDrag);\r\n    }\r\n  }, [subSolarCoordinates])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"current landmark updated\", currentLandmark);\r\n      renderExternalUpdate(\"Rendering clicked landmark...\", true);\r\n    }\r\n  }, [currentLandmark.isVisible, currentLandmark.coordinates])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"else\");\r\n      renderExternalUpdate(\"Rendering for resized window...\", false);\r\n    }\r\n  }, [size])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"newLandmark\", newLandmark);\r\n      renderExternalUpdate(\"Rendering new landmark...\", true);\r\n    }\r\n  }, [newLandmark])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"edit landmark\");\r\n      renderExternalUpdate(\"Rendering edited landmark...\", true);\r\n    }\r\n  }, [editLandmark])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"edit path\");\r\n      renderExternalUpdate(\"Rendering edited path...\", true);\r\n    }\r\n  }, [editPath.coordinates, editPath.isAirPlane])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"new path\");\r\n      renderExternalUpdate(\"Rendering new path...\", true);\r\n    }\r\n  }, [newPath])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"paths\");\r\n      renderExternalUpdate(\"Updating paths...\", false);\r\n    }\r\n  }, [paths])\r\n\r\n  useEffect(() => {\r\n    if(!isInitialLoad){\r\n      // console.log(\"else\");\r\n      renderExternalUpdate(\"Updating landmarks...\", false);\r\n    }\r\n  }, [landmarks])\r\n\r\n  useEffect(() => {\r\n    console.log(\"paths\");\r\n    setIsLoading(true);\r\n    setRenderText(\"Rendering globe...\");\r\n    setTimeout(() => {\r\n      drawGlobe(oldCoordinates, scale, false);\r\n      setIsLoading(false);\r\n      setIsInitialLoad(false);\r\n    }, 800);\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <svg width={size} height={size} ref={svgRef}\r\n        onMouseDown={onMouseDownHandler} \r\n        onMouseMove={onMouseMoveHandler} \r\n        onMouseUp={onMouseUpHandler}\r\n        onWheel={mouseWheelHandler}>\r\n      </svg>\r\n      <IconButton  size=\"medium\" variant=\"contained\" className={classes.zoomInButton} onClick={zoomInHandler}>\r\n        <AddIcon/>\r\n      </IconButton>\r\n      <IconButton  size=\"medium\" variant=\"contained\" className={classes.zoomOutButton} onClick={zoomOutHandler}>\r\n        <RemoveIcon/>\r\n      </IconButton>\r\n      {isLoading && <Typography className={classes.renderText}>{renderText}</Typography>}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Globe;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction LandmarkInfo({ currentLandmark, value, index}) {\r\n  /**\r\n   * Gets the landmark information.\r\n   */\r\n  const getLandmarkInfoContent = () => {\r\n    if (currentLandmark.isVisible) {\r\n      var description = currentLandmark.description;\r\n      var descriptionArray = description.split(\"\\n\");\r\n      return (\r\n        <div>\r\n          <Typography variant=\"h4\">\r\n            {currentLandmark.name}\r\n          </Typography>\r\n          <Typography variant=\"h6\" paragraph>\r\n            Latitude: {currentLandmark.coordinates[1]}, Longitude: {currentLandmark.coordinates[0]}\r\n          </Typography>\r\n          {\r\n            descriptionArray.map(element => {\r\n              return (\r\n                <Typography variant=\"h6\" paragraph>\r\n                  {element}\r\n                </Typography>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div>\r\n          <Typography variant=\"h4\">\r\n            Click on a Landmark\r\n          </Typography>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div hidden={value !== index} style={{margin: \"20px\"}}>\r\n      <Typography variant=\"h5\">\r\n        Landmark Information\r\n      </Typography>\r\n      <br/>\r\n      {getLandmarkInfoContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandmarkInfo;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input, Typography, CircularProgress } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nfunction NewLandmarkTab({value, index, invalidateAuth, createLandmark, updateNewLandmark}) {\r\n\r\n  //States\r\n  const [landmarkName, setLandmarkName] = useState(\"\");\r\n  const [landmarkLatitude, setLandmarkLatitude] = useState(\"\");\r\n  const [landmarkLongitude, setLandmarkLongitude] = useState(\"\");\r\n  const [landmarkDescription, setLandmarkDescription] = useState(\"\");\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  /**\r\n   * Handles the description change\r\n   * @param {*} event - the text event \r\n   */\r\n  const handleDescriptionChange = (event) => {\r\n    setLandmarkDescription(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the name change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setLandmarkName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles the latitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLatitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      updateNewLandmark(false, null);\r\n    }\r\n    if(Math.abs(event.target.value) <= 90){\r\n      setLandmarkLatitude(parseFloat(event.target.value));\r\n\r\n      if(landmarkLongitude !== \"\" && event.target.value !== \"\"){\r\n        updateNewLandmark(true, [landmarkLongitude, parseFloat(event.target.value)]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the longitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLongitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      updateNewLandmark(false, null);\r\n    }\r\n    if(Math.abs(event.target.value) <= 180){\r\n      setLandmarkLongitude(parseFloat(event.target.value));\r\n\r\n      if(event.target.value !== \"\" && landmarkLatitude !== \"\"){\r\n        updateNewLandmark(true, [parseFloat(event.target.value), landmarkLatitude]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the add landmark event.\r\n   */\r\n  const handleAddLandmark = () => {\r\n    if(!(landmarkName === \"\" || landmarkLatitude === \"\" || landmarkLongitude === \"\")){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        landmarkName: landmarkName,\r\n        landmarkDescription: landmarkDescription,\r\n        latitude: parseFloat(landmarkLatitude),\r\n        longitude: parseFloat(landmarkLongitude)\r\n      }\r\n  \r\n      fetch(`/landmarks`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setLandmarkName(\"\");\r\n        setLandmarkLatitude(\"\");\r\n        setLandmarkLongitude(\"\");\r\n        setLandmarkDescription(\"\");\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          createLandmark({\r\n            id: `landmark_${res.landmark_uid}`,\r\n            path_uid: res.landmark_uid,\r\n            name: landmarkName,\r\n            description: landmarkDescription,\r\n            coordinates: [parseFloat(landmarkLongitude), parseFloat(landmarkLatitude)]\r\n          });\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());//TODO: check if processing needs to be set to false here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index} style={{margin: \"20px\"}}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Landmark\r\n      </Typography>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLatitude\" \r\n        placeholder=\"Enter value between -90 to 90\" \r\n        name=\"Latitude\"\r\n        value={landmarkLatitude}\r\n        onChange={handleLatitudeChange}/>\r\n      </FormControl>\r\n      <br/>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLongitude\" \r\n        placeholder=\"Enter value between -180 to 180\" \r\n        name=\"Longitude\"\r\n        value={landmarkLongitude}\r\n        onChange={handleLongitudeChange}/>\r\n      </FormControl>\r\n      <br/>\r\n      <TextField \r\n        id=\"standard-basic\" \r\n        label=\"Landmark Name\" \r\n        placeholder=\"e.g. Vancouver, BC, Canada\" \r\n        value={landmarkName}\r\n        onChange={handleNameChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <TextField\r\n        id=\"standard-multiline-static\"\r\n        label=\"Description\"\r\n        placeholder=\"Enter a description about the landmark\" \r\n        multiline\r\n        rows={4}\r\n        value={landmarkDescription}\r\n        onChange={handleDescriptionChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddLandmark}>\r\n        {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n        {!isProcessing && 'Add Landmark'}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewLandmarkTab;","//Imports from libraries\r\nimport React, { useState } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Input, CircularProgress, Paper, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport AirplanemodeActiveIcon from '@material-ui/icons/AirplanemodeActive';\r\nimport CommuteIcon from '@material-ui/icons/Commute';\r\n\r\nfunction NewPathTab({value, index, invalidateAuth, updateNewPath, createPath}) {\r\n\r\n  //NewPathTab states\r\n  const [coordinates, setCoordinates] = useState([]);\r\n  const [isAirplane, setIsAirplane] = useState(true);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  /**\r\n   * Handles the name change of the edited landmark.\r\n   * @param {*} event - the event for the name change\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new node.\r\n   */\r\n  const handleNewNode = () => {\r\n    setCoordinates(prevArray => [...prevArray, [\"\", \"\"]]);\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new path.\r\n   */\r\n  const handleNewPath = () => {\r\n    var isNodesPopulated = true;\r\n\r\n    for(var i = 0; i < coordinates.length; i++){\r\n      if(coordinates[i][0] === \"\" || coordinates[i][1] === \"\"){\r\n        isNodesPopulated = false;\r\n      }\r\n    }\r\n    \r\n    if(isNodesPopulated && coordinates.length >= 2){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        coordinates: [...coordinates], \r\n        isAirPlane: isAirplane,\r\n        path_name: name\r\n      }\r\n  \r\n      fetch(`/paths`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setCoordinates([]);\r\n        setName(\"\");\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          createPath({\r\n            type: \"LineString\", \r\n            coordinates: [...coordinates], \r\n            id:`path_${res.path_uid}`,\r\n            path_uid: res.path_uid,\r\n            isAirPlane: isAirplane,\r\n            path_name: name\r\n          });\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles deleting a node.\r\n   * @param {*} index - the index of the node to delete\r\n   */\r\n  const handleDeleteNode = (index) => {\r\n    var newNodes = [...coordinates];\r\n    newNodes.splice(index, 1);\r\n\r\n    setCoordinates(newNodes);\r\n    updateTempPath(newNodes);\r\n  };\r\n\r\n  /**\r\n   * Updates the temporary path.\r\n   * @param {*} newElements - the coordinates used to show the temporary path\r\n   * @param {*} newIsAirplane - (optional) the boolean airplane state\r\n   */\r\n  const updateTempPath = (newElements, newIsAirplane) => {\r\n    var isAirplaneVal = newIsAirplane !== undefined ? newIsAirplane : isAirplane;\r\n\r\n    var newTempPath = {\r\n      type: \"LineString\", \r\n      coordinates: [],\r\n      isAirPlane: isAirplaneVal\r\n    };\r\n\r\n    for(var i = 0; i < newElements.length; i++){\r\n      var node = newElements[i];\r\n      var lat = node[1];\r\n      var long = node[0];\r\n\r\n      newTempPath.coordinates.push([long !== \"\" ? long : 0, lat !== \"\" ? lat : 0])\r\n    }\r\n    updateNewPath(newTempPath);\r\n  };\r\n\r\n  /**\r\n   * Handles a latitude field being changed.\r\n   * @param {*} event - the text event \r\n   * @param {number} index - the index of the latitude to change\r\n   */\r\n  const onElementLatitudeChange = (event, index) => {\r\n    var newElements = [...coordinates];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 90){\r\n      item[1] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[1] = event.target.value;\r\n    }\r\n    \r\n    newElements[index] = item;\r\n\r\n    setCoordinates(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles a longitude field being changed.\r\n   * @param {*} event - the text event\r\n   * @param {number} index - the index of the node\r\n   */\r\n  const onElementLongitudeChange = (event, index) => {\r\n    var newElements = [...coordinates];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 180){\r\n      item[0] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[0] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n    \r\n    setCoordinates(newElements);\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles the switch state being changed.\r\n   * @param {*} event - the switch event\r\n   */\r\n  const handleSwitchChange = (event) => {\r\n    setIsAirplane(event.target.checked);\r\n    updateTempPath(coordinates, event.target.checked);\r\n  };\r\n\r\n  /**\r\n   * Gets the view for the finish button.\r\n   */\r\n  const getFinishButton = () => {\r\n    if(coordinates.length >= 2){\r\n      return(\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleNewPath} fullWidth>\r\n          {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n          {!isProcessing && 'Finish Path'}\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index} style={{margin: \"20px\"}}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Path\r\n      </Typography>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch \r\n            checked={isAirplane} \r\n            onChange={handleSwitchChange} \r\n            name=\"checkedA\" \r\n            checkedIcon={<AirplanemodeActiveIcon/>}\r\n            icon={<CommuteIcon/>}/>\r\n        }\r\n        label=\"Travel Type\"/>\r\n      <TextField \r\n        id=\"standard-basic\" \r\n        label=\"Path Name\" \r\n        placeholder=\"e.g. LAX - HKG or California Trip 1\" \r\n        value={name}\r\n        onChange={handleNameChange}\r\n        fullWidth/>\r\n      <Paper style={{maxHeight: \"50vh\", overflow: 'auto'}}>\r\n        {\r\n          coordinates.map((element, index) => {\r\n            var latId = `nodeLatitude_${index}`;\r\n            var longitudeId = `nodeLongitude_${index}`;\r\n            var deleteBtnId = `deleteBtn_${index}`;\r\n\r\n            return (\r\n              <form>\r\n                <br/>\r\n                <Typography>Node {index + 1}</Typography>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor={latId}>Latitude</InputLabel>\r\n                  <Input \r\n                    type=\"number\" \r\n                    id={latId}\r\n                    placeholder=\"Enter value between -90 to 90\" \r\n                    name=\"Latitude\"\r\n                    value={element[1]}\r\n                    onChange={(event) => onElementLatitudeChange(event, index)} />\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                <InputLabel htmlFor={longitudeId}>Longitude</InputLabel>\r\n                <Input \r\n                  type=\"number\" \r\n                  id={longitudeId}\r\n                  placeholder=\"Enter value between -180 to 180\" \r\n                  name=\"Longitude\"\r\n                  value={element[0]}\r\n                  onChange={(event) => onElementLongitudeChange(event, index)} />\r\n                </FormControl>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => handleDeleteNode(index)} fullWidth id={deleteBtnId}>\r\n                  Delete Node {index + 1}\r\n                </Button>\r\n              </form>\r\n            );\r\n          })\r\n        }\r\n      </Paper>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleNewNode} fullWidth> \r\n        Add Node\r\n      </Button>\r\n      \r\n      {getFinishButton()}\r\n\r\n      <br/>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewPathTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input, Typography, CircularProgress, Paper, FormControl, InputLabel, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MyLocationIcon from '@material-ui/icons/MyLocation';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nfunction EditLandmarksTab({value, index, invalidateAuth, updateLandmark, deleteLandmark, landmarks, toInformationTab, updateEditLandmark}) {\r\n\r\n  //States\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editId, setEditId] = useState(-1);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [editName, setEditName] = useState(\"\");\r\n  const [editDescription, setEditDescription] = useState(\"\");\r\n  const [editLongitude, setEditLongitude] = useState(\"\");\r\n  const [editLatitude, setEditLatitude] = useState(\"\");\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n\r\n  /**\r\n   * Handles the latitude change of the edited landmark.\r\n   * @param {*} event - the event for the latitude change\r\n   */\r\n  const handleLatitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      updateEditLandmark(false, null);\r\n    }\r\n\r\n    if(Math.abs(event.target.value) <= 90){\r\n      setEditLatitude(event.target.value);\r\n      if(editLongitude !== \"\" && event.target.value !== \"\"){\r\n        updateEditLandmark(true, [editLongitude, parseFloat(event.target.value)]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the longitude change of the edited landmark.\r\n   * @param {*} event - the event for the longitude change\r\n   */\r\n  const handleLongitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      updateEditLandmark(false, null);\r\n    }\r\n\r\n    if(Math.abs(event.target.value) <= 180){\r\n      setEditLongitude(event.target.value);\r\n      if(editLatitude !== \"\" && event.target.value !== \"\"){\r\n        updateEditLandmark(true, [parseFloat(event.target.value), editLatitude]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the name change of the edited landmark.\r\n   * @param {*} event - the event for the name change\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setEditName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles the description change of the edited landmark.\r\n   * @param {*} event - the event for the desription change\r\n   */\r\n  const handleDescriptionChange = (event) => {\r\n    setEditDescription(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles editing the landmark.\r\n   */\r\n  const handleEditLandmark = () => {\r\n    if(editId !== -1 && editName !== \"\" && editLongitude !== \"\" && editLatitude !== \"\"){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        landmark_uid: editId,\r\n        name: editName,\r\n        description: editDescription,\r\n        coordinates: [editLongitude, editLatitude]\r\n      };\r\n\r\n      fetch(`/landmarks`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setIsEdit(false);\r\n        setIsProcessing(false);\r\n        setTimeout(() => {\r\n          updateLandmark({\r\n            landmark_uid: editId,\r\n            name: editName,\r\n            description: editDescription,\r\n            coordinates: [editLongitude, editLatitude]\r\n          }, editIndex);\r\n          setEditIndex(-1);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n    else{\r\n      alert('A field is missing! Cannot update landmark.')\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles canceling out of the edit mode.\r\n   */\r\n  const handleCancelEdit = () => {\r\n    updateEditLandmark(false, null);\r\n    setIsEdit(false);\r\n    setEditIndex(-1);\r\n  };\r\n\r\n  /**\r\n   * Handles changing to the edit landmark mode.\r\n   * @param {*} landmark - the landmark to edit\r\n   * @param {number} index - the index of the landmark \r\n   */\r\n  const handleEditLandmarkMode = (landmark, index) => {\r\n    setIsEdit(true);\r\n    setEditId(landmark.landmark_uid);\r\n    setEditName(landmark.name);\r\n    setEditDescription(landmark.description);\r\n    setEditLongitude(landmark.coordinates[0]);\r\n    setEditLatitude(landmark.coordinates[1]);\r\n    setEditIndex(index);\r\n    updateEditLandmark(true, [landmark.coordinates[0], landmark.coordinates[1]]);\r\n  };\r\n\r\n  /**\r\n   * Handles deleting the landmark.\r\n   * @param {*} landmark - the landmark to delete\r\n   * @param {number} index - the index of the landmark\r\n   */\r\n  const handleDeleteLandmark = (landmark, index) => {\r\n    let isConfirmed = window.confirm(`Are you sure you want to delete this landmark?\\n\\n${landmark.name}\\nlongitude:${landmark.coordinates[0]}\\nlatitude:${landmark.coordinates[1]}\\n\\n${landmark.description}`);\r\n    if(isConfirmed){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        landmark_uid: landmark.landmark_uid\r\n      };\r\n      fetch(`/landmarks`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setIsProcessing(false);\r\n        setIsEdit(false);\r\n        setTimeout(() => {\r\n          deleteLandmark(landmark.landmark_uid, index);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the landmark content.\r\n   */\r\n  const getEditLandmarkContent = () => {\r\n    return (\r\n      <form>\r\n        <FormControl fullWidth>\r\n        <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n        <Input \r\n            type=\"number\" \r\n            id=\"landmarkLatitude\" \r\n            placeholder=\"Enter value between -90 to 90\" \r\n            name=\"Latitude\"\r\n            value={editLatitude}\r\n            onChange={handleLatitudeChange}/>\r\n        </FormControl>\r\n        <br/>\r\n        <FormControl fullWidth>\r\n        <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n        <Input \r\n            type=\"number\" \r\n            id=\"landmarkLongitude\" \r\n            placeholder=\"Enter value between -180 to 180\" \r\n            name=\"Longitude\"\r\n            value={editLongitude}\r\n            onChange={handleLongitudeChange}/>\r\n        </FormControl>\r\n        <br/>\r\n        <TextField \r\n            id=\"standard-basic\" \r\n            label=\"Landmark Name\" \r\n            placeholder=\"e.g. Vancouver, BC, Canada\" \r\n            value={editName}\r\n            onChange={handleNameChange}\r\n            fullWidth/>\r\n        <br/>\r\n        <TextField\r\n            id=\"standard-multiline-static\"\r\n            label=\"Description\"\r\n            placeholder=\"Enter a description about the landmark\" \r\n            multiline\r\n            rows={12}\r\n            maxHeight=\"500px\"\r\n            value={editDescription}\r\n            onChange={handleDescriptionChange}\r\n            fullWidth/>\r\n        <br/>\r\n        <br/>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleEditLandmark}>\r\n            {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n            {!isProcessing && 'Finish Edit'}\r\n        </Button>\r\n        \r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleCancelEdit}>\r\n            {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n            {!isProcessing && 'Cancel Edit'}\r\n        </Button>\r\n    </form>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper hidden={value !== index} square style={{padding: \"20px\", maxHeight: \"calc(100vh - 50px)\", overflow: 'auto'}} elevation={0}>\r\n      <Typography variant=\"h5\">\r\n        {isEdit ? \"Edit Landmark\" : \"Landmark List\"}\r\n      </Typography>\r\n      {\r\n        !isEdit && landmarks.map((element, index) => {\r\n          return(\r\n            <Paper style={{marginTop: \"10px\", marginBottom: \"10px\", padding:\"10px\"}}  elevation={2}>\r\n              <IconButton>\r\n                <MyLocationIcon/>\r\n              </IconButton>\r\n              <IconButton onClick={() => toInformationTab(element)}>\r\n                <InfoIcon/>\r\n              </IconButton>\r\n              <IconButton color=\"primary\" onClick={() => handleEditLandmarkMode(element, index)}>\r\n                <EditIcon/>\r\n              </IconButton>\r\n              <IconButton color=\"secondary\" onClick={() => handleDeleteLandmark(element, index)}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\">\r\n                {element.name}\r\n              </Typography>\r\n            </Paper>\r\n          );\r\n        })\r\n      }\r\n      {\r\n        isEdit && getEditLandmarkContent()\r\n      }\r\n    </Paper>\r\n  );\r\n}\r\n \r\nexport default EditLandmarksTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input, Typography, CircularProgress, Paper, FormControl, InputLabel, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MyLocationIcon from '@material-ui/icons/MyLocation';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport AirplanemodeActiveIcon from '@material-ui/icons/AirplanemodeActive';\r\nimport CommuteIcon from '@material-ui/icons/Commute';\r\n\r\nfunction EditPathsTab({value, index, invalidateAuth, paths, deletePath, updatePath, updateEditPath}) {\r\n\r\n  //States\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [editName, setEditName] = useState(\"\");\r\n  const [editId, setEditId] = useState(-1);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [coordinates, setCoordinates] = useState([]);\r\n  const [isAirPlane, setIsAirPlane] = useState(false);\r\n\r\n  /**\r\n   * Handles a latitude field being changed.\r\n   * @param {*} event - the text event \r\n   * @param {number} index - the index of the node\r\n   */\r\n  const onElementLatitudeChange = (event, index) => {\r\n    var newElements = [...coordinates];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 90){\r\n      item[1] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[1] = event.target.value;\r\n    }\r\n    \r\n    newElements[index] = item;\r\n\r\n    setCoordinates(newElements);\r\n    updateEditPath(newElements, isAirPlane);\r\n  };\r\n\r\n  /**\r\n   * Handles a longitude field being changed.\r\n   * @param {*} event - the text event\r\n   * @param {number} index - the index of the node\r\n   */\r\n  const onElementLongitudeChange = (event, index) => {\r\n    var newElements = [...coordinates];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 180){\r\n      item[0] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[0] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n    \r\n    setCoordinates(newElements);\r\n    updateEditPath(newElements, isAirPlane);\r\n  };\r\n\r\n  /**\r\n   * Handles deleting a node.\r\n   * @param {*} index - the index of the node\r\n   */\r\n  const handleDeleteNode = (index) => {\r\n    var newNodes = [...coordinates];\r\n    newNodes.splice(index, 1);\r\n    setCoordinates(newNodes);\r\n    updateEditPath(newNodes, isAirPlane);\r\n  };\r\n\r\n  /**\r\n   * Handles the name change of the edited landmark.\r\n   * @param {*} event - the event for the name change\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setEditName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles the switch state being changed.\r\n   * @param {*} event - the switch event\r\n   */\r\n  const handleSwitchChange = (event) => {\r\n    setIsAirPlane(event.target.checked);\r\n    updateEditPath(coordinates, event.target.checked);\r\n  };\r\n\r\n  /**\r\n   * Handles editing the landmark.\r\n   */\r\n  const handleEditPath = () => {\r\n    var isNodesPopulated = true;\r\n    for(var i = 0; i < coordinates.length; i++){\r\n      if(coordinates[i][0] === \"\" || coordinates[i][1] === \"\"){\r\n        isNodesPopulated = false;\r\n        break;\r\n      }\r\n    }\r\n    if(isNodesPopulated && coordinates.length >= 2){\r\n      setIsProcessing(true);\r\n      const body = {\r\n        path_uid: editId,\r\n        path_name: editName,\r\n        coordinates: coordinates,\r\n        is_airplane: isAirPlane\r\n      };\r\n      \r\n      fetch(`/paths`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setIsEdit(false);\r\n        setIsProcessing(false);\r\n        setTimeout(() => {\r\n          setEditName(\"\");\r\n          setEditId(-1);\r\n          setEditIndex(-1);\r\n          updatePath({\r\n            coordinates: coordinates,\r\n            isAirPlane: isAirPlane,\r\n            path_name: editName\r\n          }, editIndex);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n    else{\r\n      alert('A field is missing! Cannot update landmark.')\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles canceling out of the edit mode.\r\n   */\r\n  const handleCancelEdit = () => {\r\n    setIsEdit(false);\r\n    setEditId(-1);\r\n    setEditIndex(-1);\r\n    updateEditPath([], isAirPlane);\r\n  };\r\n\r\n  /**\r\n   * Handles creating a new node.\r\n   */\r\n  const handleNewNode = () => {\r\n    setCoordinates(prevVal => [...prevVal, [\"\", \"\"]]);\r\n  }\r\n\r\n  /**\r\n   * Handles changing the mode to edit.\r\n   * @param {*} path - the path to edit\r\n   * @param {number} index - the index of the path\r\n   */\r\n  const handleEditPathMode = (path, index) => {\r\n    if(isProcessing){\r\n      return;\r\n    }\r\n    setIsEdit(true);\r\n    setEditName(path.path_name);\r\n    setEditId(path.path_uid);\r\n    setEditIndex(index);\r\n    setCoordinates(path.coordinates);\r\n    setIsAirPlane(path.isAirPlane);\r\n    updateEditPath(path.coordinates, path.isAirPlane);\r\n  };\r\n\r\n  /**\r\n   * Handles deleting the landmark.\r\n   * @param {*} path - the path to delete\r\n   * @param {number} index - the index of the path\r\n   */\r\n  const handleDeletePath = (path, index) => {\r\n    if(isProcessing){\r\n      return;\r\n    }\r\n\r\n    let isConfirmed = window.confirm(`Are you sure you want to delete this path?\\n\\nname:\\n${path.path_name === null ? \"None\" : path.path_name}\\ncoordinates:\\n${path.coordinates.map((element, index) => {\r\n      return `${index + 1}. (${element[0]}, ${element[1]})\\n`;\r\n    }).join(\"\")}`);\r\n    if(isConfirmed){\r\n      setIsProcessing(true);\r\n      \r\n      const body = {\r\n        path_uid: path.path_uid\r\n      };\r\n      fetch(`/paths`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log(res);\r\n        setIsProcessing(false);\r\n        setIsEdit(false);\r\n        setTimeout(() => {\r\n          deletePath(index);\r\n        }, 500);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the edit path content.\r\n   */\r\n  const getEditPathContent = () => {\r\n    // console.log(paths);\r\n    return (\r\n      <form>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch \r\n              checked={isAirPlane} \r\n              onChange={handleSwitchChange} \r\n              name=\"checkedA\" \r\n              checkedIcon={<AirplanemodeActiveIcon/>}\r\n              icon={<CommuteIcon/>}\r\n            />\r\n          }\r\n          label=\"Travel Type\"/>\r\n        <TextField \r\n          id=\"standard-basic\" \r\n          label=\"Path Name\" \r\n          placeholder=\"e.g. LAX - HKG or California Trip 1\" \r\n          value={editName}\r\n          onChange={handleNameChange}\r\n          fullWidth/>\r\n        {\r\n          coordinates.map((element, index) => {\r\n            var latId = `nodeLatitude1_${index}`;\r\n            var longitudeId = `nodeLongitude_${index}`;\r\n            var deleteBtnId = `deleteBtn_${index}`;\r\n            return (\r\n              <Paper style={{marginTop: \"10px\", marginBottom: \"10px\", padding:\"10px\"}}  elevation={2}>\r\n                <Typography>Node {index + 1}</Typography>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor={latId}>Latitude</InputLabel>\r\n                  <Input \r\n                    type=\"number\" \r\n                    id={latId}\r\n                    placeholder=\"Enter value between -90 to 90\" \r\n                    name=\"Latitude\"\r\n                    value={element[1]}\r\n                    onChange={(event) => onElementLatitudeChange(event, index)} />\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor={longitudeId}>Longitude</InputLabel>\r\n                  <Input \r\n                    type=\"number\" \r\n                    id={longitudeId}\r\n                    placeholder=\"Enter value between -180 to 180\" \r\n                    name=\"Longitude\"\r\n                    value={element[0]}\r\n                    onChange={(event) => onElementLongitudeChange(event, index)} />\r\n                </FormControl>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => handleDeleteNode(index)} fullWidth id={deleteBtnId}>\r\n                  Delete Node {index + 1}\r\n                </Button>\r\n              </Paper>\r\n            );\r\n          })\r\n        }\r\n\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleNewNode} fullWidth> \r\n          Add Node\r\n        </Button>\r\n\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleEditPath}>\r\n          {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n          {!isProcessing && 'Finish Edit'}\r\n        </Button>\r\n        \r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleCancelEdit}>\r\n          {isProcessing && <CircularProgress size={24} color='primary' disableShrink />}\r\n          {!isProcessing && 'Cancel Edit'}\r\n        </Button>\r\n    </form>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper hidden={value !== index} square style={{padding: \"20px\", maxHeight: \"calc(100vh - 50px)\", overflow: 'auto'}} elevation={0}>\r\n      <Typography variant=\"h5\">\r\n        {isEdit ? \"Edit Path\" : \"Path List\"}\r\n      </Typography>\r\n      {\r\n        !isEdit && paths.map((element, index) => {\r\n          return(\r\n            <Paper style={{marginTop: \"10px\", marginBottom: \"10px\", padding:\"10px\"}}  elevation={2}>\r\n              <IconButton>\r\n                {isProcessing ? <CircularProgress style={{color: \"white\"}}size={24} color='secondary' disableShrink /> : <MyLocationIcon />}\r\n              </IconButton>\r\n              <IconButton color=\"primary\" onClick={() => handleEditPathMode(element, index)}>\r\n                {isProcessing ? <CircularProgress size={24} color='primary' disableShrink /> : <EditIcon />}\r\n              </IconButton>\r\n              <IconButton color=\"secondary\" onClick={() => handleDeletePath(element, index)}>\r\n                {isProcessing ? <CircularProgress size={24} color='secondary' disableShrink /> : <DeleteIcon />}\r\n              </IconButton>\r\n              <Typography variant=\"h6\">\r\n                {element.isAirPlane ? <AirplanemodeActiveIcon/> : <CommuteIcon/>} \r\n                {element.path_name === null ? \"Unnamed path\" : element.path_name}\r\n              </Typography>\r\n            </Paper>\r\n          );\r\n        })\r\n      }\r\n      {\r\n        isEdit && getEditPathContent()\r\n      }\r\n    </Paper>\r\n  );\r\n}\r\n \r\nexport default EditPathsTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport NewLandmarkTab from './NewLandmarkTab';\r\nimport NewPathTab from './NewPathTab';\r\nimport EditLandmarksTab from './EditLandmarksTab';\r\nimport EditPathsTab from './EditPathsTab';\r\n\r\nfunction OtherFeatureTab({value, index, drawerValue, invalidateAuth, updateLandmark, deleteLandmark, landmarks, toInformationTab, paths, deletePath, createLandmark, updateNewLandmark, updateEditLandmark, updateNewPath, createPath, updatePath, updateEditPath}) {\r\n  return (\r\n    <div hidden={value !== index}>\r\n      <NewLandmarkTab \r\n        value={drawerValue} \r\n        index={0}  \r\n        invalidateAuth={invalidateAuth}\r\n        createLandmark={createLandmark}\r\n        updateNewLandmark={updateNewLandmark}/>\r\n      <EditLandmarksTab \r\n        value={drawerValue} \r\n        index={1} \r\n        invalidateAuth={invalidateAuth} \r\n        toInformationTab={toInformationTab}\r\n        landmarks={landmarks}\r\n        updateLandmark={updateLandmark} \r\n        updateEditLandmark={updateEditLandmark}\r\n        deleteLandmark={deleteLandmark}/>\r\n      <NewPathTab\r\n        value={drawerValue} \r\n        index={2}\r\n        invalidateAuth={invalidateAuth}\r\n        updateNewPath={updateNewPath}\r\n        createPath={createPath}/>\r\n      <EditPathsTab\r\n        value={drawerValue} \r\n        index={3} \r\n        invalidateAuth={invalidateAuth} \r\n        paths={paths}\r\n        deletePath={deletePath}\r\n        updatePath={updatePath}\r\n        updateEditPath={updateEditPath}/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default OtherFeatureTab;","import './App.css';\r\nimport Globe from './Globe';\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Box, Button, Divider, Drawer, Grid, IconButton, List, ListItem, ListItemText, Menu, MenuItem, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport LandmarkInfo from './LandmarkInfo';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport OtherFeatureTab from './OtherFeatureTab';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport {  Redirect } from \"react-router-dom\";\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport ListIcon from '@material-ui/icons/List';\r\nconst drawerWidth = 240;\r\n\r\n/**\r\n * Styles used for the component.\r\n * @param  {*} theme - the theme of the application\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: {\r\n    padding: 20,\r\n    fontWeight: \"bold\"\r\n  },\r\n  toolbarMenu: {\r\n    paddingTop: 20,\r\n    paddingLeft: 20,\r\n    fontWeight: \"bold\"\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: \"#11255c\"\r\n  },\r\n  globeGrid: {\r\n    flexGrow: 1,\r\n  },\r\n  rightPanel: {\r\n    // padding: 60, \r\n    height:\"100vh\",\r\n    // borderLeft: 1\r\n  },\r\n}));\r\n\r\nfunction Dashboard() {\r\n  const classes = useStyles();\r\n  //States\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  const [isAuth, setIsAuth] = useState(true);\r\n  const [paths, setPaths] = useState([]);\r\n  const [landmarks, setLandmarks] = useState([]);\r\n  const [subSolarCoordinates, setSubSolarCoordinates] = useState([0, 0]);\r\n  // const [anchorEl, setAnchorEl] = React.useState(null);\r\n  // const open = Boolean(anchorEl);\r\n  const [isPathsLoaded, setIsPathsLoaded] = useState(false);\r\n  const [isLandmarksLoaded, setIsLandmarksLoaded] = useState(false);\r\n  const [isSubSolarLoaded, setIsSubsolarLoaded] = useState(false);\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n  const [drawerValue, setDrawerValue] = useState(0);\r\n\r\n  const [currentLandmark, setCurrentLandmark] = useState({\r\n    landmark_uid: -1,\r\n    name: \"\",\r\n    description: \"\",\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  });\r\n  const [newPath, setNewPath] = useState({\r\n    type: \"LineString\", \r\n    coordinates: [],\r\n    isAirPlane: true\r\n  });\r\n  const [newLandmark, setNewLandmark] = useState({\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  });\r\n  const [editLandmark, setEditLandmark] = useState({\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  });\r\n  const [editPath, setEditPath] = useState({\r\n    type: \"LineString\",\r\n    coordinates: [],\r\n    isAirPlane: true\r\n  });\r\n\r\n  /**\r\n   * Gets the minimum dimension of the browser window.\r\n   */\r\n  const getMinDimension = () => {\r\n    return Math.min(windowSize.height, windowSize.width);\r\n  };\r\n\r\n  /**\r\n   * Handles the tab change.\r\n   * @param {*} event - the event of the tab change\r\n   * @param {number} newValue - the value used to change the tab\r\n   */\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  /**\r\n   * Handles switching to the information tab.\r\n   * @param {*} landmark  - the current landmark\r\n   */\r\n  const toInformationTab = (landmark) => {\r\n    setTabValue(0);\r\n    setCurrentLandmark({...landmark, isVisible: true});\r\n  };\r\n\r\n  /**\r\n   * Returns the order that the paths should be in.\r\n   * @param {*} a - the first path argument\r\n   * @param {*} b - the second path argument\r\n   */\r\n  const sortPaths = (a, b) => { \r\n    if(a[\"path_name\"] === null && b[\"path_name\"] === null){\r\n      return 0;\r\n    }\r\n    else if(a[\"path_name\"] === null){\r\n      return 1;\r\n    }\r\n    else if(b[\"path_name\"] === null){\r\n      return -1;\r\n    }\r\n    else if(a[\"path_name\"].toLowerCase() > b[\"path_name\"].toLowerCase()){\r\n      return 1;\r\n    }\r\n    else if(a[\"path_name\"].toLowerCase() < b[\"path_name\"].toLowerCase()){\r\n      return -1;\r\n    }\r\n    return 0;  \r\n  }\r\n\r\n  /**\r\n   * Gets the user's paths from the database.\r\n   */\r\n  const getUserPaths = () => {\r\n    fetch(`/paths`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      res.sort(sortPaths);\r\n      setPaths(res);\r\n      setIsPathsLoaded(true);\r\n    })\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns the order that the landmarks should be in.\r\n   * @param {*} a - the first landmark argument\r\n   * @param {*} b - the second landmark argument\r\n   */\r\n  const sortLandmarks = (a, b) => {  \r\n    if (a[\"name\"].toLowerCase() > b[\"name\"].toLowerCase()) {    \r\n        return 1;    \r\n    } else if (a[\"name\"].toLowerCase() < b[\"name\"].toLowerCase()) {    \r\n        return -1;    \r\n    }    \r\n    return 0;  \r\n  }\r\n\r\n  /**\r\n   * Gets the user's landmarks from the database.\r\n   */\r\n  const getUserLandmarks = () => {\r\n    fetch(`/landmarks`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      res.sort(sortLandmarks);\r\n      setLandmarks(res);\r\n      setIsLandmarksLoaded(true);\r\n    })\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Invalidates the authorization of the user.\r\n   */\r\n  const invalidateAuth = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuth(false);\r\n  };\r\n\r\n  /**\r\n   * Gets the subsolar point from the backend.\r\n   */\r\n  const getSubsolarPoint = () => {\r\n    fetch(`/sun`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setSubSolarCoordinates([res.longitude, res.latitude]);\r\n      setIsSubsolarLoaded(true);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the front end landmark.\r\n   * @param {*} landmark - the landmark to be updated\r\n   */\r\n  const updateLandmark = (landmark, index) => {\r\n    let items = [...landmarks];\r\n    \r\n    let itemToUpdate = {...items[index]};\r\n\r\n    itemToUpdate.name = landmark.name;\r\n    itemToUpdate.description = landmark.description;\r\n    itemToUpdate.coordinates = landmark.coordinates;\r\n\r\n    items[index] = itemToUpdate;\r\n\r\n    if(landmark.landmark_uid == currentLandmark.landmark_uid){\r\n      setCurrentLandmark({...landmark, isVisible: true});\r\n    }\r\n    setEditLandmark(prevVal => {\r\n      const prevValCopy = {...prevVal};\r\n      prevValCopy.isVisible = false;\r\n      return prevValCopy;\r\n    });\r\n    setLandmarks(items.sort(sortLandmarks));\r\n  };\r\n\r\n  /**\r\n   * Deletes the frontend landmark.\r\n   * @param {number} landmark_uid - the landmark UID to be deleted.\r\n   */\r\n  const deleteLandmark = (landmark_uid, index) => {\r\n    let items = [...landmarks];\r\n    items.splice(index, 1);\r\n    if(currentLandmark.landmark_uid == landmark_uid){\r\n      setCurrentLandmark(prevVal => {\r\n        const prevValCopy = {...prevVal};\r\n        prevValCopy.isVisible = false;\r\n        return prevValCopy;\r\n      });\r\n    }\r\n    setLandmarks(items);\r\n  };\r\n\r\n  /**\r\n   * Handles deleting the path\r\n   * @param {*} index - the index of the path\r\n   */\r\n  const deletePath = (index) => {\r\n    let pathsCopy = [...paths];\r\n    pathsCopy.splice(index, 1);\r\n    setEditPath(prevVal => {\r\n      const prevValCopy = {...prevVal};\r\n      prevValCopy.coordinates = [];\r\n      return prevValCopy;\r\n    });\r\n    setPaths(pathsCopy);\r\n  };\r\n\r\n  /**\r\n   * Handles clicking the account items.\r\n   * @param {*} index - the index that was selected\r\n   */\r\n  const onAccountMenuClicked = (index) => {\r\n    if(index === 1){\r\n      invalidateAuth();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles changing the tab to the other feature tab.\r\n   * @param {*} value \r\n   */\r\n  const changeDrawerFeatureHandler = (value) => {\r\n    setDrawerValue(value);\r\n    setTabValue(1);\r\n  }\r\n\r\n  /**\r\n   * Handles changing the currentLandmark object.\r\n   * @param {boolean} isVisible - the boolean to check if the currentLandmark is visible\r\n   * @param {*} landmark - the landmark properties\r\n   */\r\n  const currentLandmarkHandler = (isVisible, landmark) => {\r\n    if(isVisible){\r\n      setTabValue(0);\r\n    }\r\n    setCurrentLandmark(prevVal => {\r\n      const prevValCopy = isVisible ? {...landmark} : {...prevVal};\r\n      prevValCopy.isVisible = isVisible;\r\n      return prevValCopy;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new landmark into the landmarks object.\r\n   * @param {*} landmark - the landmark information\r\n   */\r\n  const createLandmark = (landmark) => {\r\n    setNewLandmark(prevVal => {\r\n      const prevValCopy = {...prevVal}\r\n      prevValCopy.isVisible = false;\r\n      return prevValCopy\r\n    });\r\n    setLandmarks(prevArray => {\r\n      var newArray = [...prevArray, landmark];\r\n      return newArray.sort(sortLandmarks);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the new landmark object.\r\n   * @param {*} isVisible - the boolean to check if the new landmark is visible\r\n   * @param {*} coordinates - the coordinates of the new landmark\r\n   */\r\n  const updateNewLandmark = (isVisible, coordinates) => {\r\n    if(!isVisible){\r\n      setNewLandmark(prevVal => {\r\n        const prevValCopy = {...prevVal}\r\n        prevValCopy.isVisible = false;\r\n        return prevValCopy;\r\n      });\r\n    }\r\n    else{\r\n      setNewLandmark({coordinates: coordinates, isVisible: true});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the edit landmark object.\r\n   * @param {*} isVisible - the boolean to check if the edit landmark is visible\r\n   * @param {*} coordinates - the coordinates of the edit landmark\r\n   */\r\n  const updateEditLandmark = (isVisible, coordinates) => {\r\n    if(!isVisible){\r\n      setEditLandmark(prevVal => {\r\n        const prevValCopy = {...prevVal};\r\n        prevValCopy.isVisible = false;\r\n        return prevValCopy;\r\n      });\r\n    }\r\n    else{\r\n      setEditLandmark({coordinates: coordinates, isVisible: true});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new path into the paths object.\r\n   * @param {*} path - the path properties\r\n   */\r\n  const createPath = (path) => {\r\n    setNewPath(prevVal => {\r\n      const prevValCopy = {...prevVal};\r\n      prevValCopy.coordinates = []\r\n      return prevValCopy;\r\n    });\r\n    setPaths(prevArray => {\r\n      var newArray = [...prevArray, path];\r\n      return newArray.sort(sortPaths);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the new path object.\r\n   * @param {*} path - the path properties\r\n   */\r\n  const updateNewPath = (path) => {\r\n    setNewPath(path);\r\n  }\r\n\r\n  /**\r\n   * Updates a path in the paths object.\r\n   * @param {*} path - the path properties\r\n   * @param {*} index - the index of the path object\r\n   */\r\n  const updatePath = (path, index) => {\r\n    setEditPath(prevValue => {\r\n      var prevValueCopy = {...prevValue};\r\n      prevValueCopy.coordinates = [];\r\n      return prevValueCopy;\r\n    });\r\n    setPaths(prevArray => {\r\n      var prevArrayCopy = [...prevArray];\r\n      var pathCopy = {...prevArrayCopy[index]};\r\n      pathCopy.isAirPlane = path.isAirPlane;\r\n      pathCopy.path_name = path.path_name;\r\n      pathCopy.coordinates = path.coordinates;\r\n      prevArrayCopy[index] = pathCopy;\r\n      prevArrayCopy.sort(sortPaths);\r\n      return prevArrayCopy;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the editPath object.\r\n   * @param {*} coordinates - the coordinates of the editPath\r\n   * @param {*} isAirPlane - the boolean to check if the path is an airplane type\r\n   */\r\n  const updateEditPath = (coordinates, isAirPlane) => {\r\n    setEditPath(prevVal => {\r\n      const prevValCopy = {...prevVal};\r\n      prevValCopy.coordinates = coordinates;\r\n      prevValCopy.isAirPlane = isAirPlane;\r\n      return prevValCopy;\r\n    });\r\n  };\r\n\r\n // Use effect hook.\r\n  useEffect(() => {\r\n    getUserLandmarks();\r\n    getUserPaths();\r\n    getSubsolarPoint();\r\n    const interval = setInterval(() => {\r\n      getSubsolarPoint();\r\n    }, 2 * 60000);\r\n\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    \r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    \r\n    // Remove event listener on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      clearInterval(interval);\r\n    };\r\n    // return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the dashboard content.\r\n   */\r\n  const getDashboardContent = () => {\r\n    if(isAuth){\r\n      return (\r\n        <Grid container spacing={0} style={{width: `calc(100% - ${drawerWidth}px)`, marginLeft: drawerWidth}}>\r\n          <Grid item align='center' style={{ padding: \"1vh\", height:\"100vh\", flexGrow: 1}}>\r\n            {isLandmarksLoaded && isPathsLoaded && isSubSolarLoaded ? \r\n              <Globe\r\n              paths={paths} \r\n              landmarks={landmarks} \r\n              landmarkHandler={currentLandmarkHandler} \r\n              size={getMinDimension()*0.98} \r\n              newPath={newPath}\r\n              newLandmark={newLandmark}\r\n              currentLandmark={currentLandmark}\r\n              editLandmark={editLandmark}\r\n              subSolarCoordinates={subSolarCoordinates}\r\n              editPath={editPath}/> : \r\n              <Skeleton variant=\"circle\" width={\"98vh\"} height={\"98vh\"}/>\r\n            }\r\n          </Grid>\r\n          <Grid item xs={4} align=\"left\">\r\n            <Paper elevation={0} square className={classes.rightPanel}>\r\n              <AppBar position=\"static\">\r\n                <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\r\n                  <Tab style={{ minWidth: 25 }} icon={<InfoIcon/>}/>\r\n                  <Tab style={{ minWidth: 25 }} icon={<MoreHorizIcon/>}/>\r\n                </Tabs>\r\n              </AppBar>\r\n              <LandmarkInfo currentLandmark={currentLandmark} \r\n                value={tabValue} \r\n                index={0}/>\r\n              <OtherFeatureTab value={tabValue} \r\n                index={1} \r\n                drawerValue={drawerValue}\r\n                invalidateAuth={invalidateAuth}\r\n                toInformationTab={toInformationTab}\r\n                landmarks={landmarks}\r\n                paths={paths}\r\n                deletePath={deletePath}\r\n                createLandmark={createLandmark}\r\n                updateNewLandmark={updateNewLandmark}\r\n                updateLandmark={updateLandmark}  \r\n                deleteLandmark={deleteLandmark} \r\n                updateEditLandmark={updateEditLandmark}\r\n                updateNewPath={updateNewPath}\r\n                createPath={createPath}\r\n                updatePath={updatePath}\r\n                updateEditPath={updateEditPath}/>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n    else{\r\n      return (<Redirect to={{pathname:'/loggedOut'}}/>);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" className={classes.root}>\r\n      <Drawer \r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={true} \r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}>\r\n        <Typography className={classes.toolbar}>\r\n          Wanderlust\r\n        </Typography>\r\n        <Divider/>\r\n        <Typography className={classes.toolbarMenu}>\r\n          Landmark\r\n        </Typography>\r\n        <List>\r\n          {['New Landmark', 'Landmark List'].map((text, index) => (\r\n            <ListItem button key={text} onClick={() => changeDrawerFeatureHandler(index)}>\r\n              <ListItemIcon>{index === 1 ? <ListIcon/> : <AddIcon/>}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider/>\r\n        <Typography className={classes.toolbarMenu}>\r\n          Path\r\n        </Typography>\r\n        <List>\r\n          {['New Path', 'Path List'].map((text, index) => (\r\n            <ListItem button key={text} onClick={() => changeDrawerFeatureHandler(index + 2)}>\r\n              <ListItemIcon>{index === 1 ? <ListIcon/> : <AddIcon/>}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider/>\r\n        <Typography className={classes.toolbarMenu}>\r\n          Account\r\n        </Typography>\r\n        <List>\r\n          {['Preferences', 'Log Out'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index === 1 ? <ExitToAppIcon/> : <PaletteIcon/>}</ListItemIcon>\r\n              <ListItemText primary={text} onClick={() => onAccountMenuClicked(index)}/>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      {getDashboardContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","export default __webpack_public_path__ + \"static/media/landing.35abeff8.png\";","//Imports from libraries\r\nimport { Button, TextField, Typography, Toolbar, Grid, CircularProgress } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\nimport Image from './landing.png'; // Import using relative path\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Styles used for the component.\r\n * @param  {*} theme - the theme of the application\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  link: {\r\n    color: \"#7096ff\", \r\n    textDecoration: \"none\", \r\n    fontSize: \"17px\", \r\n    fontWeight: \"bold\"\r\n  },\r\n}));\r\n\r\nfunction SignIn() {\r\n  const classes = useStyles();\r\n  //States\r\n  const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  /**\r\n   * Handles the change in username.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the change in password.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the signing in.\r\n   */\r\n  const handleSignIn = () => {\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n    setIsProcessing(true);\r\n\r\n    const body = {\r\n      \"username\": username,\r\n      \"password\": password\r\n    }\r\n    \r\n    fetch(`/users/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      localStorage.setItem('token', res.token);\r\n      setIsTokenValid(true);\r\n      setIsProcessing(false);\r\n    })\r\n    .catch((error) => {\r\n      alert(\"Invalid credentials!\");\r\n      setIsProcessing(false);\r\n    });\r\n  };\r\n\r\n  //Use effect hook.\r\n  useEffect(() => {\r\n    if(localStorage.getItem('token') !== null){\r\n      fetch(`/users/checkToken`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if(res.isTokenValid){\r\n          setIsTokenValid(true);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the SignIn page content.\r\n   */\r\n  const getSignInContent = () => {\r\n    if(isTokenValid){\r\n      return (<Redirect to={{pathname:'/dashboard'}}/>);\r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n          <Grid container spacing={0}>\r\n            <Grid item xs={8} style={{ padding: 60, backgroundImage: `url(${Image})`, backgroundSize: 'cover', height: '100vh' }}>\r\n              <Typography component=\"h1\" variant=\"h3\">\r\n                Record Your Travels. Personalize Your Globe.\r\n              </Typography>\r\n              <Typography component=\"h1\" variant=\"h6\">\r\n                Wanderlust allows you to revisit places you have been to and even the journey you took to get there. With a clean design, you can see the globe in real time and take things into perspective.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={4} style={{ padding: 60 }}>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign In\r\n              </Typography>\r\n              <form>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"username\"\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  autoComplete=\"username\"\r\n                  autoFocus\r\n                  value={username}\r\n                  onChange={handleUsernameChange}/>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={password}\r\n                  onChange={handlePasswordChange} />\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleSignIn}>\r\n                  {isProcessing && <CircularProgress size={24} color='secondary' disableShrink />}\r\n                  {!isProcessing && 'Sign In'}\r\n                </Button>\r\n              </form>\r\n              <br/>\r\n              <Link to=\"/signUp\" className={classes.link}>Don't have an account? Sign up</Link>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {getSignInContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Typography, Toolbar, Grid } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\n\r\n/**\r\n * Styles used for the component.\r\n * @param  {*} theme - the theme of the application\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  link: {\r\n    padding: 60,\r\n    color: \"#7096ff\",\r\n    textDecoration: \"none\",\r\n    fontSize: \"17px\",\r\n    fontWeight: \"bold\"\r\n  },\r\n  timerIcon: {\r\n    width: \"30%\",\r\n    height: \"30%\"\r\n  },\r\n}));\r\n\r\nfunction LoggedOut() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container\r\n        spacing={0}\r\n        align=\"center\"\r\n        justify=\"center\"\r\n        direction=\"column\" style={{ height: \"100vh\", flexGrow: 1 }}>\r\n        <Grid item>\r\n          <ScheduleIcon className={classes.timerIcon} />\r\n          <Typography variant=\"h4\" style={{ padding: 60 }}>\r\n            Session has expired. Please sign back in.\r\n          </Typography>\r\n          <Link to=\"/\" className={classes.link}>Back to Sign In</Link>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoggedOut;","//Imports from libraries\r\nimport { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport SignalCellular0BarIcon from '@material-ui/icons/SignalCellular0Bar';\r\nimport SignalCellular1BarIcon from '@material-ui/icons/SignalCellular1Bar';\r\nimport SignalCellular2BarIcon from '@material-ui/icons/SignalCellular2Bar';\r\nimport SignalCellular3BarIcon from '@material-ui/icons/SignalCellular3Bar';\r\nimport SignalCellular4BarIcon from '@material-ui/icons/SignalCellular4Bar';\r\n\r\n/**\r\n * Styles used for the component.\r\n * @param  {*} theme - the theme of the application\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: \"column\",\r\n    alignItems: 'center',\r\n    maxWidth: '700px',\r\n    marginTop: '30%'\r\n  },\r\n  form: {\r\n    width: '100%'\r\n  },\r\n  link: {\r\n    color: \"#7096ff\", \r\n    textDecoration: \"none\", \r\n    fontSize: \"17px\", \r\n    fontWeight: \"bold\"\r\n  },\r\n  checkIcon: {\r\n    color: \"green\"\r\n  },\r\n  clearIcon: {\r\n    color: \"red\"\r\n  },\r\n  hint: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    fontSize: \"15px\"\r\n  },\r\n  veryWeakStrength: {\r\n    color: \"red\"\r\n  },\r\n  weakStrength: {\r\n    color: \"orange\"\r\n  },\r\n  fairStrength: {\r\n    color: \"yellow\"\r\n  },\r\n  goodStrength: {\r\n    color: \"lime\"\r\n  },\r\n  strongStrength: {\r\n    color: \"green\"\r\n  }\r\n}));\r\n\r\nfunction SignUp() {\r\n  const classes = useStyles();\r\n  //States\r\n  // const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isUsernameTaken, setIsUsernameTaken] = useState(false);\r\n\r\n  /**\r\n   * Checks if a string has a number.\r\n   * @param {String} value - the string used to check if it has a number\r\n   */\r\n  const hasNumber = value => {\r\n    return new RegExp(/[0-9]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has mixed caps.\r\n   * @param {String} value - the string used to check if it has mixed caps\r\n   */\r\n  const hasMixed = value => {\r\n    return new RegExp(/[a-z]/).test(value) && new RegExp(/[A-Z]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has special characters\r\n   * @param {*} value - the string used to check if it has special characters\r\n   */\r\n  const hasSpecial = value => {\r\n    return new RegExp(/[!#@$%^&*)(+=._-]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Gets the human readable value of a password strength.\r\n   * @param {number} count - the password strength\r\n   */\r\n  const strengthMagnitude = count => {\r\n    if (count < 2)\r\n      return 'Very Weak';\r\n    if (count < 3)\r\n      return 'Weak';\r\n    if (count < 4)\r\n      return 'Fair';\r\n    if (count < 5)\r\n      return 'Good';\r\n    if (count < 6)\r\n      return 'Strong';\r\n  }\r\n\r\n  /**\r\n   * Gets the strength of a password.\r\n   * @param {String} value - the string used to check the strenght of a password\r\n   */\r\n  const strengthIndicator = value => {\r\n    let strengths = 0;\r\n    if (value.length > 5)\r\n      strengths++;\r\n    if (value.length > 7)\r\n      strengths++;\r\n    if (hasNumber(value))\r\n      strengths++;\r\n    if (hasSpecial(value))\r\n      strengths++;\r\n    if (hasMixed(value))\r\n      strengths++;\r\n    return strengthMagnitude(strengths);\r\n  }\r\n\r\n  /**\r\n   * Renders the content for the password strength.\r\n   * @param {number} value - the numerical strength indicator of a password\r\n   */\r\n  const renderPasswordStrength = value => {\r\n    switch(value){\r\n      case 'Very Weak':\r\n        return (<SignalCellular0BarIcon className={classes.veryWeakStrength}/>);\r\n      case 'Weak':\r\n        return (<SignalCellular1BarIcon className={classes.weakStrength}/>);\r\n      case 'Fair':\r\n        return (<SignalCellular2BarIcon className={classes.fairStrength}/>);\r\n      case 'Good':\r\n        return (<SignalCellular3BarIcon className={classes.goodStrength}/>);\r\n      default:\r\n        return (<SignalCellular4BarIcon className={classes.strongStrength}/>);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the username change.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n    getUsernameStatus(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the password change.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the email change.\r\n   * @param {*} event - the event for the email change\r\n   */\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Gets the availability of the username\r\n   * @param {String} value - the string used to check the availability of a username\r\n   */\r\n  const getUsernameStatus = (value) => {\r\n    fetch(`/users/exists?username=${value}`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setIsUsernameTaken(res.isexist === \"true\" ? true : false);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the user signing up.\r\n   */\r\n  const handleSignUp = () => {\r\n    if(email === \"\" || password === \"\" || username === \"\"){\r\n      alert(\"At least one field is empty!\");\r\n    }\r\n    else{\r\n      const body = {\r\n        \"email\": email,\r\n        \"password\" : password,\r\n        \"username\" : username\r\n      }\r\n  \r\n      fetch(`/users/create`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        setEmail(\"\");\r\n        alert(\"A new user has been made!\");\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error);\r\n        alert(\"The username already exists! Please create an unowned username.\");\r\n      });\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(localStorage.getItem('token') !== null){\r\n  //     fetch(`/users/checkToken`, {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n  //       },\r\n  //     })\r\n  //     .then(res => res.json())\r\n  //     .then(res => {\r\n  //       if(res.isTokenValid){\r\n  //         setIsTokenValid(true);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <div className={classes.root}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign Up\r\n        </Typography>\r\n        <form className={classes.form}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            value={email}\r\n            onChange={handleEmailChange}\r\n            className={classes.textField}/>\r\n          <br/>\r\n          <br/>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"username\"\r\n            label=\"Username\"\r\n            autoComplete=\"username\"\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n            className={classes.textField}/>\r\n          <br/>\r\n          <Typography className={classes.hint}>\r\n            Username Status: {isUsernameTaken ? \"Taken\" : \"Available\"}\r\n            {isUsernameTaken ? <ClearIcon className={classes.clearIcon}/> : <CheckIcon className={classes.checkIcon}/>}\r\n          </Typography>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n            className={classes.textField}/>\r\n          <br/>\r\n          <Typography className={classes.hint}>\r\n            Password Strength: {strengthIndicator(password)}\r\n            {renderPasswordStrength(strengthIndicator(password))}\r\n          </Typography>\r\n          <br/>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSignUp}\r\n            className={classes.textField}>\r\n            Sign Up\r\n          </Button>\r\n        </form>\r\n        <br/>\r\n        <Grid container justify=\"flex-start\">\r\n          <Grid item>\r\n            <Link className={classes.link} to=\"/\">Back to sign in screen</Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import './App.css';\nimport React, { Component, useState, useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Dashboard from './Dashboard';\nimport SignIn from './SignIn';\nimport LoggedOut from './LoggedOut';\nimport SignUp from './SignUp';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nfunction App() {\n  \n  useEffect(() => {\n    document.title = 'Wanderlust';\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={SignIn}/>\n          <Route exact path='/dashboard' component={Dashboard}/>\n          <Route exact path='/loggedOut' component={LoggedOut}/>\n          <Route exact path='/signUp' component={SignUp}/>\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}