{"version":3,"sources":["Globe.jsx","LandmarkInfo.jsx","NewLandmarkTab.jsx","NewPathTab.jsx","ZoomSlider.jsx","Dashboard.jsx","SignIn.jsx","LoggedOut.jsx","SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Globe","size","scale","paths","landmarks","landmarkHandler","tempPath","tempLandmark","currentLandmark","editLandmark","subSolarCoordinates","useState","mouseCoordinates","setMouseCoordinates","oldCoordinates","setOldCoordinates","newCoordinates","setNewCoordinates","isMove","setIsMove","isDrag","setIsDrag","svgRef","useRef","circle","d3","projection","fitSize","type","precision","pathGenerator","useIdleTimer","timeout","onIdle","event","drawGlobe","onActive","onAction","events","debounce","getRemainingTime","getLastActiveTime","resume","rotateParams","scaleParams","isCoarse","svg","current","rotate","isDaylight","selectAll","data","join","attr","feature","on","mouseEvent","item","landmark_uid","name","description","coordinates","isVisible","drawSphere","land","landCoarse","features","landFine","raise","drawLand","lakes","lakesCoarse","lakesFine","drawLakes","nightLongitude","nightLatitude","opacity","style","center","radius","drawCurrentShadow","graticule","drawGraticule","landmark","drawCurrentLandmark","isDayTime","isAirPlane","drawArcs","drawTempPath","drawTempLandmark","drawEditLandmark","id","drawLandmarks","useEffect","width","height","ref","border","onMouseDown","screenX","screenY","onMouseMove","currentMouseCoordinates","scalingFactor","movedCoordinates","onMouseUp","LandmarkInfo","value","index","setEditLandmark","updateLandmarks","invalidateAuth","deleteLandmark","isEdit","setIsEdit","editId","setEditId","editName","setEditName","editDescription","setEditDescription","editLongitude","setEditLongitude","editLatitude","setEditLatitude","handleNameChange","target","handleDescriptionChange","handleLatitudeChange","Math","abs","parseFloat","handleLongitudeChange","handleDeleteLandmark","window","confirm","body","fetch","method","headers","localStorage","getItem","JSON","stringify","then","res","json","catch","err","handleEditLandmarkMode","handleCancelEdit","handleEditLandmark","alert","hidden","Typography","variant","FormControl","fullWidth","InputLabel","htmlFor","Input","placeholder","onChange","TextField","label","multiline","rows","Button","color","onClick","descriptionArray","split","endIcon","paragraph","map","element","getLandmarkInfoContent","NewLandmarkTab","setLandmarks","setTempLandmark","landmarkName","setLandmarkName","landmarkLatitude","setLandmarkLatitude","landmarkLongitude","setLandmarkLongitude","landmarkDescription","setLandmarkDescription","newTempLandmark","latitude","longitude","prevArray","path_uid","NewPathTab","setPaths","setTempPath","nodes","setNodes","isAirplane","setIsAirplane","handleNewPath","isNodesPopulated","i","length","newPath","handleDeleteNode","idArray","parentElement","parseInt","newNodes","splice","updateTempPath","newElements","newIsAirplane","newTempPath","undefined","node","lat","long","push","onElementLatitudeChange","onElementLongitudeChange","FormControlLabel","control","Switch","checked","checkedIcon","icon","latId","longitudeId","deleteBtnId","getFinishButton","ZoomSlider","handleChangeScale","gutterBottom","Slider","orientation","aria-labelledby","step","min","max","marks","Dashboard","setScale","tabValue","setTabValue","isAuth","setIsAuth","setSubSolarCoordinates","setCurrentLandmark","newValue","getMinDimension","innerHeight","innerWidth","handleTabChange","removeItem","getSubsolarPoint","items","itemToUpdate","error","interval","setInterval","clearInterval","className","AppBar","position","Toolbar","Grid","container","spacing","xs","padding","align","Tabs","aria-label","Tab","minWidth","to","pathname","SignIn","isTokenValid","setIsTokenValid","username","setUsername","password","setPassword","handleUsernameChange","handlePasswordChange","handleSignIn","setItem","token","component","margin","required","autoComplete","autoFocus","LoggedOut","SignUp","email","setEmail","isUsernameTaken","setIsUsernameTaken","getUsernameStatus","isexist","count","strengths","RegExp","test","hasNumber","hasSpecial","hasMixed","strengthIndicator","theme","createMuiTheme","palette","App","document","title","ThemeProvider","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae50e368.chunk.js","sourcesContent":["//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport * as topojson from \"topojson\";\r\nimport { useIdleTimer } from 'react-idle-timer';\r\n\r\n//Imports from self defined structures\r\n//https://github.com/martynafford/natural-earth-geojson\r\nimport landFine from \"./jsonData/ne_10m_land.json\";\r\nimport landCoarse from \"./jsonData/ne_110m_land.json\";\r\nimport lakesFine from \"./jsonData/ne_10m_lakes.json\";\r\nimport lakesCoarse from \"./jsonData/ne_110m_lakes.json\";\r\n//https://s3-us-west-2.amazonaws.com/s.cdpn.io/215059/cities-200000.json\r\n//https://public.opendatasoft.com/api/records/1.0/search/?dataset=geonames-all-cities-with-a-population-1000&q=&rows=10000&sort=population&pretty_print=true&format=json&fields=population,coordinates,name\r\nimport lightsFine from \"./jsonData/geonames-all-cities-with-a-population-1000.json\";\r\nimport lightsCoarse from \"./jsonData/cities-200000.json\";//TODO: use if performance is fixed\r\n\r\nfunction Globe({size, scale, paths, landmarks, landmarkHandler, tempPath, tempLandmark, currentLandmark, editLandmark, subSolarCoordinates}) {\r\n    //States\r\n    const [mouseCoordinates, setMouseCoordinates] = useState(null);         //state for initially pressing down the mouse button's position\r\n    const [oldCoordinates, setOldCoordinates] = useState([180, -25]);   //state for the position of the globe during inactivity (units in -longitude, -latitude)\r\n    const [newCoordinates, setNewCoordinates] = useState(null);             //state for updating the old coordinates\r\n    const [isMove, setIsMove] = useState(false);\r\n    const [isDrag, setIsDrag] = useState(false);\r\n\r\n    //Constants\r\n    const svgRef = useRef();\r\n    const circle = d3.geoCircle();\r\n    const projection = d3.geoOrthographic()\r\n        .fitSize([size, size], {type: \"Sphere\"})\r\n        .precision(0.1);\r\n    const pathGenerator = d3.geoPath().projection(projection);\r\n\r\n    /**\r\n    * Handles the mouse down event in the Globe.\r\n    * @param {*} event - the mouse event\r\n    */\r\n    const onMouseDownHandler = (event) => {\r\n        setMouseCoordinates([event.screenX, event.screenY]);\r\n    };\r\n\r\n    /**\r\n     * Gets the Radius of the city.\r\n     * @param {int} population - the population of the city\r\n     */\r\n    const getCityRadius = (population) => {\r\n        if (population < 5000)\r\n            return 0.02\r\n        else if (population < 10000)\r\n            return 0.05\r\n        else if (population < 50000)\r\n            return 0.07\r\n        else if (population < 100000)\r\n            return 0.1\r\n        else\r\n            return 0.2\r\n    };\r\n\r\n    /**\r\n     * Handles when the user has become idle.\r\n     * @param {*} event - the event during idle.\r\n     */\r\n    const handleOnIdle = event => {\r\n        //TODO: fix fine rendering issue\r\n        // if(event !== null && event.type !== \"mousedown\"){\r\n            // console.log(\"event for idle\", event);\r\n            // console.log(\"redrawing globe\");\r\n            // console.log(\"isMove=\", isMove);\r\n            // console.log(\"ismove\", isMove);\r\n            // console.log(\"!isDrag\", !isDrag);\r\n        if(isMove && !isDrag){\r\n            // console.log(\"redrawing globe\");\r\n            drawGlobe(oldCoordinates, scale, false);\r\n            setIsMove(false);\r\n        }\r\n        // }\r\n        // console.log(event);\r\n    }\r\n    \r\n    /**\r\n     * Handles when the user has become active.\r\n     * @param {*} event - the event during active\r\n     */\r\n    const handleOnActive = event => {\r\n        //TODO: fix fine rendering issue\r\n        // console.log(event.path[1].tagName === \"svg\");\r\n        // if(event.path[1].tagName === \"svg\"){\r\n        //     if(newCoordinates){\r\n        //         setMouseCoordinates(null);\r\n        //         setOldCoordinates(newCoordinates);\r\n        //         setNewCoordinates(null);\r\n        //     }\r\n        //     setMouseCoordinates(null);\r\n        // }\r\n    }\r\n    \r\n    /**\r\n     * Handles when the user has done an action.\r\n     * @param {*} event - the event during an action\r\n     */\r\n    const handleOnAction = (event) => {}\r\n     \r\n    //Idle timer and parameters\r\n    const { getRemainingTime, getLastActiveTime, resume } = useIdleTimer({\r\n        timeout: 1000 * 1.5,\r\n        onIdle: handleOnIdle,\r\n        onActive: handleOnActive,\r\n        onAction: handleOnAction,\r\n        events: ['mouseup'],\r\n        debounce: 500\r\n    })\r\n\r\n    /**\r\n     * Handler for when the mouse has been moved.\r\n     * @param {*} event - the event of when the mouse has been moved\r\n     */\r\n    const onMouseMoveHandler = (event) => {\r\n        //TODO: fix fine rendering issue\r\n        if(mouseCoordinates){\r\n            // console.log(\"mouse move\", e);\r\n            // console.log(\"drawing the globe coarse\");\r\n            var currentMouseCoordinates = [event.screenX, event.screenY];\r\n            var scalingFactor = 3.0 * scale/200.0;\r\n            var movedCoordinates = [oldCoordinates[0] + (currentMouseCoordinates[0] - mouseCoordinates[0])/scalingFactor, oldCoordinates[1] - (currentMouseCoordinates[1] - mouseCoordinates[1])/scalingFactor];\r\n            movedCoordinates[1] = movedCoordinates[1] < -90 ? -90 :\r\n                movedCoordinates[1] > 90 ?  90 : movedCoordinates[1];\r\n            // projection.rotate(movedCoordinates);\r\n            setNewCoordinates(movedCoordinates);\r\n            setIsMove(true);\r\n            setIsDrag(true);\r\n            drawGlobe(movedCoordinates, scale, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handler when the mouse click is now up.\r\n     * @param {*} event - the event of when the mouse click is now up\r\n     */\r\n    const onMouseUpHandler = (event) => {\r\n        //TODO: fix fine rendering issue\r\n        // console.log(\"mouseuphandler activated\");\r\n        if(newCoordinates){\r\n            // setMouseCoordinates(null);\r\n            setOldCoordinates(newCoordinates);\r\n            setNewCoordinates(null);\r\n        }\r\n        setIsDrag(false);\r\n        setMouseCoordinates(null);\r\n    };\r\n\r\n    /**\r\n     * Draws a sphere.\r\n     * @param {*} svg - the svg used to draw the sphere.\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawSphere = (svg, isDaylight) => {\r\n        svg\r\n            .selectAll(\".sphere\")\r\n            .data([{type: \"Sphere\"}])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"sphere\")\r\n            .attr(\"fill\", isDaylight ? \"#dde\" : \"#1c458c\")\r\n            .attr(\"d\", feature => pathGenerator(feature))\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            } );\r\n    };\r\n\r\n    /**\r\n     * Draws the grid.\r\n     * @param {*} svg - the svg used to draw the graticule.\r\n     * @param {boolean} isDaylight - the parameter for night time styles.\r\n     */\r\n    const drawGraticule = (svg, isDaylight) => {\r\n        const graticule = d3.geoGraticule10()\r\n        svg\r\n            .selectAll(\".mesh\")\r\n            .data([graticule])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"mesh\")\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", isDaylight ? \"#ccf\" : \"gray\")\r\n            .attr(\"stroke-opacity\", \"0.5\")\r\n            .attr(\"stroke-width\", isDaylight ? 1 : 0.3)\r\n            .attr(\"d\", feature => pathGenerator(feature))\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            } )\r\n            .raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the land.\r\n     * @param {*} svg - the svg used to draw the land\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawLand = (svg, isCoarse, isDaylight) => {\r\n        //Using local json data that is of type Topology\r\n        const land = isCoarse ? landCoarse.features : landFine.features;\r\n        svg\r\n        .selectAll(\".country\")\r\n        .data(land)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", isDaylight ? \"#edd\" : \"#f5c684\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.5)\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            landmarkHandler([{\r\n                landmark_uid: -1,\r\n                name: \"\",\r\n                description: \"\",\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }]);\r\n        } )\r\n        .raise();\r\n\r\n        //Using external json data that is of type Topology\r\n        // d3.json(\"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/land-10m.json\").then(res => {\r\n        //     const countries1 = topojson.feature(isCoarse ? landCoarse : res, isCoarse ? landCoarse.objects.land : res.objects.land).features;\r\n        //     console.log(countries1);\r\n        //     svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(countries1)\r\n        //     .join(\"path\")\r\n        //     .attr(\"id\", feature => console.log(feature))\r\n        //     .attr(\"class\", \"country\")\r\n        //     .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     // .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     // .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n        // });\r\n\r\n        //Using local json data that is of type FeatureCollection\r\n        // svg\r\n        //     .selectAll(\".country\")\r\n        //     .data(dataCoarse.features)\r\n        //     .join(\"path\")\r\n        //     .attr(\"class\", \"country\")\r\n        //     // .attr(\"fill\", feature => \"#edd\")//daytime\r\n        //     .attr(\"fill\", feature => \"#114\")//nighttime\r\n        //     // .attr(\"stroke\", feature => \"#faa\")//daytime\r\n        //     .attr(\"stroke\", feature => \"#004\")//nighttime\r\n        //     .attr(\"d\", feature => pathGenerator(feature));\r\n    };\r\n\r\n    /**\r\n     * Draws the lakes.\r\n     * @param {*} svg - the svg used to draw the land\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     * @param {boolean} isDaylight - the parameter for night time styles\r\n     */\r\n    const drawLakes = (svg, isCoarse, isDaylight) => {\r\n        const lakes = isCoarse ? lakesCoarse.features :lakesFine.features;\r\n        svg\r\n        .selectAll(\".lakes\")\r\n        .data(lakes)\r\n        .join(\"path\")\r\n        .attr(\"class\", \"lakes\")\r\n        .attr(\"fill\", isDaylight ? \"#edd\" : \"#1c458c\")\r\n        .attr(\"stroke\", isDaylight ? \"#faa\" : \"#b89463\")\r\n        .attr(\"stroke-width\", 0.5)\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n        .raise()\r\n        .on(\"click\", (mouseEvent, item) => {\r\n            landmarkHandler([{\r\n                landmark_uid: -1,\r\n                name: \"\",\r\n                description: \"\",\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }]);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Draws city lights based on population sizes in cities.\r\n     * @param {*} svg - the svg used to draw city lights\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     */\r\n    const drawLights = (svg, isCoarse) => {\r\n        if(isCoarse){\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsCoarse)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center([parseFloat(cityElement[3]), parseFloat(cityElement[2])]).radius(getCityRadius(cityElement[0]))())).raise();\r\n        }else{\r\n            svg\r\n            .selectAll(\".lights\")\r\n            .data(lightsFine)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"lights\")\r\n            .style(\"fill\", \"#ff8\")\r\n            .attr(\"fill-opacity\",\"0.4\")\r\n            .attr(\"d\", cityElement => pathGenerator(circle.center(cityElement.geometry.coordinates).radius(getCityRadius(cityElement.fields.population))())).raise();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draws the landmarks.\r\n     * @param {*} svg - the svg used to draw the landmarks\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawLandmarks = (svg, isDaylight) => {\r\n        // Format of one element of data\r\n        //   {\r\n        //     id: \"landmark_1\",\r\n        //     landmark_uid: 1,\r\n        //     name: \"Manila / Marikina\",\r\n        //     description: \"First Hometown. Revisited 2011, 2013, 2017, 2018, and 2019.\",\r\n        //     coordinates: [120.9842, 14.5995]\r\n        //   }\r\n        svg\r\n            .selectAll(\".landmarks\")\r\n            .data(landmarks)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"landmarks\")\r\n            .attr(\"id\", landmark => `${landmark.id}`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",\"0.3\")\r\n            .on(\"mouseover\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`).style(\"fill\", \"red\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.3)()));\r\n            } )\r\n            .on(\"mouseout\", (mouseEvent, item) => {\r\n                d3.select(`#${item.id}`)\r\n                .style(\"fill\", isDaylight ? \"black\" : \"black\")\r\n                .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)()));\r\n            } )\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: item.landmark_uid,\r\n                    name: item.name,\r\n                    description: item.description,\r\n                    coordinates: item.coordinates,\r\n                    isVisible: true\r\n                }]);\r\n            })\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current selected landmark.\r\n     * @param {*} svg - the svg used to draw the current selected landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawCurrentLandmark = (svg, isDaylight) => {\r\n        svg\r\n            .selectAll(\".currentLandmark\")\r\n            .data(currentLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"currentLandmark\")\r\n            .attr(\"id\", landmark => `current_${landmark.landmark_uid}`)\r\n            .style(\"fill\", \"red\")\r\n            .attr(\"fill-opacity\",\"0.3\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.2)())).raise();\r\n    }\r\n\r\n    /**\r\n     * Draws the current world night time.\r\n     * @param {*} svg - the svg used to draw the world night time\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawCurrentShadow = (svg, isDaylight) => {\r\n        var nightLongitude = subSolarCoordinates[0] + 180;\r\n        var nightLatitude = -subSolarCoordinates[1];\r\n        var opacity = \"0.06\";\r\n        svg\r\n            .selectAll(\".shadow\")\r\n            .data([1])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"shadow\")\r\n            .attr(\"id\", `shadow`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",opacity)\r\n            .attr(\"d\", pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(90)())).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            });\r\n\r\n            svg\r\n            .selectAll(\".shadow1\")\r\n            .data([1])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"shadow1\")\r\n            .attr(\"id\", `shadow`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",opacity)\r\n            .attr(\"d\", pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(90-6)())).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            });\r\n\r\n            svg\r\n            .selectAll(\".shadow2\")\r\n            .data([1])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"shadow2\")\r\n            .attr(\"id\", `shadow`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",opacity)\r\n            .attr(\"d\", pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(90-12)())).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            });\r\n\r\n            svg\r\n            .selectAll(\".shadow3\")\r\n            .data([1])\r\n            .join(\"path\")\r\n            .attr(\"class\", \"shadow3\")\r\n            .attr(\"id\", `shadow`)\r\n            .style(\"fill\", \"black\")\r\n            .attr(\"fill-opacity\",opacity)\r\n            .attr(\"d\", pathGenerator(circle.center([nightLongitude, nightLatitude]).radius(90-18)())).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Draws the current new landmark.\r\n     * @param {*} svg - the svg used to draw the current new landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawTempLandmark = (svg, isDaylight) => {\r\n        //format of one element of data\r\n        // {\r\n        //     coordinates: [0, 0],\r\n        //     isVisible: false\r\n        //   }\r\n        svg\r\n            .selectAll(\".tempLandmark\")\r\n            .data(tempLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempLandmark\")\r\n            .attr(\"id\", `tempLandmark`)\r\n            .style(\"fill\", \"red\")\r\n            .attr(\"fill-opacity\",\"0.5\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current modified landmark.\r\n     * @param {} svg - the svg used to draw the current modified landmark\r\n     * @param {boolean} isDaylight - the parameter used for night time styles\r\n     */\r\n    const drawEditLandmark = (svg, isDaylight) => {\r\n        //format of one element of data\r\n        // {\r\n        //     coordinates: [0, 0],\r\n        //     isVisible: false\r\n        //   }\r\n        svg\r\n            .selectAll(\".editLandmark\")\r\n            .data(editLandmark)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"editLandmark\")\r\n            .attr(\"id\", landmark => `edit`)\r\n            .style(\"fill\", \"orange\")\r\n            .attr(\"fill-opacity\",\"0.5\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\",\"black\")\r\n            .attr(\"visibility\", landmark => landmark.isVisible ? \"visible\" : \"hidden\")\r\n            .attr(\"d\", landmark => pathGenerator(circle.center([landmark.coordinates[0], landmark.coordinates[1]]).radius(0.1)())).raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the arcs.\r\n     * @param {*} svg - the svg used to draw the arcs\r\n     * @param {boolean} isDayTime - the parameter used for night time styles\r\n     */\r\n    const drawArcs = (svg, isDayTime) => {\r\n        //The format of one element of data is \r\n        //{ type: \"LineString\", coordinates: [[-122.810850, 49.191663], [-156.0407, 19.7367]], id:\"path_9\", path_uid: 9, isAirPlane: true}\r\n        svg\r\n            .selectAll(\".arc\")\r\n            .data(paths)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"arc\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\", \"0\")\r\n            .attr(\"stroke-opacity\", feature => feature.isAirPlane ? 0.3 : 1)\r\n            .attr(\"stroke\", feature => isDayTime ? \"black\" : \"black\")\r\n            .attr(\"stroke-width\", feature => feature.isAirPlane ? 2 : 0.5)\r\n            .attr(\"d\", feature =>pathGenerator(feature)).raise()\r\n            .on(\"click\", (mouseEvent, item) => {\r\n                landmarkHandler([{\r\n                    landmark_uid: -1,\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    coordinates: [0, 0],\r\n                    isVisible: false\r\n                }]);\r\n            } )\r\n            .raise();\r\n    };\r\n\r\n    /**\r\n     * Draws the current new path.\r\n     * @param {*} svg - the svg used to draw the current new path\r\n     * @param {boolean} isDayTime - the parameter used for night time styles\r\n     */\r\n    const drawTempPath = (svg, isDayTime) => {\r\n        //format of one element of data\r\n        // {\r\n        //     type: \"LineString\", \r\n        //     coordinates: [],\r\n        //     isAirPlane: true\r\n        //   }\r\n        svg\r\n            .selectAll(\".tempPath\")\r\n            .data(tempPath)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"tempPath\")\r\n            // .transition()\r\n            .attr(\"fill-opacity\",\"0\")\r\n            .attr(\"stroke\", feature => feature.isAirPlane ? \"red\" : \"#0dff00\")\r\n            .attr(\"stroke-opacity\", feature => 1)\r\n            .attr(\"stroke-width\", feature => 0.5)\r\n            .attr(\"d\", feature =>pathGenerator(feature))\r\n            .raise();\r\n    };\r\n    \r\n    /**\r\n     * Draws the globe.\r\n     * @param {Array<number>} rotateParams - the rotation parameters to position the globe\r\n     * @param {number} scaleParams - the scale parameter to scale the globe\r\n     * @param {boolean} isCoarse - the parameter for fine detail or coarse detail\r\n     */\r\n    const drawGlobe = (rotateParams, scaleParams, isCoarse) => {\r\n        const svg = d3.select(svgRef.current);\r\n        projection.rotate(rotateParams).scale(scaleParams);\r\n\r\n        var isDaylight = false;\r\n        \r\n        drawSphere(svg, isDaylight);\r\n        drawLand(svg, isCoarse, isDaylight);\r\n        drawLakes(svg, isCoarse, isDaylight);\r\n        drawCurrentShadow(svg, isDaylight);\r\n\r\n        if(!isDaylight){\r\n            // drawLights(svg, false);\r\n        }\r\n            \r\n        drawGraticule(svg, isDaylight);\r\n\r\n        drawCurrentLandmark(svg, isDaylight);\r\n        drawArcs(svg, isDaylight);\r\n        drawTempPath(svg, isDaylight);\r\n        drawTempLandmark(svg, isDaylight);\r\n        drawEditLandmark(svg, isDaylight);\r\n        drawLandmarks(svg, isDaylight);\r\n\r\n    };\r\n\r\n    //Use effect hook.\r\n    useEffect(() => {\r\n        drawGlobe(oldCoordinates, scale, true);\r\n        setIsMove(true);\r\n    }, [scale])\r\n\r\n    useEffect(() => {\r\n        drawGlobe(oldCoordinates, scale, false);\r\n    }, [landmarks, paths, tempPath, tempLandmark, currentLandmark, editLandmark, subSolarCoordinates])\r\n    \r\n    return (\r\n        <svg width={size} height={size} ref={svgRef} style={{border:1 }}\r\n            onMouseDown={onMouseDownHandler} \r\n            onMouseMove={onMouseMoveHandler} \r\n            onMouseUp={onMouseUpHandler}>\r\n        </svg>\r\n    );\r\n}\r\n \r\nexport default Globe;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { FormControl, Input, InputLabel, TextField } from \"@material-ui/core\";\r\n\r\nfunction LandmarkInfo({ currentLandmark, value, index, setEditLandmark, updateLandmarks, invalidateAuth, deleteLandmark }) {\r\n    //States\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [editId, setEditId] = useState(-1);\r\n    const [editName, setEditName] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(\"\");\r\n    const [editLongitude, setEditLongitude] = useState(\"\");\r\n    const [editLatitude, setEditLatitude] = useState(\"\");\r\n\r\n    /**\r\n     * Handles the name change of the edited landmark.\r\n     * @param {*} event - the event for the name change\r\n     */\r\n    const handleNameChange = (event) => {\r\n        setEditName(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * Handles the description change of the edited landmark.\r\n     * @param {*} event - the event for the desription change\r\n     */\r\n    const handleDescriptionChange = (event) => {\r\n        setEditDescription(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * Handles the latitude change of the edited landmark.\r\n     * @param {*} event - the event for the latitude change\r\n     */\r\n    const handleLatitudeChange = (event) => {\r\n        if(event.target.value === \"\"){\r\n            var editLandmark = [{\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }];\r\n            setEditLandmark(editLandmark);\r\n        }\r\n\r\n        if(Math.abs(event.target.value) <= 90){\r\n            setEditLatitude(event.target.value);\r\n            var editLandmark = [{\r\n                coordinates: [editLongitude, parseFloat(event.target.value)],\r\n                isVisible: true\r\n            }];\r\n            if(editLongitude !== \"\" && event.target.value !== \"\"){\r\n                setEditLandmark(editLandmark);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the longitude change of the edited landmark.\r\n     * @param {*} event - the event for the longitude change\r\n     */\r\n    const handleLongitudeChange = (event) => {\r\n        if(event.target.value === \"\"){\r\n            var editLandmark = [{\r\n                coordinates: [0, 0],\r\n                isVisible: false\r\n            }];\r\n            setEditLandmark(editLandmark);\r\n        }\r\n\r\n        if(Math.abs(event.target.value) <= 180){\r\n            setEditLongitude(event.target.value);\r\n            var editLandmark = [{\r\n                coordinates: [parseFloat(event.target.value), editLatitude],\r\n                isVisible: true\r\n            }];\r\n            if(editLatitude !== \"\" && event.target.value !== \"\"){\r\n                setEditLandmark(editLandmark);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles deleting the landmark.\r\n     */\r\n    const handleDeleteLandmark = () => {\r\n        let isConfirmed = window.confirm(`Are you sure you want to delete this landmark?\\n\\n${currentLandmark[0].name}\\nlongitude:${currentLandmark[0].coordinates[0]}\\nlatitude:${currentLandmark[0].coordinates[1]}\\n\\n${currentLandmark[0].description}`);\r\n        if(isConfirmed){\r\n            const body = {\r\n                landmark_uid: currentLandmark[0].landmark_uid\r\n            };\r\n            fetch(`/landmarks`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                deleteLandmark(currentLandmark[0].landmark_uid);\r\n                setIsEdit(false);\r\n            })\r\n            .catch(err => invalidateAuth());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles switching to the mode of editing a landmark.\r\n     */\r\n    const handleEditLandmarkMode = () => {\r\n        setIsEdit(true);\r\n        setEditId(currentLandmark[0].landmark_uid);\r\n        setEditName(currentLandmark[0].name);\r\n        setEditDescription(currentLandmark[0].description);\r\n        setEditLongitude(currentLandmark[0].coordinates[0]);\r\n        setEditLatitude(currentLandmark[0].coordinates[1]);\r\n        var editLandmark = [{\r\n            coordinates: [currentLandmark[0].coordinates[0], currentLandmark[0].coordinates[1]],\r\n            isVisible: true\r\n        }];\r\n        setEditLandmark(editLandmark);\r\n    };\r\n\r\n    /**\r\n     * Handles canceling out of the edit mode.\r\n     */\r\n    const handleCancelEdit = () => {\r\n        var editLandmark = [{\r\n            coordinates: [0, 0],\r\n            isVisible: false\r\n        }];\r\n        setEditLandmark(editLandmark);\r\n        setIsEdit(false);\r\n    };\r\n\r\n    /**\r\n     * Handles editing the landmark.\r\n     */\r\n    const handleEditLandmark = () => {\r\n        if(editId !== -1 && editName !== \"\" && editLongitude !== \"\" && editLatitude !== \"\"){\r\n            const body = {\r\n                landmark_uid: editId,\r\n                name: editName,\r\n                description: editDescription,\r\n                coordinates: [editLongitude, editLatitude]\r\n            };\r\n\r\n            fetch(`/landmarks`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                updateLandmarks({\r\n                    landmark_uid: editId,\r\n                    name: editName,\r\n                    description: editDescription,\r\n                    coordinates: [editLongitude, editLatitude]\r\n                });\r\n                setIsEdit(false);\r\n            })\r\n            .catch(err => invalidateAuth());\r\n        }\r\n        else{\r\n            alert('A field is missing! Cannot update landmark.')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the landmark information.\r\n     */\r\n    const getLandmarkInfoContent = () => {\r\n        const landmark = currentLandmark[0];\r\n        if (landmark.isVisible) {\r\n            if(isEdit){\r\n                return (\r\n                    <form>\r\n                        <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n                        <Input \r\n                            type=\"number\" \r\n                            id=\"landmarkLatitude\" \r\n                            placeholder=\"Enter value between -90 to 90\" \r\n                            name=\"Latitude\"\r\n                            value={editLatitude}\r\n                            onChange={handleLatitudeChange}/>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n                        <Input \r\n                            type=\"number\" \r\n                            id=\"landmarkLongitude\" \r\n                            placeholder=\"Enter value between -180 to 180\" \r\n                            name=\"Longitude\"\r\n                            value={editLongitude}\r\n                            onChange={handleLongitudeChange}/>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <TextField \r\n                            id=\"standard-basic\" \r\n                            label=\"Landmark Name\" \r\n                            placeholder=\"ie. Vancouver, BC, Canada\" \r\n                            value={editName}\r\n                            onChange={handleNameChange}\r\n                            fullWidth/>\r\n                        <br/>\r\n                        <TextField\r\n                            id=\"standard-multiline-static\"\r\n                            label=\"Description\"\r\n                            placeholder=\"Enter a description about the landmark\" \r\n                            multiline\r\n                            rows={4}\r\n                            value={editDescription}\r\n                            onChange={handleDescriptionChange}\r\n                            fullWidth/>\r\n                        <br/>\r\n                        <br/>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleEditLandmark}>\r\n                            Finish Edit\r\n                        </Button>\r\n                        \r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handleCancelEdit}>\r\n                            Cancel Edit\r\n                        </Button>\r\n                    </form>\r\n                );\r\n            }\r\n            else{\r\n                var description = landmark.description;\r\n                var descriptionArray = description.split(\"\\n\");\r\n                return (\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            endIcon={<EditIcon/>}\r\n                            onClick={handleEditLandmarkMode}>\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            endIcon={<DeleteIcon/>}\r\n                            onClick={handleDeleteLandmark}>\r\n                            Delete\r\n                        </Button>\r\n                        <Typography variant=\"h4\">\r\n                            {landmark.name}\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" paragraph>\r\n                            Latitude: {landmark.coordinates[1]}, Longitude: {landmark.coordinates[0]}\r\n                        </Typography>\r\n                        {\r\n                            descriptionArray.map(element => {\r\n                                return (\r\n                                    <Typography variant=\"h6\" paragraph>\r\n                                        {element}\r\n                                    </Typography>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Typography variant=\"h4\">\r\n                        Click on a Landmark\r\n                    </Typography>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div hidden={value !== index}>\r\n            \r\n            <Typography variant=\"h5\">\r\n                Landmark Information\r\n            </Typography>\r\n            <br/>\r\n            {getLandmarkInfoContent()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandmarkInfo;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Input, Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nfunction NewLandmarkTab({setLandmarks, value, index, setTempLandmark, invalidateAuth}) {\r\n\r\n  //States\r\n  const [landmarkName, setLandmarkName] = useState(\"\");\r\n  const [landmarkLatitude, setLandmarkLatitude] = useState(\"\");\r\n  const [landmarkLongitude, setLandmarkLongitude] = useState(\"\");\r\n  const [landmarkDescription, setLandmarkDescription] = useState(\"\");\r\n\r\n  /**\r\n   * Handles the description change\r\n   * @param {*} event - the text event \r\n   */\r\n  const handleDescriptionChange = (event) => {\r\n    setLandmarkDescription(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the name change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setLandmarkName(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Handles the latitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLatitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 90){\r\n      setLandmarkLatitude(parseFloat(event.target.value));\r\n      var newTempLandmark = [{\r\n        coordinates: [landmarkLongitude, parseFloat(event.target.value)],\r\n        isVisible: true\r\n      }];\r\n      if(landmarkLongitude !== \"\" && event.target.value !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the longitude change.\r\n   * @param {*} event - the text event\r\n   */\r\n  const handleLongitudeChange = (event) => {\r\n    if(event.target.value === \"\"){\r\n      var newTempLandmark = [{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }];\r\n\r\n      setTempLandmark(newTempLandmark);\r\n    }\r\n    if(Math.abs(event.target.value) <= 180){\r\n      setLandmarkLongitude(parseFloat(event.target.value));\r\n\r\n      var newTempLandmark = [{\r\n        coordinates: [parseFloat(event.target.value), landmarkLatitude],\r\n        isVisible: true\r\n      }];\r\n\r\n      if(event.target.value !== \"\" && landmarkLatitude !== \"\"){\r\n        setTempLandmark(newTempLandmark);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the add landmark event.\r\n   */\r\n  const handleAddLandmark = () => {\r\n    if(!(landmarkName === \"\" || landmarkLatitude === \"\" || landmarkLongitude === \"\")){\r\n      const body = {\r\n        landmarkName: landmarkName,\r\n        landmarkDescription: landmarkDescription,\r\n        latitude: parseFloat(landmarkLatitude),\r\n        longitude: parseFloat(landmarkLongitude)\r\n      }\r\n  \r\n      fetch(`/landmarks`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setLandmarks(prevArray => [...prevArray, {\r\n          id: `landmark_${res.landmark_uid}`,\r\n          path_uid: res.landmark_uid,\r\n          name: landmarkName,\r\n          description: landmarkDescription,\r\n          coordinates: [parseFloat(landmarkLongitude), parseFloat(landmarkLatitude)]\r\n        }])\r\n  \r\n        setLandmarkName(\"\");\r\n        setLandmarkLatitude(\"\");\r\n        setLandmarkLongitude(\"\");\r\n        setLandmarkDescription(\"\");\r\n        setTempLandmark([{\r\n          coordinates: [0, 0],\r\n          isVisible: false\r\n        }]);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Landmark\r\n      </Typography>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLatitude\">Latitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLatitude\" \r\n        placeholder=\"Enter value between -90 to 90\" \r\n        name=\"Latitude\"\r\n        value={landmarkLatitude}\r\n        onChange={handleLatitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <FormControl fullWidth>\r\n      <InputLabel htmlFor=\"landmarkLongitude\">Longitude</InputLabel>\r\n      <Input \r\n        type=\"number\" \r\n        id=\"landmarkLongitude\" \r\n        placeholder=\"Enter value between -180 to 180\" \r\n        name=\"Longitude\"\r\n        value={landmarkLongitude}\r\n        onChange={handleLongitudeChange} />\r\n      </FormControl>\r\n      <br/>\r\n      <TextField \r\n        id=\"standard-basic\" \r\n        label=\"Landmark Name\" \r\n        placeholder=\"ie. Vancouver, BC, Canada\" \r\n        value={landmarkName}\r\n        onChange={handleNameChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <TextField\r\n        id=\"standard-multiline-static\"\r\n        label=\"Description\"\r\n        placeholder=\"Enter a description about the landmark\" \r\n        multiline\r\n        rows={4}\r\n        value={landmarkDescription}\r\n        onChange={handleDescriptionChange} \r\n        fullWidth/>\r\n      <br/>\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddLandmark}>\r\n        Add Landmark\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewLandmarkTab;","//Imports from libraries\r\nimport React, { useState } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Input } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport AirplanemodeActiveIcon from '@material-ui/icons/AirplanemodeActive';\r\nimport CommuteIcon from '@material-ui/icons/Commute';\r\n\r\nfunction NewPathTab({setPaths, value, index, setTempPath, invalidateAuth}) {\r\n\r\n  //NewPathTab states\r\n  const [nodes, setNodes] = useState([]);\r\n  const [isAirplane, setIsAirplane] = useState(true);\r\n\r\n  /**\r\n   * Handles creating a new node.\r\n   */\r\n  const handleNewNode = () => {\r\n    setNodes(prevArray => [...prevArray, [\"\", \"\"]]);\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new path.\r\n   */\r\n  const handleNewPath = () => {\r\n    var isNodesPopulated = true;\r\n\r\n    for(var i = 0; i < nodes.length; i++){\r\n      if(nodes[i][0] === \"\" || nodes[i][1] === \"\"){\r\n        isNodesPopulated = false;\r\n      }\r\n    }\r\n    \r\n    if(isNodesPopulated){\r\n      const body = {\r\n        coordinates: [...nodes], \r\n        isAirPlane: isAirplane\r\n      }\r\n  \r\n      fetch(`/paths`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        let newPath = {\r\n          type: \"LineString\", \r\n          coordinates: [...nodes], \r\n          id:`path_${res.path_uid}`,\r\n          path_uid: res.path_uid,\r\n          isAirPlane: isAirplane\r\n        };\r\n  \r\n        setPaths(prevArray => [...prevArray, newPath]);\r\n        setNodes([]);\r\n        setTempPath([{\r\n          type: \"LineString\",\r\n          coordinates: [],\r\n          isAirPlane: isAirplane\r\n        }]);\r\n      })\r\n      .catch(err => invalidateAuth());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles deleting a node.\r\n   * @param {*} event - the button event\r\n   */\r\n  const handleDeleteNode = (event) => {\r\n    var idArray = event.target.parentElement.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newNodes = [...nodes];\r\n    newNodes.splice(index, 1);\r\n\r\n    setNodes(newNodes);\r\n    updateTempPath(newNodes);\r\n  };\r\n\r\n  /**\r\n   * Updates the temporary path.\r\n   * @param {*} newElements - the nodes used to show the temporary path\r\n   * @param {*} newIsAirplane - (optional) the boolean airplane state\r\n   */\r\n  const updateTempPath = (newElements, newIsAirplane) => {\r\n    var isAirplaneVal = newIsAirplane !== undefined ? newIsAirplane : isAirplane;\r\n\r\n    var newTempPath = {\r\n      type: \"LineString\", \r\n      coordinates: [],\r\n      isAirPlane: isAirplaneVal\r\n    };\r\n\r\n    for(var i = 0; i < newElements.length; i++){\r\n      var node = newElements[i];\r\n      var lat = node[1];\r\n      var long = node[0];\r\n\r\n      if(lat !== \"\" && long !== \"\"){\r\n        newTempPath.coordinates.push(node);\r\n      }\r\n    }\r\n    setTempPath([newTempPath]);\r\n  };\r\n\r\n  /**\r\n   * Handles a latitude field being changed.\r\n   * @param {*} event - the text event \r\n   */\r\n  const onElementLatitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 90){\r\n      item[1] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[1] = event.target.value;\r\n    }\r\n    \r\n    newElements[index] = item;\r\n\r\n    setNodes(newElements);\r\n    //TODO: fix excessive rendering\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles a longitude field being changed.\r\n   * @param {*} event - the text event\r\n   */\r\n  const onElementLongitudeChange = (event) => {\r\n    var idArray = event.target.id.split(\"_\");\r\n    var index = parseInt(idArray[1]);\r\n\r\n    var newElements = [...nodes];\r\n    let item = {...newElements[index]};\r\n\r\n    if(Math.abs(parseFloat(event.target.value)) <= 180){\r\n      item[0] = parseFloat(event.target.value);\r\n    }\r\n    else if(event.target.value === \"\"){\r\n      item[0] = event.target.value;\r\n    }\r\n\r\n    newElements[index] = item;\r\n    \r\n    setNodes(newElements);\r\n    //TODO: fix excessive rendering\r\n    updateTempPath(newElements);\r\n  };\r\n\r\n  /**\r\n   * Handles the switch state being changed.\r\n   * @param {*} event - the switch event\r\n   */\r\n  const handleSwitchChange = (event) => {\r\n    setIsAirplane(event.target.checked);\r\n    updateTempPath(nodes, event.target.checked);\r\n  };\r\n\r\n  /**\r\n   * Gets the view for the finish button.\r\n   */\r\n  const getFinishButton = () => {\r\n    if(nodes.length >= 2){\r\n      return(\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleNewPath} fullWidth>\r\n          Finish Path\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form hidden={value !== index}>\r\n      <Typography variant=\"h5\">\r\n        Create a New Path\r\n      </Typography>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch \r\n            checked={isAirplane} \r\n            onChange={handleSwitchChange} \r\n            name=\"checkedA\" \r\n            checkedIcon={<AirplanemodeActiveIcon/>}\r\n            icon={<CommuteIcon/>}\r\n          />\r\n        }\r\n        label=\"Travel Type\"/>\r\n      {\r\n        nodes.map((element, index) => {\r\n          var latId = `nodeLatitude_${index}`;\r\n          var longitudeId = `nodeLongitude_${index}`;\r\n          var deleteBtnId = `deleteBtn_${index}`;\r\n\r\n          return (\r\n            <form>\r\n              <br/>\r\n              <Typography>Node {index + 1}</Typography>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor={latId}>Latitude</InputLabel>\r\n                <Input \r\n                  type=\"number\" \r\n                  id={latId}\r\n                  placeholder=\"Enter value between -90 to 90\" \r\n                  name=\"Latitude\"\r\n                  value={element[1]}\r\n                  onChange={onElementLatitudeChange} />\r\n              </FormControl>\r\n              <FormControl fullWidth>\r\n              <InputLabel htmlFor={longitudeId}>Longitude</InputLabel>\r\n              <Input \r\n                type=\"number\" \r\n                id={longitudeId}\r\n                placeholder=\"Enter value between -180 to 180\" \r\n                name=\"Longitude\"\r\n                value={element[0]}\r\n                onChange={onElementLongitudeChange} />\r\n              </FormControl>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={handleDeleteNode} fullWidth id={deleteBtnId}>\r\n                Delete Node {index + 1}\r\n              </Button>\r\n            </form>\r\n          );\r\n        })\r\n      }\r\n      <br/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleNewNode} fullWidth> \r\n        Add Node\r\n      </Button>\r\n      \r\n      {getFinishButton()}\r\n\r\n      <br/>\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewPathTab;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nfunction ZoomSlider({ scale, handleChangeScale }) {\r\n  const marks = [\r\n    {\r\n      value: 1,\r\n      label: 'Full View',\r\n    },\r\n    {\r\n      value: 2,\r\n      label: 'Half View',\r\n    },\r\n    {\r\n      value: 4.24733333333,\r\n      label: '3000 km',\r\n    },\r\n    {\r\n      value: 8.49466666667,\r\n      label: '1500 km',\r\n    },\r\n    {\r\n      value: 12.742,\r\n      label: '1000 km',\r\n    },\r\n    {\r\n      value: 16.9893333333,\r\n      label: '750 km',\r\n    },\r\n    {\r\n      value: 21.2366666667,\r\n      label: '600 km',\r\n    },\r\n    {\r\n      value: 25.484,\r\n      label: '500 km',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{height:\"100%\"}}>\r\n      <Typography id=\"vertical-slider\" gutterBottom>\r\n        <SearchIcon/>\r\n      </Typography>\r\n      <Slider\r\n        orientation=\"vertical\" value={scale} onChange={handleChangeScale}\r\n        aria-labelledby=\"vertical-slider\" step={0.01}\r\n        min={1}\r\n        max={25.484}\r\n        marks={marks}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZoomSlider;","import './App.css';\r\nimport Globe from './Globe';\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { Button, Grid, Toolbar, Typography } from '@material-ui/core';\r\nimport LandmarkInfo from './LandmarkInfo';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport NewLandmarkTab from './NewLandmarkTab';\r\nimport NewPathTab from './NewPathTab';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport ZoomSlider from './ZoomSlider';\r\nimport {  Redirect } from \"react-router-dom\";\r\n\r\nfunction Dashboard() {\r\n  // const classes = useStyles();\r\n  //States\r\n  const [scale, setScale] = useState(1);\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  const [isAuth, setIsAuth] = useState(true);\r\n  const [paths, setPaths] = useState([]);\r\n  const [landmarks, setLandmarks] = useState([]);\r\n  const [subSolarCoordinates, setSubSolarCoordinates] = useState([0, 0]);\r\n\r\n  const [currentLandmark, setCurrentLandmark] = useState([{\r\n    landmark_uid: -1,\r\n    name: \"\",\r\n    description: \"\",\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n  const [tempPath, setTempPath] = useState([{\r\n    type: \"LineString\", \r\n    coordinates: [],\r\n    isAirPlane: true\r\n  }]);\r\n  const [tempLandmark, setTempLandmark] = useState([{\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n  const [editLandmark, setEditLandmark] = useState([{\r\n    coordinates: [0, 0],\r\n    isVisible: false\r\n  }]);\r\n\r\n  // const clientHeight = document.getElementById('globeGrid').clientHeight;\r\n\r\n  /**\r\n   * Handles the scale change.\r\n   * @param {*} event - the event of the scale change\r\n   * @param {number} newValue - the value used to change the scale\r\n   */\r\n  const handleChangeScale = (event, newValue) => {\r\n    setScale(newValue);\r\n  };\r\n\r\n  \r\n  // const getWindowDimension = () => {\r\n  //   var width = document.getElementById('globeGrid').offsetWidth;\r\n  //   var height = document.getElementById('globeGrid').offsetHeight;\r\n  //   console.log(width < height ? width : height);\r\n  //   return width < height ? width : height;\r\n  // };\r\n\r\n  /**\r\n   * Gets the minimum dimension of the browser window.\r\n   */\r\n  const getMinDimension = () => {\r\n    // console.log(\"dimension calculated\");\r\n    return window.innerHeight < window.innerWidth ? window.innerHeight : window.innerWidth;\r\n  };\r\n\r\n  /**\r\n   * Handle's the tab change.\r\n   * @param {*} event - the event of the tab change\r\n   * @param {number} newValue - the value used to change the tab\r\n   */\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  /**\r\n   * Gets the user's paths from the database.\r\n   */\r\n  const getUserPaths = () => {\r\n    fetch(`/paths`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => setPaths(res))\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Gets the user's landmarks from the database.\r\n   */\r\n  const getUserLandmarks = () => {\r\n    fetch(`/landmarks`, {\r\n      headers: {\r\n        'authorization' : `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => setLandmarks(res))\r\n    .catch((error) => {\r\n      invalidateAuth();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Invalidates the authorization of the user.\r\n   */\r\n  const invalidateAuth = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuth(false);\r\n  };\r\n\r\n  /**\r\n   * Gets the subsolar point from the backend.\r\n   */\r\n  const getSubsolarPoint = () => {\r\n    fetch(`/sun`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setSubSolarCoordinates([res.longitude, res.latitude]);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the front end landmark.\r\n   * @param {*} landmark - the landmark to be updated\r\n   */\r\n  const updateLandmarks = (landmark) => {\r\n    let items = [...landmarks];\r\n    for(var i = 0; i < items.length; i++){\r\n      if(items[i].landmark_uid === landmark.landmark_uid){\r\n        let itemToUpdate = {...items[i]};\r\n\r\n        itemToUpdate.name = landmark.name;\r\n        itemToUpdate.description = landmark.description;\r\n        itemToUpdate.coordinates = landmark.coordinates;\r\n\r\n        items[i] = itemToUpdate;\r\n\r\n        setLandmarks(items);\r\n        setCurrentLandmark([{\r\n          landmark_uid: landmark.landmark_uid,\r\n          name: landmark.name,\r\n          description: landmark.description,\r\n          coordinates: landmark.coordinates,\r\n          isVisible: true\r\n        }]);\r\n        setEditLandmark([{\r\n          coordinates: [0, 0],\r\n          isVisible: false\r\n        }]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Deletes the frontend landmark.\r\n   * @param {number} landmark_uid - the landmark UID to be deleted.\r\n   */\r\n  const deleteLandmark = (landmark_uid) => {\r\n    let items = [...landmarks];\r\n    var index = -1;\r\n    for(var i = 0; i < items.length; i++){\r\n      if(items[i].landmark_uid === landmark_uid){\r\n        index = i;\r\n      }\r\n    }\r\n    if(index !== -1){\r\n      items.splice(index, 1);\r\n      setLandmarks(items);\r\n      setCurrentLandmark([{\r\n        landmark_uid: -1,\r\n        name: \"\",\r\n        description: \"\",\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }]);\r\n      setEditLandmark([{\r\n        coordinates: [0, 0],\r\n        isVisible: false\r\n      }]);\r\n    }\r\n  };\r\n\r\n // Use effect hook.\r\n  useEffect(() => {\r\n    getUserLandmarks();\r\n    getUserPaths();\r\n    getSubsolarPoint();\r\n    const interval = setInterval(() => {\r\n      getSubsolarPoint();\r\n    }, 2 * 60000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the dashboard content.\r\n   */\r\n  const getDashboardContent = () => {\r\n    if(isAuth){\r\n      return (\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={1} style={{ padding: 60, height:\"90vh\" }}>\r\n            <ZoomSlider scale={scale} handleChangeScale={handleChangeScale}/>\r\n          </Grid>\r\n          <Grid item xs={7} style={{ padding: 60, height:\"90vh\" }}>\r\n            <Globe scale={scale * getMinDimension()*0.8/2} \r\n              paths={paths} \r\n              landmarks={landmarks} \r\n              landmarkHandler={setCurrentLandmark} \r\n              size={getMinDimension()*0.8} \r\n              tempPath={tempPath}\r\n              tempLandmark={tempLandmark}\r\n              currentLandmark={currentLandmark}\r\n              editLandmark={editLandmark}\r\n              subSolarCoordinates={subSolarCoordinates}/>\r\n          </Grid>\r\n          <Grid item xs={4} style={{ padding: 60, height:\"90vh\" }} align=\"left\">\r\n            <AppBar position=\"static\">\r\n              <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\r\n                <Tab style={{ minWidth: 25 }} icon={<InfoIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<RoomIcon/>}/>\r\n                <Tab style={{ minWidth: 25 }} icon={<TimelineIcon/>}/>\r\n              </Tabs>\r\n            </AppBar>\r\n            <LandmarkInfo currentLandmark={currentLandmark} value={tabValue} index={0} setEditLandmark={setEditLandmark} updateLandmarks={updateLandmarks} invalidateAuth={invalidateAuth} deleteLandmark={deleteLandmark}/>\r\n            <NewLandmarkTab setLandmarks={setLandmarks} value={tabValue} index={1} setTempLandmark={setTempLandmark} invalidateAuth={invalidateAuth}/>\r\n            <NewPathTab setPaths={setPaths} value={tabValue} index={2} setTempPath={setTempPath} invalidateAuth={invalidateAuth}/>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n    else{\r\n      return (<Redirect to={{pathname:'/loggedOut'}}/>);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">\r\n            Wanderlust\r\n          </Typography>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={invalidateAuth}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {getDashboardContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","//Imports from libraries\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\n\r\nfunction SignIn() {\r\n  //States\r\n  const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  /**\r\n   * Handles the change in username.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the change in password.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the signing in.\r\n   */\r\n  const handleSignIn = () => {\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n\r\n    const body = {\r\n      \"username\": username,\r\n      \"password\": password\r\n    }\r\n    \r\n    fetch(`/users/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      localStorage.setItem('token', res.token);\r\n      setIsTokenValid(true);\r\n    })\r\n    .catch((error) => alert(\"Invalid credentials!\"));\r\n  };\r\n\r\n  //Use effect hook.\r\n  useEffect(() => {\r\n    if(localStorage.getItem('token') !== null){\r\n      fetch(`/users/checkToken`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if(res.isTokenValid){\r\n          setIsTokenValid(true);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Gets the SignIn page content.\r\n   */\r\n  const getSignInContent = () => {\r\n    if(isTokenValid){\r\n      return (<Redirect to={{pathname:'/dashboard'}}/>);\r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete=\"username\"\r\n              autoFocus\r\n              value={username}\r\n              onChange={handleUsernameChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={password}\r\n              onChange={handlePasswordChange}\r\n            />\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleSignIn}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </form>\r\n          <Link to=\"/signUp\">Don't have an account? Sign up</Link>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {getSignInContent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","//Imports from libraries\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction LoggedOut() {\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            Session has expired. Please sign back in.\r\n            <br/>\r\n            <Link to=\"/\">Back to Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoggedOut;","//Imports from libraries\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport {  Redirect, Link } from \"react-router-dom\";\r\n\r\nfunction SignUp() {\r\n  //States\r\n  // const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isUsernameTaken, setIsUsernameTaken] = useState(false);\r\n\r\n  /**\r\n   * Checks if a string has a number.\r\n   * @param {String} value - the string used to check if it has a number\r\n   */\r\n  const hasNumber = value => {\r\n    return new RegExp(/[0-9]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has mixed caps.\r\n   * @param {String} value - the string used to check if it has mixed caps\r\n   */\r\n  const hasMixed = value => {\r\n    return new RegExp(/[a-z]/).test(value) && new RegExp(/[A-Z]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if a string has special characters\r\n   * @param {*} value - the string used to check if it has special characters\r\n   */\r\n  const hasSpecial = value => {\r\n    return new RegExp(/[!#@$%^&*)(+=._-]/).test(value);\r\n  }\r\n\r\n  /**\r\n   * Gets the human readable value of a password strength.\r\n   * @param {number} count - the password strength\r\n   */\r\n  const strengthMagnitude = count => {\r\n    if (count < 2)\r\n       return 'Very Weak';\r\n    if (count < 3)\r\n       return 'Weak';\r\n    if (count < 4)\r\n       return 'Fair';\r\n    if (count < 5)\r\n       return 'Good';\r\n    if (count < 6)\r\n       return 'Strong';\r\n  }\r\n\r\n  /**\r\n   * Gets the strength of a password.\r\n   * @param {String} value - the string used to check the strenght of a password\r\n   */\r\n  const strengthIndicator = value => {\r\n    let strengths = 0;\r\n    if (value.length > 5)\r\n       strengths++;\r\n    if (value.length > 7)\r\n       strengths++;\r\n    if (hasNumber(value))\r\n       strengths++;\r\n    if (hasSpecial(value))\r\n       strengths++;\r\n    if (hasMixed(value))\r\n       strengths++;\r\n    return strengthMagnitude(strengths);\r\n  }\r\n\r\n  /**\r\n   * Handles the username change.\r\n   * @param {*} event - the event for the username change\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n    getUsernameStatus(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the password change.\r\n   * @param {*} event - the event for the password change\r\n   */\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Handles the email change.\r\n   * @param {*} event - the event for the email change\r\n   */\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Gets the availability of the username\r\n   * @param {String} value - the string used to check the availability of a username\r\n   */\r\n  const getUsernameStatus = (value) => {\r\n    fetch(`/users/exists?username=${value}`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setIsUsernameTaken(res.isexist === \"true\" ? true : false);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the user signing up.\r\n   */\r\n  const handleSignUp = () => {\r\n    if(email === \"\" || password === \"\" || username === \"\"){\r\n      alert(\"At least one field is empty!\");\r\n    }\r\n    else{\r\n      const body = {\r\n        \"email\": email,\r\n        \"password\" : password,\r\n        \"username\" : username\r\n      }\r\n  \r\n      fetch(`/users/create`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        setEmail(\"\");\r\n        alert(\"A new user has been made!\");\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error);\r\n        alert(\"The username already exists! Please create an unowned username.\");\r\n      });\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(localStorage.getItem('token') !== null){\r\n  //     fetch(`/users/checkToken`, {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         'authorization' : `Bearer ${localStorage.getItem('token')}`\r\n  //       },\r\n  //     })\r\n  //     .then(res => res.json())\r\n  //     .then(res => {\r\n  //       if(res.isTokenValid){\r\n  //         setIsTokenValid(true);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Sign Up\r\n      </Typography>\r\n      <form>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label=\"Email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          value={email}\r\n          onChange={handleEmailChange}\r\n        />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"username\"\r\n          label=\"Username\"\r\n          autoComplete=\"username\"\r\n          value={username}\r\n          onChange={handleUsernameChange}\r\n        />\r\n        Username Status: {isUsernameTaken ? \"Taken\" : \"Available\"}\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n        />\r\n        Password Strength: {strengthIndicator(password)}\r\n        <Button\r\n          // type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={handleSignUp}\r\n        >\r\n          Sign Up\r\n        </Button>\r\n      </form>\r\n      <Link to=\"/\">Back to sign in screen</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import './App.css';\nimport React, { Component, useState, useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Dashboard from './Dashboard';\nimport SignIn from './SignIn';\nimport LoggedOut from './LoggedOut';\nimport SignUp from './SignUp';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nfunction App() {\n  \n  useEffect(() => {\n    document.title = 'Wanderlust';\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={SignIn}/>\n          <Route exact path='/dashboard' component={Dashboard}/>\n          <Route exact path='/loggedOut' component={LoggedOut}/>\n          <Route exact path='/signUp' component={SignUp}/>\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}